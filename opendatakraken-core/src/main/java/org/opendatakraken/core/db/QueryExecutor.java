package org.opendatakraken.core.db;

import java.io.*;
import java.sql.*;
import java.util.Properties;

import javax.naming.*;
import javax.sql.*;
import javax.sql.rowset.*;

import org.slf4j.LoggerFactory;

/**
 * This class contains methods to execute queries in a RDBMS.
 * The output generated by the query can be retrieved as a webrowset (xml) as well as plain text
 * @author marangon
 */
public class QueryExecutor {

	static final org.slf4j.Logger logger = LoggerFactory.getLogger(QueryExecutor.class);

	// Declarations of bean properties
    private String connectionPropertyFile = "";
	private String databaseDriver = "";
	private String connectionURL = "";
	private String userName = "";
	private String passWord = "";
	private String sourceName = "";
	private String queryText = "";
	private String[] queryParameters = null;

	// Declarations of internally used variables
    private Properties connectionProperties = null;
	private WebRowSet webRS;
	//private WebRowSetImpl webRS;
	private String rawOutput = "";
	
	// Declarations for external streams and writers
	private Writer writer;
	private OutputStream stream;

	/**
	 * Constructor
	 */
	public QueryExecutor() {
		super();
	}

	/**
	 * Set the database JDBC driver
	 */
    public void setConnectionPropertyFile(String pr) {
    	connectionPropertyFile = pr;
    }
    
	public void setDatabaseDriver(String dd) {
		databaseDriver = dd;
	}

	/**
	 * Set the database connection URL (used if no data sorce given)
	 */
	public void setConnectionURL(String cu) {
		connectionURL = cu;
	}

	/**
	 * Set the connection username (used if no data sorce given)
	 */
	public void setUserName(String un) {
		userName = un;
	}

	/**
	 * Set the connection password (used if no data sorce given)
	 */
	public void setPassWord(String pw) {
		passWord = pw;
	}

	/**
	 * Set the data source name
	 */
	public void setSourceName(String sn) {
		sourceName = sn;
	}

	/**
	 * Set the SQL query text to execute
	 */
	public void setQueryText(String qt) {
		queryText = qt;
	}

	/**
	 * Set the query parameters values in positional way
	 */
	public void setQueryParameters(String[] qp) {
		queryParameters = qp;
	}

	/**
	 * Set the writer to wich the output will be written
	 */
	public void setWriter(Writer wr) {
		writer = wr;
	}

	/**
	 * Set the output stream object to wich the output will be written
	 */
	public void setStream(OutputStream st) {
		stream = st;
	}

	/**
	 * Execute the query and get the generated output in form of a WebRowSet object (XML)
	 */
	public WebRowSet getWebRS() throws Exception {
		RowSetFactory rowSetFactory = RowSetProvider.newFactory();
		if (sourceName.equals("") || sourceName == null) {
			try {
				Class.forName(databaseDriver).newInstance();
				logger.info("Database driver loaded");
			}
			catch (Exception e){
				logger.error("Cannot load database driver " + databaseDriver + ":\n" + e.getMessage());
				e.printStackTrace();
				throw e;
			}
			try {
				webRS = rowSetFactory.createWebRowSet();
				webRS.setUrl(connectionURL);
				webRS.setUsername(userName);
				webRS.setPassword(passWord);
			}
			catch(Exception e) {
				logger.error("Cannot connect to datasource " + sourceName + ":\n" + e.getMessage());
				e.printStackTrace();
				throw e;
			}
		}
		else {
			try {
				webRS =  rowSetFactory.createWebRowSet();
				webRS.setDataSourceName("java:comp/env/jdbc/" + sourceName.toLowerCase());
			}
			catch(SQLException e) {
				logger.error("Cannot connect to datasource " + sourceName + ":\n" + e.getMessage());
				e.printStackTrace();
				throw e;
			}
		}

		try {
			webRS.setCommand(queryText);
			try {
				for (int i = 0; i < queryParameters.length; i++) {
					logger.info("Param "+ i + ": " + queryParameters[i]);
					webRS.setObject(i + 1, queryParameters[i]);
				}
			}
			catch(NullPointerException e) {
				logger.error("No query parameters dedebugd:\n" + e.getMessage());
			}
			webRS.execute();
			logger.info("Dataset generated.");
		}
		catch (SQLException e) {
			logger.error("Cannot generate dataset:\n" + e.getMessage());
			e.printStackTrace();
		}

		return webRS;
	}

	/**
	 * Execute the query and get the generated output in form of a WebRowSet object (XML)
	 */
	public String getRawOutput() throws Exception {

		DataSource qryDs = null;
		Connection con = null;
		PreparedStatement prepStmt = null;
		ResultSet rs = null;
		ResultSetMetaData rsmd = null;

		if (sourceName.equals("") || sourceName == null) {
			try {
				Class.forName(databaseDriver).newInstance();
				logger.info("Loaded database driver " + databaseDriver);
			}
			catch (Exception e){
				logger.error("Cannot load database driver " + databaseDriver + ":\n" + e.getMessage());
				e.printStackTrace();
				throw e;
			}
			try {
				con = DriverManager.getConnection(connectionURL, userName, passWord);
				logger.info("Connected to database " + connectionURL);
			}
			catch (SQLException e){
				logger.error("Cannot connect to database " + connectionURL + ":\n" + e.getMessage());
				e.printStackTrace();
				throw e;
			}
		}
		else {
			InitialContext ic;
			try {
				ic = new InitialContext();
				qryDs = (DataSource)ic.lookup("java:comp/env/jdbc/" + sourceName.toLowerCase());
			}
			catch (NamingException e) {
				logger.error( "Cannot find datasource " + sourceName + ":\n" + e.getMessage());
				e.printStackTrace();
				throw e;
			}
			try {
				con = qryDs.getConnection();
				logger.info("Connected to database " + sourceName);
			}
			catch(SQLException e) {
				logger.error( "Cannot connect to datasource " + sourceName + ":\n" + e.getMessage());
				e.printStackTrace();
				throw e;
			}
		}

		try {
			prepStmt = con.prepareStatement(queryText);
			try {
				for (int i = 0; i < queryParameters.length; i++) {
					logger.info("Param "+ i + ": " + queryParameters[i]);
					prepStmt.setString(i + 1, queryParameters[i]);
				}
			}
			catch(NullPointerException e) {
				logger.info("No query parameters dedebugd");
			}
			//Open result set
			rs = prepStmt.executeQuery();
			rsmd = rs.getMetaData();
			//Populate raw string
			rawOutput = "";
			while (rs.next()) {
				for ( int i = 1; i <= rsmd.getColumnCount(); i++ ) {
					rawOutput += rs.getString(i);
				}
				rawOutput += "\n";
			}
			//Close everything
			rs.close();
			prepStmt.close();
			con.close();
			logger.info("Dataset generated.");

		}
		catch (SQLException e) {
			logger.error( "Cannot generate dataset:\n" + e.getMessage());
			e.printStackTrace();
			try {
				con.close();
			}
			catch(SQLException e2) {
				e2.printStackTrace();
			}
			throw e;
		}

		return rawOutput;
	}

	/**
	 * Execute the query using the WebRowSet object
	 */
	public void generate() throws Exception {
		RowSetFactory rowSetFactory = RowSetProvider.newFactory();

		if (sourceName.equals("") || sourceName == null) {
			try {
				Class.forName(databaseDriver).newInstance();
				logger.info("Loaded database driver " + databaseDriver);
			}
			catch (Exception e){
				logger.error("Cannot load database driver " + databaseDriver + ":\n" + e.getMessage());
				e.printStackTrace();
			}
			try {
				webRS = rowSetFactory.createWebRowSet();
				webRS.setUrl(connectionURL);
				webRS.setUsername(userName);
				webRS.setPassword(passWord);
			}
			catch(SQLException e) {
				logger.error("Cannot connect to datasource " + sourceName + ":\n" + e.getMessage());
				e.printStackTrace();
			}
		}
		else {
			try {
				webRS = rowSetFactory.createWebRowSet();
				webRS.setDataSourceName("java:comp/env/jdbc/" + sourceName.toLowerCase());
			}
			catch(SQLException e) {
				logger.error("Cannot connect to datasource " + sourceName + ":\n" + e.getMessage());
				e.printStackTrace();
			}
		}

		try {
			webRS.setCommand(queryText);
			try {
				for (int i = 0; i < queryParameters.length; i++) {
					logger.info("Param "+ i + ": " + queryParameters[i]);
					webRS.setObject(i + 1, queryParameters[i]);
				}
			}
			catch(NullPointerException e) {
				logger.info("No query parameters dedebugd");
			}
			webRS.execute();
			logger.info("Dataset generated.");

		}
		catch (SQLException e) {
			logger.error("Cannot generate dataset:\n" + e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * Write the WebRowSet output to the writer
	 */
	public void writeWRS() {

		try {
			webRS.writeXml(writer);
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Write the WebRowSet output to the stream
	 */
	public void streamWRS() {

		try {
			webRS.writeXml(stream);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
}
