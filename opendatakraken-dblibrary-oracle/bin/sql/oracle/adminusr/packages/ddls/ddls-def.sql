CREATE OR REPLACE PACKAGE p#frm#ddls
   AUTHID CURRENT_USER
AS
   /**
   * Templates for standard ddls
   * APIs to construct list of columns and column definitions
   *
   * $Author: admin $
   * $Date: 2015-05-03 18:17:11 +0200 (So, 03 Mai 2015) $
   * $Revision: 15 $
   * $Id: ddls-def.sql 15 2015-05-03 16:17:11Z admin $
   * $HeadURL: http://192.168.178.61/svn/odk/oracle/adminusr/packages/ddls/ddls-def.sql $
   */
   /**
   * Package spec version string.
   */
   c_spec_version     CONSTANT VARCHAR2 (1024) := '$Id: ddls-def.sql 15 2015-05-03 16:17:11Z admin $';
   /**
   * Package spec repository URL.
   */
   c_spec_url         CONSTANT VARCHAR2 (1024) := '$HeadURL: http://192.168.178.61/svn/odk/oracle/adminusr/packages/ddls/ddls-def.sql $';
   /**
   * Package body version string.
   */
   c_body_version              VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                  VARCHAR2 (1024);

   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * Templates for entity objects
   */
   c_name_entity_tab           t_object_name := '#entityPrefix##entityName#_T';
   c_name_entity_cdc           t_object_name := '#entityPrefix##entityName#_CDC';
   c_name_entity_bkp           t_object_name := '#entityPrefix##entityName#_BKP';
   c_name_entity_cbk           t_object_name := '#entityPrefix##entityName#_CBK';
   c_name_entity_seq           t_object_name := '#entityPrefix##entityName#_SEQ';
   c_name_entity_id            t_object_name := '#entityName#_ID';
   c_name_entity_pk            t_object_name := '#entityPrefix##entityName#_PK';
   -- Template to create a standard entity table.
   c_template_entity_tab       CLOB := 'CREATE TABLE #entityTable# (
		 #entityId# number
	 , #columnDefinitionList#
	 , session_user VARCHAR2(100) DEFAULT USER
	 , os_user VARCHAR2(100) DEFAULT SYS_CONTEXT (''USERENV'', ''OS_USER'')
	 , create_date DATE DEFAULT SYSDATE
	 , update_date DATE DEFAULT SYSDATE
	 , CONSTRAINT #entityPK# PRIMARY KEY (#entityId#)
	)';
   -- Template to create a cdc table for a standard entity table.
   c_template_entity_cdc       CLOB := 'CREATE TABLE #entityCDC# (
		#entityId# NUMBER
	 , #columnDefinitionList#
	 , session_user VARCHAR2(100) DEFAULT USER
	 , os_user VARCHAR2(100) DEFAULT SYS_CONTEXT (''USERENV'', ''OS_USER'')
	 , create_date DATE DEFAULT SYSDATE
	 , update_date DATE DEFAULT SYSDATE
   , dml_operation VARCHAR2(100) DEFAULT ''INSERT''
	 , dml_date DATE DEFAULT SYSDATE
	)';
   -- Template to create a cdc trigger for a standard entity table
   c_template_entity_trg_cdc   CLOB := 'CREATE OR REPLACE TRIGGER #entityTable#dc
   AFTER INSERT OR UPDATE OR DELETE
   ON #entityTable#
   FOR EACH ROW
DECLARE
   l_vc_operation          VARCHAR2 (10);
BEGIN

   IF INSERTING
   THEN
      l_vc_operation        := ''INSERT'';
   ELSIF UPDATING
   THEN
      l_vc_operation        := ''UPDATE'';
   ELSIF DELETING
   THEN
      l_vc_operation        := ''DELETE'';
   END IF;
   
   -- Insert record into audit table
   CASE
      WHEN l_vc_operation IN (''INSERT'', ''UPDATE'')
      THEN
         INSERT INTO #entityCDC#
                     (#columnList#
                    , dml_operation
                     )
              VALUES (#columnListNew#
                    , l_vc_operation
                     );
      WHEN l_vc_operation IN (''DELETE'')
      THEN
         INSERT INTO #entityCDC#
                     (#columnList#
                    , dml_operation
                     )
              VALUES (#columnListOld#
                    , l_vc_operation
                     );
   END CASE;
END;';
   -- Template for the name of a sequence related to a standard entity table.
   c_template_entity_seq       CLOB := 'CREATE SEQUENCE #entitySequence#';
   -- Template for the insert trigger related to a standard entity table.
   c_template_entity_trg_ins   CLOB := 'CREATE OR REPLACE TRIGGER #entityTable#bi BEFORE
	INSERT
		ON #entityTable# FOR EACH ROW
BEGIN
	IF :NEW.#entityId# IS NULL THEN
		SELECT
			#entitySequence#.nextval
		INTO
			:NEW.#entityId#
		FROM
			DUAL;
	END IF;
END;';
   -- Template for the update trigger related to a standard entity table.
   c_template_entity_trg_upd   CLOB := 'CREATE OR REPLACE TRIGGER #entityTable#bu BEFORE
	UPDATE
		ON #entityTable# FOR EACH ROW
BEGIN
	:NEW.update_date := SYSDATE;
END;';
   /**
   * Package head code template
   */
   c_template_pkg_head         CLOB := 'CREATE OR REPLACE PACKAGE #pkgName# AS
/**
 * This package has been dynamically generated by the
 * ETL framework code generator
 *
 *
 * Version of the framework packages:
#generatingVersion#
 *
 */
   #varList#
   #prcList#

END #pkgName#;';
   /**
   * Package body code template
   */
   c_template_pkg_body         CLOB := 'CREATE OR REPLACE PACKAGE BODY #pkgName# AS
   #varList#
   #prcList#
END #pkgName#;';
   /**
   * Procedure head code template
   */
   c_template_prc_head         CLOB := '
   PROCEDURE #prcName# (
      #prcParameters#);';
   /**
   * Procedure body code template
   */
   c_template_prc_body         CLOB := '
   PROCEDURE #prcName# (
      #prcParameters#) IS
      l_vc_prc_name    VARCHAR2(50) := ''#prcName#'';
      l_d_start        DATE                       := SYSDATE;
      l_n_result       NUMBER;
      l_n_stat_id      NUMBER;
      l_b_ok           BOOLEAN;
      #varList#
   BEGIN
      #prcInitialize#
   
      p#frm#trac.log_sub_info (l_vc_prc_name, ''Start'');
      
      #prcBody#
      
      p#frm#trac.log_sub_info (l_vc_prc_name, ''Finish'');
        
      #prcFinalize#
        
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_sub_error (l_vc_prc_name, ''Error'');
         #exceptionHandling#
         RAISE;
   END #prcName#;';
   /**
   * Function head code template
   */
   c_template_fct_head         CLOB := '
   FUNCTION #prcName# (
      #prcParameters#)
   RETURN #returnType#;';
   /**
   * Function body code template
   */
   c_template_fct_body         CLOB := '
   FUNCTION #prcName# (
      #prcParameters#)
   RETURN #returnType# IS
      l_vc_prc_name     VARCHAR2(50) := ''#prcName#'';
      #varList#
   BEGIN
      #prcInitialize#
      
      p#frm#trac.log_sub_info (l_vc_prc_name, ''Start'');
      
      #prcBody#
      
      p#frm#trac.log_sub_info (l_vc_prc_name, ''Finish'');
      RETURN #returnVar#>;
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_sub_error (l_vc_prc_name, ''Error'');
         #exceptionHandling#
         RAISE;
   END #prcName#;';
   -- Create table template
   c_template_create_table     CLOB := 'CREATE TABLE #tableName# (#listColUtl##listColumns#) #storageClause#';
   -- Template to add a primary key
   c_template_create_pk        CLOB := 'ALTER TABLE #tableName# ADD (CONSTRAINT #pkName# PRIMARY KEY (#listColPk#) USING INDEX #storageClause#)';
   -- Template to add a primary key
   c_template_create_notnull   CLOB := 'ALTER TABLE #tableName# MODIFY (#columnName# NOT NULL)';

   /**
   * Substitute a parameter (#parameter_name#) with a text
   *
   * @param p_vc_code_string     Parameterized string
   * @param p_vc_param_name      Name of the parameter, surrounded by "#"
   * @param p_vc_param_value     Substitute text
   */
   PROCEDURE prc_set_text_param (
      p_vc_code_string   IN OUT CLOB
    , p_vc_param_name    IN     VARCHAR2
    , p_vc_param_value   IN     CLOB
   );

   /**
   * Execute a statement contained in a CLOB string
   *
   * @param p_sql_code      String containing the statement
   */
   PROCEDURE prc_execute (p_sql_code CLOB);

   /**
   * Copy the content of a given source table to a target table.
   * Only common columns are considered
   *
   * @param p_vc_table_name_trg    Target table
   * @param p_vc_table_name_src    Source table
   */
   PROCEDURE prc_migrate_table (
      p_vc_table_name_trg    VARCHAR2
    , p_vc_table_name_src    VARCHAR2
   );

   /**
   * Backup the content of a given source table
   * to a newly created target table with the same structure
   * Only common columns are considered
   *
   * @param p_vc_table_name    Source table
   * @param p_vc_backup_name   Backup table
   * @param p_b_raise_flag     Raise exception if backup table already exists
   */
   PROCEDURE prc_backup_table (
      p_vc_table_name     VARCHAR2
    , p_vc_backup_name    VARCHAR2
    , p_b_raise_flag      BOOLEAN DEFAULT FALSE
   );

   /**
   * Drop an object
   *
   * @param p_vc_object_type   Object type
   * @param p_vc_object_name   Object name
   * @param p_b_raise_flag     Raise exception if object don't exists
   */
   PROCEDURE prc_drop_object (
      p_vc_object_type    VARCHAR2
    , p_vc_object_name    VARCHAR2
    , p_b_raise_flag      BOOLEAN DEFAULT FALSE
   );

   /**
   * Create a synonym for a given object
   *
   * @param p_vc_object_name   Object name
   * @param p_vc_synonym_name  Synonym name
   * @param p_b_public         Crete public synonym if true
   * @param p_b_drop_flag      Drop existing synonym if true
   * @param p_b_raise_flag     Raise exception if error occurs
   */
   PROCEDURE prc_create_synonym (
      p_vc_object_name     VARCHAR2
    , p_vc_synonym_name    VARCHAR2
    , p_b_public           BOOLEAN DEFAULT FALSE
    , p_b_drop_flag        BOOLEAN DEFAULT FALSE
    , p_b_raise_flag       BOOLEAN DEFAULT FALSE
   );

   /**
   * Create an object
   *
   * @param p_vc_object_type   Object type
   * @param p_vc_object_name   Object name
   * @param p_vc_object_ddl    Object creation ddl
   * @param p_b_drop_flag      Drop existing synonym if true
   * @param p_b_raise_flag     Raise exception if error occurs
   */
   PROCEDURE prc_create_object (
      p_vc_object_type    VARCHAR2
    , p_vc_object_name    VARCHAR2
    , p_vc_object_ddl     CLOB
    , p_b_drop_flag       BOOLEAN DEFAULT FALSE
    , p_b_raise_flag      BOOLEAN DEFAULT FALSE
   );

   /**
   * Create entity related objects
   *
   * @param p_vc_entity_name       Entity name
   * @param p_vc_entity_fields     Entity column definitions
   * @param p_vc_create_mode       Entity creation mode ('DROP','DEFAULT')
   * @param p_b_public_flag        Create public synonym if true
   * @param p_b_migrate_flag       Migrate content in the newly created table
   * @param p_b_cdc_flag           Create cdc table and triggers
   */
   PROCEDURE prc_create_entity (
      p_vc_entity_prefix    VARCHAR2
    , p_vc_entity_name      VARCHAR2
    , p_vc_entity_fields    VARCHAR2
    , p_vc_create_mode      VARCHAR2 DEFAULT 'DEFAULT'
    , p_b_public_flag       BOOLEAN DEFAULT FALSE
    , p_b_migrate_flag      BOOLEAN DEFAULT FALSE
    , p_b_cdc_flag          BOOLEAN DEFAULT FALSE
   );
END p#frm#ddls;