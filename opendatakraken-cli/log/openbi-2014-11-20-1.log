2014-11-20 16:37:50.270 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE dwhutl_docu_param
   AUTHID CURRENT_USER
AS
   /**
   * Package containing general purpose functions and procedures
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version     CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url         CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version              VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                  VARCHAR2 (1024);

   /**
   * String type
   */
   SUBTYPE t_string IS VARCHAR2 (32767);

   /**
   * Javascript for dynamic effects
   */
   c_js_default                t_string
                                  :=    '<script type="text/javascript">
function changeRowDisplay(nodeIdPath) {

  nLevelParent = nodeIdPath.split("_").length;
  arrRows = document.getElementsByTagName("tr");
  for ( i = 0; i < arrRows.length; i++ ) {
    nLevelNode = arrRows[i].id.split("_").length;
    if (arrRows[i].id.substring(0,nodeIdPath.length) == nodeIdPath) {
      if (arrRows[i].style.display=="none" '
                                     || CHR (38)
                                     || CHR (38)
                                     || ' nLevelNode == nLevelParent + 1){
        arrRows[i].style.display="block";
        document.getElementById(nodeIdPath+ "_control").innerHTML = "-";
      }
      else if (arrRows[i].style.display=="block" '
                                     || CHR (38)
                                     || CHR (38)
                                     || ' nLevelNode > nLevelParent){
        arrRows[i].style.display="none";
        document.getElementById(nodeIdPath+ "_control").innerHTML = "+";
        if (document.getElementById(arrRows[i].id + "_control")) {
          document.getElementById(arrRows[i].id + "_control").innerHTML = "+";
        }
      }
    }
  }
}
</script>';
   /**
    * CSS
    */
   c_css_default               t_string := '<style>
body {
  background-color: rgb(239, 239, 239);
}
table {
  border-style: solid;
  border-left-width: 1px;
  border-top-width: 1px;
  border-right-width: 0px;
  border-bottom-width: 0px;
  border-color: rgb(8, 36, 107);
}
th {
  border-style: solid;
  border-left-width: 0px;
  border-top-width: 0px;
  border-right-width: 1px;
  border-bottom-width: 1px;
  background-color: rgb(243, 184, 123);
  text-align: left;
}
td {
  border-style: solid;
  border-left-width: 0px;
  border-top-width: 0px;
  border-right-width: 1px;
  border-bottom-width: 1px;
  background-color: rgb(214, 223, 247);
  text-align: justify;
}
h1 {
  font-family: arial;
  color: rgb(0, 0, 102);
  margin: 0px;
}
h2 {
  font-family: arial;
  color: rgb(0, 0, 102);
  margin: 0px;
}
h3 {
  font-family: arial;
  color: rgb(0, 0, 102);
  margin: 0px;
}
p {
  font-family: arial;
  color: rgb(0, 0, 102);
  margin: 0px;
}
p.number {
  text-align: right;
}
a.control {
  background-color: rgb(255, 255, 255);
  border-style: solid;
  border-width: 1px;
  border-color: rgb(8, 36, 107);
  text-align: center;
  width: 10px;
}
</style>';
   /**
    * HTML Email Template
    */
   c_html_template_content     CLOB := '<html>
<head>
<title>Oracle Email</title>
<htmlScript />
<htmlStyle />
</head>
<body>
<htmlContent />
</body>
</html>';
   /**
    * Excel Attachment Template
    */
   c_excel_template_content    CLOB := '<?xml version="1.0"?>
<Workbook
	xmlns="urn:schemas-microsoft-com:office:spreadsheet"
	xmlns:o="urn:schemas-microsoft-com:office:office"
	xmlns:x="urn:schemas-microsoft-com:office:excel"
	xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"
	xmlns:html="http://www.w3.org/TR/REC-html40"
>
<workbookContent />
</Workbook>';
   /**
    * HTML Table stylesheet
    */
   c_xsl_html_table_default    t_string := '<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:data="http://java.sun.com/xml/ns/jdbc">
<xsl:param name="sort_column" />
<xsl:param name="sort_order" />
<xsl:template match="data:webRowSet">
    <table cellspacing="0" cellpadding="2">
    <tr>
    <xsl:for-each select="data:metadata/data:column-definition">
        <th>
        <xsl:attribute name="id">column<xsl:value-of select="position()" /></xsl:attribute>
        <p><xsl:value-of select="data:column-label" /></p>
        </th>
    </xsl:for-each>
    </tr>
    <xsl:for-each select="data:data/data:currentRow">
        <tr>
        <xsl:for-each select="data:columnValue">
            <td>
            <xsl:choose>
                <xsl:when test="string-length()=0">
                    <p>-</p>
                </xsl:when>
                <xsl:otherwise>
                    <p>
    			    <xsl:variable name="cell_value"><xsl:value-of select="." /></xsl:variable>
        			<xsl:choose>
        			  <xsl:when test="number($cell_value)">
        			    <xsl:attribute name="class">number</xsl:attribute>
      				  </xsl:when>
        			</xsl:choose>
                    <xsl:value-of select="." />
                    </p>
                </xsl:otherwise>
            </xsl:choose>                    
            </td>
        </xsl:for-each>
        </tr>
    </xsl:for-each>
    </table>
</xsl:template>
</xsl:stylesheet>';
   /**
    * Excel Table stylesheet
    */
   c_xsl_excel_table_default   t_string := '<xsl:stylesheet version="1.0"
	xmlns="urn:schemas-microsoft-com:office:spreadsheet"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
	xmlns:msxsl="urn:schemas-microsoft-com:xslt"
	xmlns:user="urn:my-scripts"
	xmlns:o="urn:schemas-microsoft-com:office:office"
	xmlns:x="urn:schemas-microsoft-com:office:excel"
	xmlns:ss="urn:schemas-microsoft-com:office:spreadsheet"
	xmlns:data="http://java.sun.com/xml/ns/jdbc"
>
<xsl:template match="data:webRowSet">
	<Worksheet>
        <xsl:attribute name="ss:Name"><worksheetName /></xsl:attribute>
    <Table>
	<Row>
	<xsl:for-each select="data:metadata/data:column-definition">
		<Cell><Data ss:Type="String"><xsl:value-of select="data:column-label" /></Data></Cell>
	</xsl:for-each>
	</Row>
	<xsl:for-each select="data:data/data:currentRow">
		<Row>
		<xsl:for-each select="data:columnValue">
            <Cell>
			<Data>
    		<xsl:variable name="cell_value"><xsl:value-of select="." /></xsl:variable>
        		<xsl:choose>
        		    <xsl:when test="number($cell_value)">
        		        <xsl:attribute name="ss:Type">Number</xsl:attribute>
      			    </xsl:when>
                    <xsl:otherwise>
        		        <xsl:attribute name="ss:Type">String</xsl:attribute>
                    </xsl:otherwise>
        		</xsl:choose>
            <xsl:value-of select="." />
            </Data>
            </Cell>
		</xsl:for-each>
		</Row>
	</xsl:for-each>
	</Table>
	</Worksheet>
</xsl:template>
</xsl:stylesheet>';
END dwhutl_docu_param;
2014-11-20 16:37:50.284 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/docu_param/docu_param-def.sql executed
2014-11-20 16:37:50.284 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/docu/docu-def.sql delimiter 
2014-11-20 16:37:50.285 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE p#frm#docu
   AUTHID CURRENT_USER
AS
   /**
   * Package containing general purpose functions and procedures
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   /**
   * Get stylesheet
   *
   * p_vc_stylesheet_type       Type of stylesheet
   */
   FUNCTION fct_get_stylesheet (p_vc_stylesheet_type VARCHAR2)
      RETURN CLOB;

   /**
   * Generate metadata item
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_meta_item (p_vc_content VARCHAR2)
      RETURN CLOB;

   /**
   * Generate metadata part of the data set
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_meta (p_vc_content CLOB)
      RETURN CLOB;

   /**
   * Generate a data cell
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_data_cell (p_vc_content VARCHAR2)
      RETURN CLOB;

   /**
   * Generate data record
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_data_record (p_vc_content CLOB)
      RETURN CLOB;

   /**
   * Generate data part of the data set
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_data (p_vc_content CLOB)
      RETURN CLOB;

   /**
   * Generate complete dataset
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_dataset (p_vc_content CLOB)
      RETURN CLOB;

   /**
   * Format dataset using a dataset and a style
   *
   * p_vc_content       Content to be transformed
   * p_vc_stylesheet    Stylesheet to transform the dataset in different output
   */
   FUNCTION fct_get_dataset_formatted (
      p_vc_dataset       CLOB
    , p_vc_stylesheet    CLOB
   )
      RETURN CLOB;

   /**
   * Generate report of given type from a document
   *
   * p_vc_document      Document to be put in the type template
   * p_vc_type          Type (html, excel)
   */
   FUNCTION fct_get_document (
      p_vc_content    CLOB
    , p_vc_type       CLOB
   )
      RETURN CLOB;

   /**
   * Get a report about the content of a given table in the wished format
   *
   * @param p_vc_table_name       Table name
   * @param p_vc_column_list      Column lists
   * @param p_vc_where_clause     Where clause
   * @param p_vc_report_format    Output format
   * @return                      Report object (table) in the chosen format
   */
   FUNCTION fct_get_table_dataset (
      p_vc_table_owner    IN VARCHAR2
    , p_vc_table_name     IN VARCHAR2
    , p_vc_column_list    IN VARCHAR2 DEFAULT NULL
    , p_vc_where_clause   IN VARCHAR2 DEFAULT NULL
    , p_vc_order_clause   IN VARCHAR2 DEFAULT NULL
   )
      RETURN CLOB;

   /**
   * Save a document in the aux_DOC table
   *
   * @param p_vc_docu_code      Document code
   * @param p_vc_docu_type      Document type
   * @param p_vc_docu_content   Document content
   * @param p_vc_docu_url      Document URL
   * @param p_vc_docu_desc      Document description
   */
   PROCEDURE prc_save_document (
      p_vc_docu_code      IN VARCHAR2
    , p_vc_docu_type      IN VARCHAR2
    , p_vc_docu_content   IN CLOB
    , p_vc_docu_url       IN VARCHAR2 DEFAULT NULL
    , p_vc_docu_desc      IN VARCHAR2 DEFAULT NULL
   );
END p#frm#docu;
2014-11-20 16:37:50.285 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE dwhutl_docu
   AUTHID CURRENT_USER
AS
   /**
   * Package containing general purpose functions and procedures
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   /**
   * Get stylesheet
   *
   * p_vc_stylesheet_type       Type of stylesheet
   */
   FUNCTION fct_get_stylesheet (p_vc_stylesheet_type VARCHAR2)
      RETURN CLOB;

   /**
   * Generate metadata item
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_meta_item (p_vc_content VARCHAR2)
      RETURN CLOB;

   /**
   * Generate metadata part of the data set
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_meta (p_vc_content CLOB)
      RETURN CLOB;

   /**
   * Generate a data cell
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_data_cell (p_vc_content VARCHAR2)
      RETURN CLOB;

   /**
   * Generate data record
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_data_record (p_vc_content CLOB)
      RETURN CLOB;

   /**
   * Generate data part of the data set
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_data (p_vc_content CLOB)
      RETURN CLOB;

   /**
   * Generate complete dataset
   *
   * p_vc_content       Content to be transformed
   */
   FUNCTION fct_get_dataset (p_vc_content CLOB)
      RETURN CLOB;

   /**
   * Format dataset using a dataset and a style
   *
   * p_vc_content       Content to be transformed
   * p_vc_stylesheet    Stylesheet to transform the dataset in different output
   */
   FUNCTION fct_get_dataset_formatted (
      p_vc_dataset       CLOB
    , p_vc_stylesheet    CLOB
   )
      RETURN CLOB;

   /**
   * Generate report of given type from a document
   *
   * p_vc_document      Document to be put in the type template
   * p_vc_type          Type (html, excel)
   */
   FUNCTION fct_get_document (
      p_vc_content    CLOB
    , p_vc_type       CLOB
   )
      RETURN CLOB;

   /**
   * Get a report about the content of a given table in the wished format
   *
   * @param p_vc_table_name       Table name
   * @param p_vc_column_list      Column lists
   * @param p_vc_where_clause     Where clause
   * @param p_vc_report_format    Output format
   * @return                      Report object (table) in the chosen format
   */
   FUNCTION fct_get_table_dataset (
      p_vc_table_owner    IN VARCHAR2
    , p_vc_table_name     IN VARCHAR2
    , p_vc_column_list    IN VARCHAR2 DEFAULT NULL
    , p_vc_where_clause   IN VARCHAR2 DEFAULT NULL
    , p_vc_order_clause   IN VARCHAR2 DEFAULT NULL
   )
      RETURN CLOB;

   /**
   * Save a document in the aux_DOC table
   *
   * @param p_vc_docu_code      Document code
   * @param p_vc_docu_type      Document type
   * @param p_vc_docu_content   Document content
   * @param p_vc_docu_url      Document URL
   * @param p_vc_docu_desc      Document description
   */
   PROCEDURE prc_save_document (
      p_vc_docu_code      IN VARCHAR2
    , p_vc_docu_type      IN VARCHAR2
    , p_vc_docu_content   IN CLOB
    , p_vc_docu_url       IN VARCHAR2 DEFAULT NULL
    , p_vc_docu_desc      IN VARCHAR2 DEFAULT NULL
   );
END dwhutl_docu;
2014-11-20 16:37:50.293 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/docu/docu-def.sql executed
2014-11-20 16:37:50.294 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/docu/docu-impl.sql delimiter 
2014-11-20 16:37:50.295 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE BODY p#frm#docu
IS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   TYPE l_line_array IS TABLE OF VARCHAR2 (4000)
      INDEX BY PLS_INTEGER;

   PROCEDURE prc_set_text_param (
      p_vc_code_string   IN OUT CLOB
    , p_vc_param_name    IN     VARCHAR2
    , p_vc_param_value   IN     CLOB
   )
   IS
      l_vc_prc_name        VARCHAR2(50) := 'PRC_SET_CODE_PARAM';
      l_vc_buffer_in       CLOB;
      l_vc_buffer_out      CLOB;
      l_vc_token           CLOB;
      l_i_position_begin   NUMBER;
      l_i_position_end     NUMBER;
   BEGIN
      l_vc_buffer_in := p_vc_code_string;
      l_i_position_begin :=
           INSTR (
              l_vc_buffer_in
            ,    '<'
              || p_vc_param_name
              || ' />'
           )
         - 1;
      l_i_position_end :=
           INSTR (
              l_vc_buffer_in
            ,    '<'
              || p_vc_param_name
              || ' />'
           )
         + LENGTH (p_vc_param_name)
         + 4;

      -- Loop on occurencies of the parameter into the root code
      WHILE l_i_position_begin > 0 LOOP
         l_vc_token :=
            SUBSTR (
               l_vc_buffer_in
             , 1
             , l_i_position_begin
            );
         l_vc_buffer_out :=
               l_vc_buffer_out
            || l_vc_token;
         l_vc_buffer_out :=
               l_vc_buffer_out
            || p_vc_param_value;
         l_vc_buffer_in :=
            SUBSTR (
               l_vc_buffer_in
             , l_i_position_end
            );
         l_i_position_begin :=
              INSTR (
                 l_vc_buffer_in
               ,    '<'
                 || p_vc_param_name
                 || ' />'
              )
            - 1;
         l_i_position_end :=
              INSTR (
                 l_vc_buffer_in
               ,    '<'
                 || p_vc_param_name
                 || ' />'
              )
            + LENGTH (p_vc_param_name)
            + 4;
      END LOOP;

      -- Append the rest token
      l_vc_buffer_out :=
            l_vc_buffer_out
         || l_vc_buffer_in;
      p_vc_code_string := l_vc_buffer_out;
   EXCEPTION
      WHEN OTHERS THEN
         RAISE;
   END prc_set_text_param;

   FUNCTION fct_get_stylesheet (p_vc_stylesheet_type VARCHAR2)
      RETURN CLOB
   IS
   BEGIN
      IF p_vc_stylesheet_type = 'HTML' THEN
         RETURN p#frm#docu_param.c_xsl_html_table_default;
      ELSIF p_vc_stylesheet_type = 'HTML' THEN
         RETURN p#frm#docu_param.c_xsl_excel_table_default;
      ELSE
         RETURN NULL;
      END IF;
   END fct_get_stylesheet;

   FUNCTION fct_get_meta_item (p_vc_content VARCHAR2)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<column-definition><column-label>'
             || p_vc_content
             || '</column-label></column-definition>';
   END fct_get_meta_item;

   FUNCTION fct_get_meta (p_vc_content CLOB)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<metadata>'
             || p_vc_content
             || '</metadata>';
   END fct_get_meta;

   FUNCTION fct_get_data_cell (p_vc_content VARCHAR2)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<columnValue>'
             || p_vc_content
             || '</columnValue>';
   END fct_get_data_cell;

   /**
   * Generate a record
   */
   FUNCTION fct_get_data_record (p_vc_content CLOB)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<currentRow>'
             || p_vc_content
             || '</currentRow>';
   END fct_get_data_record;

   FUNCTION fct_get_data (p_vc_content CLOB)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<data>'
             || p_vc_content
             || '</data>';
   END fct_get_data;

   FUNCTION fct_get_data (p_l_content l_line_array)
      RETURN CLOB
   IS
      l_vc_content   CLOB;
   BEGIN
      IF p_l_content.FIRST IS NOT NULL THEN
         FOR i IN p_l_content.FIRST .. p_l_content.LAST LOOP
            l_vc_content :=
                  l_vc_content
               || p_l_content (i);
         END LOOP;
      END IF;

      RETURN    '<data>'
             || l_vc_content
             || '</data>';
   END fct_get_data;

   FUNCTION fct_get_dataset (p_vc_content CLOB)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<?xml version="1.0" ?>'
             || '<webRowSet xmlns="http://java.sun.com/xml/ns/jdbc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/jdbc http://java.sun.com/xml/ns/jdbc/webrowset.xsd">'
             || p_vc_content
             || '</webRowSet>';
   END fct_get_dataset;

   FUNCTION fct_get_dataset_formatted (
      p_vc_dataset       CLOB
    , p_vc_stylesheet    CLOB
   )
      RETURN CLOB
   IS
      l_vc_document   CLOB;
   BEGIN
      SELECT XMLTRANSFORM (
                xmltype (p_vc_dataset)
              , xmltype (p_vc_stylesheet)
             ).getclobval ()
        INTO l_vc_document
        FROM DUAL;

      l_vc_document :=
         REPLACE (
            l_vc_document
          , '><'
          ,    '>'
            || CHR (10)
            || '<'
         );
      RETURN l_vc_document;
   END fct_get_dataset_formatted;

   FUNCTION fct_get_document (
      p_vc_content    CLOB
    , p_vc_type       CLOB
   )
      RETURN CLOB
   IS
      l_clob_document   CLOB;
   BEGIN
      CASE p_vc_type
         WHEN 'html' THEN
            l_clob_document := p#frm#docu_param.c_html_template_content;
            prc_set_text_param (
               l_clob_document
             , 'htmlScript'
             , p#frm#docu_param.c_js_default
            );
            prc_set_text_param (
               l_clob_document
             , 'htmlStyle'
             , p#frm#docu_param.c_css_default
            );
            prc_set_text_param (
               l_clob_document
             , 'htmlContent'
             , p_vc_content
            );
         WHEN 'ms-excel' THEN
            l_clob_document := p#frm#docu_param.c_excel_template_content;
            prc_set_text_param (
               l_clob_document
             , 'workbookContent'
             , p_vc_content
            );
      END CASE;

      RETURN l_clob_document;
   END fct_get_document;

   FUNCTION fct_get_table_dataset (
      p_vc_table_owner    IN VARCHAR2
    , p_vc_table_name     IN VARCHAR2
    , p_vc_column_list    IN VARCHAR2 DEFAULT NULL
    , p_vc_where_clause   IN VARCHAR2 DEFAULT NULL
    , p_vc_order_clause   IN VARCHAR2 DEFAULT NULL
   )
      RETURN CLOB
   IS
      l_l_columns        DBMS_SQL.varchar2s;
      l_l_records        l_line_array;
      l_vc_column_list   VARCHAR2 (32000);
      l_vc_sql           VARCHAR2 (32000);
      l_xml_meta         CLOB;
      l_xml_data         CLOB;
      l_clob_report      CLOB;
   BEGIN
      -- Generate the metadata section of the webrowset
      IF p_vc_column_list IS NULL THEN
           SELECT fct_get_meta_item (column_name)
             BULK COLLECT INTO l_l_columns
             FROM all_tab_columns
            WHERE owner = UPPER (p_vc_table_owner)
              AND table_name = UPPER (p_vc_table_name)
         ORDER BY column_id;

         l_vc_column_list := p#frm#type.fct_list_to_string (l_l_columns);
      ELSE
         l_l_columns :=
            p#frm#type.fct_string_to_list (
               p_vc_column_list
             , ','
            );

         FOR i IN l_l_columns.FIRST .. l_l_columns.LAST LOOP
            l_vc_column_list :=
                  l_vc_column_list
               || fct_get_meta_item (l_l_columns (i));
         END LOOP;
      END IF;

      l_xml_meta := fct_get_meta (l_vc_column_list);
      -- Generate the data section of the webrowset
      l_vc_column_list := NULL;

      IF p_vc_column_list IS NULL THEN
           SELECT    '|| doc.fct_get_data_cell ("'
                  || column_name
                  || '")'
             BULK COLLECT INTO l_l_columns
             FROM all_tab_columns
            WHERE owner = UPPER (p_vc_table_owner)
              AND table_name = UPPER (p_vc_table_name)
         ORDER BY column_id;

         l_vc_column_list :=
            LTRIM (
               p#frm#type.fct_list_to_string (l_l_columns)
             , ' ||'
            );
      ELSE
         l_l_columns :=
            p#frm#type.fct_string_to_list (
               p_vc_column_list
             , ','
            );

         FOR i IN l_l_columns.FIRST .. l_l_columns.LAST LOOP
            l_vc_column_list :=
                  l_vc_column_list
               || CASE
                     WHEN i > 1 THEN
                        ' || '
                  END
               || 'doc.fct_get_data_cell ('
               || l_l_columns (i)
               || ')';
         END LOOP;
      END IF;

      l_vc_sql :=
            'SELECT doc.fct_get_data_record ('
         || l_vc_column_list
         || ') FROM '
         || p_vc_table_name
         || CASE
               WHEN p_vc_where_clause IS NULL THEN
                  NULL
               ELSE
                     ' WHERE '
                  || p_vc_where_clause
            END
         || CASE
               WHEN p_vc_order_clause IS NULL THEN
                  NULL
               ELSE
                     ' ORDER BY '
                  || p_vc_order_clause
            END;

      EXECUTE IMMEDIATE l_vc_sql BULK COLLECT INTO l_l_records;

      l_xml_data := fct_get_data (l_l_records);
      -- Return the complete dataset in from of a webrowset
      RETURN fct_get_dataset (   l_xml_meta
                              || l_xml_data);
   END fct_get_table_dataset;

   PROCEDURE prc_save_document (
      p_vc_docu_code      IN VARCHAR2
    , p_vc_docu_type      IN VARCHAR2
    , p_vc_docu_content   IN CLOB
    , p_vc_docu_url       IN VARCHAR2 DEFAULT NULL
    , p_vc_docu_desc      IN VARCHAR2 DEFAULT NULL
   )
   IS
   BEGIN
      DELETE p#frm#docu_t
       WHERE docu_code = p_vc_docu_code
         AND docu_type = p_vc_docu_type;

      INSERT INTO p#frm#docu_t (
                     docu_code
                   , docu_type
                   , docu_content
                   , docu_url
                   , docu_desc
                  )
           VALUES (
                     p_vc_docu_code
                   , p_vc_docu_type
                   , p_vc_docu_content
                   , p_vc_docu_url
                   , p_vc_docu_desc
                  );

      COMMIT;
   END prc_save_document;
/**
* Package initialization
*/
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END p#frm#docu;
2014-11-20 16:37:50.295 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE BODY dwhutl_docu
IS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   TYPE l_line_array IS TABLE OF VARCHAR2 (4000)
      INDEX BY PLS_INTEGER;

   PROCEDURE prc_set_text_param (
      p_vc_code_string   IN OUT CLOB
    , p_vc_param_name    IN     VARCHAR2
    , p_vc_param_value   IN     CLOB
   )
   IS
      l_vc_prc_name        VARCHAR2(50) := 'PRC_SET_CODE_PARAM';
      l_vc_buffer_in       CLOB;
      l_vc_buffer_out      CLOB;
      l_vc_token           CLOB;
      l_i_position_begin   NUMBER;
      l_i_position_end     NUMBER;
   BEGIN
      l_vc_buffer_in := p_vc_code_string;
      l_i_position_begin :=
           INSTR (
              l_vc_buffer_in
            ,    '<'
              || p_vc_param_name
              || ' />'
           )
         - 1;
      l_i_position_end :=
           INSTR (
              l_vc_buffer_in
            ,    '<'
              || p_vc_param_name
              || ' />'
           )
         + LENGTH (p_vc_param_name)
         + 4;

      -- Loop on occurencies of the parameter into the root code
      WHILE l_i_position_begin > 0 LOOP
         l_vc_token :=
            SUBSTR (
               l_vc_buffer_in
             , 1
             , l_i_position_begin
            );
         l_vc_buffer_out :=
               l_vc_buffer_out
            || l_vc_token;
         l_vc_buffer_out :=
               l_vc_buffer_out
            || p_vc_param_value;
         l_vc_buffer_in :=
            SUBSTR (
               l_vc_buffer_in
             , l_i_position_end
            );
         l_i_position_begin :=
              INSTR (
                 l_vc_buffer_in
               ,    '<'
                 || p_vc_param_name
                 || ' />'
              )
            - 1;
         l_i_position_end :=
              INSTR (
                 l_vc_buffer_in
               ,    '<'
                 || p_vc_param_name
                 || ' />'
              )
            + LENGTH (p_vc_param_name)
            + 4;
      END LOOP;

      -- Append the rest token
      l_vc_buffer_out :=
            l_vc_buffer_out
         || l_vc_buffer_in;
      p_vc_code_string := l_vc_buffer_out;
   EXCEPTION
      WHEN OTHERS THEN
         RAISE;
   END prc_set_text_param;

   FUNCTION fct_get_stylesheet (p_vc_stylesheet_type VARCHAR2)
      RETURN CLOB
   IS
   BEGIN
      IF p_vc_stylesheet_type = 'HTML' THEN
         RETURN dwhutl_docu_param.c_xsl_html_table_default;
      ELSIF p_vc_stylesheet_type = 'HTML' THEN
         RETURN dwhutl_docu_param.c_xsl_excel_table_default;
      ELSE
         RETURN NULL;
      END IF;
   END fct_get_stylesheet;

   FUNCTION fct_get_meta_item (p_vc_content VARCHAR2)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<column-definition><column-label>'
             || p_vc_content
             || '</column-label></column-definition>';
   END fct_get_meta_item;

   FUNCTION fct_get_meta (p_vc_content CLOB)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<metadata>'
             || p_vc_content
             || '</metadata>';
   END fct_get_meta;

   FUNCTION fct_get_data_cell (p_vc_content VARCHAR2)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<columnValue>'
             || p_vc_content
             || '</columnValue>';
   END fct_get_data_cell;

   /**
   * Generate a record
   */
   FUNCTION fct_get_data_record (p_vc_content CLOB)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<currentRow>'
             || p_vc_content
             || '</currentRow>';
   END fct_get_data_record;

   FUNCTION fct_get_data (p_vc_content CLOB)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<data>'
             || p_vc_content
             || '</data>';
   END fct_get_data;

   FUNCTION fct_get_data (p_l_content l_line_array)
      RETURN CLOB
   IS
      l_vc_content   CLOB;
   BEGIN
      IF p_l_content.FIRST IS NOT NULL THEN
         FOR i IN p_l_content.FIRST .. p_l_content.LAST LOOP
            l_vc_content :=
                  l_vc_content
               || p_l_content (i);
         END LOOP;
      END IF;

      RETURN    '<data>'
             || l_vc_content
             || '</data>';
   END fct_get_data;

   FUNCTION fct_get_dataset (p_vc_content CLOB)
      RETURN CLOB
   IS
   BEGIN
      RETURN    '<?xml version="1.0" ?>'
             || '<webRowSet xmlns="http://java.sun.com/xml/ns/jdbc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/jdbc http://java.sun.com/xml/ns/jdbc/webrowset.xsd">'
             || p_vc_content
             || '</webRowSet>';
   END fct_get_dataset;

   FUNCTION fct_get_dataset_formatted (
      p_vc_dataset       CLOB
    , p_vc_stylesheet    CLOB
   )
      RETURN CLOB
   IS
      l_vc_document   CLOB;
   BEGIN
      SELECT XMLTRANSFORM (
                xmltype (p_vc_dataset)
              , xmltype (p_vc_stylesheet)
             ).getclobval ()
        INTO l_vc_document
        FROM DUAL;

      l_vc_document :=
         REPLACE (
            l_vc_document
          , '><'
          ,    '>'
            || CHR (10)
            || '<'
         );
      RETURN l_vc_document;
   END fct_get_dataset_formatted;

   FUNCTION fct_get_document (
      p_vc_content    CLOB
    , p_vc_type       CLOB
   )
      RETURN CLOB
   IS
      l_clob_document   CLOB;
   BEGIN
      CASE p_vc_type
         WHEN 'html' THEN
            l_clob_document := dwhutl_docu_param.c_html_template_content;
            prc_set_text_param (
               l_clob_document
             , 'htmlScript'
             , dwhutl_docu_param.c_js_default
            );
            prc_set_text_param (
               l_clob_document
             , 'htmlStyle'
             , dwhutl_docu_param.c_css_default
            );
            prc_set_text_param (
               l_clob_document
             , 'htmlContent'
             , p_vc_content
            );
         WHEN 'ms-excel' THEN
            l_clob_document := dwhutl_docu_param.c_excel_template_content;
            prc_set_text_param (
               l_clob_document
             , 'workbookContent'
             , p_vc_content
            );
      END CASE;

      RETURN l_clob_document;
   END fct_get_document;

   FUNCTION fct_get_table_dataset (
      p_vc_table_owner    IN VARCHAR2
    , p_vc_table_name     IN VARCHAR2
    , p_vc_column_list    IN VARCHAR2 DEFAULT NULL
    , p_vc_where_clause   IN VARCHAR2 DEFAULT NULL
    , p_vc_order_clause   IN VARCHAR2 DEFAULT NULL
   )
      RETURN CLOB
   IS
      l_l_columns        DBMS_SQL.varchar2s;
      l_l_records        l_line_array;
      l_vc_column_list   VARCHAR2 (32000);
      l_vc_sql           VARCHAR2 (32000);
      l_xml_meta         CLOB;
      l_xml_data         CLOB;
      l_clob_report      CLOB;
   BEGIN
      -- Generate the metadata section of the webrowset
      IF p_vc_column_list IS NULL THEN
           SELECT fct_get_meta_item (column_name)
             BULK COLLECT INTO l_l_columns
             FROM all_tab_columns
            WHERE owner = UPPER (p_vc_table_owner)
              AND table_name = UPPER (p_vc_table_name)
         ORDER BY column_id;

         l_vc_column_list := dwhutl_type.fct_list_to_string (l_l_columns);
      ELSE
         l_l_columns :=
            dwhutl_type.fct_string_to_list (
               p_vc_column_list
             , ','
            );

         FOR i IN l_l_columns.FIRST .. l_l_columns.LAST LOOP
            l_vc_column_list :=
                  l_vc_column_list
               || fct_get_meta_item (l_l_columns (i));
         END LOOP;
      END IF;

      l_xml_meta := fct_get_meta (l_vc_column_list);
      -- Generate the data section of the webrowset
      l_vc_column_list := NULL;

      IF p_vc_column_list IS NULL THEN
           SELECT    '|| doc.fct_get_data_cell ("'
                  || column_name
                  || '")'
             BULK COLLECT INTO l_l_columns
             FROM all_tab_columns
            WHERE owner = UPPER (p_vc_table_owner)
              AND table_name = UPPER (p_vc_table_name)
         ORDER BY column_id;

         l_vc_column_list :=
            LTRIM (
               dwhutl_type.fct_list_to_string (l_l_columns)
             , ' ||'
            );
      ELSE
         l_l_columns :=
            dwhutl_type.fct_string_to_list (
               p_vc_column_list
             , ','
            );

         FOR i IN l_l_columns.FIRST .. l_l_columns.LAST LOOP
            l_vc_column_list :=
                  l_vc_column_list
               || CASE
                     WHEN i > 1 THEN
                        ' || '
                  END
               || 'doc.fct_get_data_cell ('
               || l_l_columns (i)
               || ')';
         END LOOP;
      END IF;

      l_vc_sql :=
            'SELECT doc.fct_get_data_record ('
         || l_vc_column_list
         || ') FROM '
         || p_vc_table_name
         || CASE
               WHEN p_vc_where_clause IS NULL THEN
                  NULL
               ELSE
                     ' WHERE '
                  || p_vc_where_clause
            END
         || CASE
               WHEN p_vc_order_clause IS NULL THEN
                  NULL
               ELSE
                     ' ORDER BY '
                  || p_vc_order_clause
            END;

      EXECUTE IMMEDIATE l_vc_sql BULK COLLECT INTO l_l_records;

      l_xml_data := fct_get_data (l_l_records);
      -- Return the complete dataset in from of a webrowset
      RETURN fct_get_dataset (   l_xml_meta
                              || l_xml_data);
   END fct_get_table_dataset;

   PROCEDURE prc_save_document (
      p_vc_docu_code      IN VARCHAR2
    , p_vc_docu_type      IN VARCHAR2
    , p_vc_docu_content   IN CLOB
    , p_vc_docu_url       IN VARCHAR2 DEFAULT NULL
    , p_vc_docu_desc      IN VARCHAR2 DEFAULT NULL
   )
   IS
   BEGIN
      DELETE dwhutl_docu_t
       WHERE docu_code = p_vc_docu_code
         AND docu_type = p_vc_docu_type;

      INSERT INTO dwhutl_docu_t (
                     docu_code
                   , docu_type
                   , docu_content
                   , docu_url
                   , docu_desc
                  )
           VALUES (
                     p_vc_docu_code
                   , p_vc_docu_type
                   , p_vc_docu_content
                   , p_vc_docu_url
                   , p_vc_docu_desc
                  );

      COMMIT;
   END prc_save_document;
/**
* Package initialization
*/
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END dwhutl_docu;
2014-11-20 16:37:50.448 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/docu/docu-impl.sql executed
2014-11-20 16:37:50.448 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/mesr/mesr-def.sql delimiter 
2014-11-20 16:37:50.449 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE p#frm#mesr
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   PROCEDURE prc_mesr_taxn_ins (
      p_vc_query_code      IN VARCHAR2
    , p_vc_taxonomy_code   IN VARCHAR2
   );

   PROCEDURE prc_mesr_taxn_del (
      p_vc_query_code      IN VARCHAR2
    , p_vc_taxonomy_code   IN VARCHAR2
   );

   PROCEDURE prc_query_ins (
      p_vc_query_code   IN VARCHAR2
    , p_vc_query_name   IN VARCHAR2
    , p_vc_query_sql    IN CLOB
   );

   PROCEDURE prc_query_del (
      p_vc_query_code   IN VARCHAR2
    , p_b_cascade       IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_keyfigure_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_vc_keyfigure_name   IN VARCHAR2
   );

   PROCEDURE prc_keyfigure_del (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_b_cascade           IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_threshold_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_vc_threshold_type   IN VARCHAR2
    , p_n_threshold_min     IN NUMBER
    , p_n_threshold_max     IN NUMBER
    , p_d_threshold_from    IN DATE DEFAULT TO_DATE (
                                               '01011111'
                                             , 'ddmmyyyy'
                                            )
    , p_d_threshold_to      IN DATE DEFAULT TO_DATE (
                                               '09099999'
                                             , 'ddmmyyyy'
                                            )
   );

   PROCEDURE prc_exec_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_n_result_value      IN NUMBER
    , p_vc_result_report    IN CLOB
   );

   PROCEDURE prc_exec (
      p_vc_query_code          IN VARCHAR2 DEFAULT 'ALL'
    , p_b_exception_if_fails   IN BOOLEAN DEFAULT FALSE
    , p_vc_storage_type        IN VARCHAR2 DEFAULT 'VALUE'
   );

   PROCEDURE prc_exec_taxonomy (
      p_vc_taxonomy_code       IN VARCHAR2
    , p_b_exception_if_fails   IN BOOLEAN DEFAULT FALSE
    , p_vc_storage_type        IN VARCHAR2 DEFAULT 'VALUE'
   );
END p#frm#mesr;
2014-11-20 16:37:50.449 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE dwhutl_mesr
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   PROCEDURE prc_mesr_taxn_ins (
      p_vc_query_code      IN VARCHAR2
    , p_vc_taxonomy_code   IN VARCHAR2
   );

   PROCEDURE prc_mesr_taxn_del (
      p_vc_query_code      IN VARCHAR2
    , p_vc_taxonomy_code   IN VARCHAR2
   );

   PROCEDURE prc_query_ins (
      p_vc_query_code   IN VARCHAR2
    , p_vc_query_name   IN VARCHAR2
    , p_vc_query_sql    IN CLOB
   );

   PROCEDURE prc_query_del (
      p_vc_query_code   IN VARCHAR2
    , p_b_cascade       IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_keyfigure_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_vc_keyfigure_name   IN VARCHAR2
   );

   PROCEDURE prc_keyfigure_del (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_b_cascade           IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_threshold_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_vc_threshold_type   IN VARCHAR2
    , p_n_threshold_min     IN NUMBER
    , p_n_threshold_max     IN NUMBER
    , p_d_threshold_from    IN DATE DEFAULT TO_DATE (
                                               '01011111'
                                             , 'ddmmyyyy'
                                            )
    , p_d_threshold_to      IN DATE DEFAULT TO_DATE (
                                               '09099999'
                                             , 'ddmmyyyy'
                                            )
   );

   PROCEDURE prc_exec_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_n_result_value      IN NUMBER
    , p_vc_result_report    IN CLOB
   );

   PROCEDURE prc_exec (
      p_vc_query_code          IN VARCHAR2 DEFAULT 'ALL'
    , p_b_exception_if_fails   IN BOOLEAN DEFAULT FALSE
    , p_vc_storage_type        IN VARCHAR2 DEFAULT 'VALUE'
   );

   PROCEDURE prc_exec_taxonomy (
      p_vc_taxonomy_code       IN VARCHAR2
    , p_b_exception_if_fails   IN BOOLEAN DEFAULT FALSE
    , p_vc_storage_type        IN VARCHAR2 DEFAULT 'VALUE'
   );
END dwhutl_mesr;
2014-11-20 16:37:50.549 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/mesr/mesr-def.sql executed
2014-11-20 16:37:50.549 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/mesr/mesr-impl.sql delimiter 
2014-11-20 16:37:50.552 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE BODY p#frm#mesr
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * Key value type
   */
   TYPE r_keyvalue IS RECORD (
      keyfigure     VARCHAR2 (100)
    , resultvalue   NUMBER
   );

   TYPE t_keyvalue IS TABLE OF r_keyvalue;

   FUNCTION fct_exec_verify (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_n_exec_value        IN NUMBER
   )
      RETURN BOOLEAN
   IS
      l_vc_prc_name         t_object_name := 'FCT_EXEC_VERIFY';
      l_n_keyfigure_id      NUMBER;
      l_vc_threshold_type   CHAR (1);
      l_n_threshold_min     NUMBER;
      l_n_threshold_max     NUMBER;
      l_n_result_previous   NUMBER;
      l_n_increment         NUMBER;
      l_n_cnt               NUMBER := 0;
      l_b_success           BOOLEAN := TRUE;
   BEGIN
      SELECT MIN (k.mesr_keyfigure_id)
           , MIN (t.mesr_threshold_type)
           , MIN (t.mesr_threshold_min)
           , MAX (t.mesr_threshold_max)
        INTO l_n_keyfigure_id
           , l_vc_threshold_type
           , l_n_threshold_min
           , l_n_threshold_max
        FROM p#frm#mesr_query_t s
           , p#frm#mesr_keyfigure_t k
           , p#frm#mesr_threshold_t t
       WHERE s.mesr_query_id = k.mesr_query_id
         AND t.mesr_keyfigure_id = k.mesr_keyfigure_id
         AND s.mesr_query_code = p_vc_query_code
         AND k.mesr_keyfigure_code = p_vc_keyfigure_code
         AND t.mesr_threshold_from <= SYSDATE
         AND SYSDATE < t.mesr_threshold_to;

      p#frm#trac.log_sub_info (
            'Key figure '
         || p_vc_keyfigure_code
         || ' type '
         || l_vc_threshold_type
         || ' threshold = '
         || l_n_threshold_min
         || ' - '
         || l_n_threshold_max
       , 'VERIFYING'
      );

      IF l_vc_threshold_type = 'A' THEN
         IF l_n_threshold_min IS NOT NULL
        AND l_n_threshold_max IS NOT NULL
        AND p_n_exec_value NOT BETWEEN l_n_threshold_min AND l_n_threshold_max THEN
            l_b_success := FALSE;
            p#frm#trac.log_sub_info (
                  'Result '
               || p_n_exec_value
               || ' not ok'
             , 'RESULT NOT OK'
            );
         ELSE
            p#frm#trac.log_sub_info (
                  'Result '
               || p_n_exec_value
               || ' ok'
             , 'RESULT OK'
            );
         END IF;
      ELSIF l_vc_threshold_type = 'I' THEN
         SELECT COUNT (*)
           INTO l_n_cnt
           FROM p#frm#mesr_exec_t
          WHERE mesr_keyfigure_id = l_n_keyfigure_id;

         IF l_n_cnt > 0 THEN
            SELECT MAX (NVL (mesr_exec_result_value, 0))
              INTO l_n_result_previous
              FROM (SELECT mesr_exec_id
                         , mesr_exec_result_value
                         , MAX (mesr_exec_id) OVER (PARTITION BY mesr_keyfigure_id) AS mesr_exec_last
                      FROM p#frm#mesr_exec_t
                     WHERE mesr_keyfigure_id = l_n_keyfigure_id)
             WHERE mesr_exec_id = mesr_exec_last;

            p#frm#trac.log_sub_info (
                  'Previous result = '
               || l_n_result_previous
             , 'VERIFYING INCREMENT'
            );

            IF l_n_result_previous > 0 THEN
               l_n_increment :=
                    (  p_n_exec_value
                     - l_n_result_previous)
                  / l_n_result_previous;

               IF l_n_threshold_min IS NOT NULL
              AND l_n_threshold_max IS NOT NULL
              AND l_n_increment NOT BETWEEN l_n_threshold_min AND l_n_threshold_max THEN
                  l_b_success := FALSE;
                  p#frm#trac.log_sub_info (
                        'Increment '
                     || l_n_increment
                     || ' not ok'
                   , 'RESULT NOT OK'
                  );
               ELSE
                  p#frm#trac.log_sub_info (
                        'Increment '
                     || l_n_increment
                     || ' ok'
                   , 'RESULT OK'
                  );
               END IF;
            ELSE
               p#frm#trac.log_sub_info (
                     'Previous result = '
                  || l_n_result_previous
                , 'RESULT OK'
               );
            END IF;
         ELSE
            p#frm#trac.log_sub_info (
                  'Key figure '
               || p_vc_keyfigure_code
               || ' type '
               || l_vc_threshold_type
               || ' - no previous results available'
             , 'RESULT OK'
            );
         END IF;
      END IF;

      RETURN l_b_success;
   END fct_exec_verify;

   PROCEDURE prc_mesr_taxn_ins (
      p_vc_query_code      IN VARCHAR2
    , p_vc_taxonomy_code   IN VARCHAR2
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_mesr_TAXONOMY_INS';
   BEGIN
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Inserting in mesr_case_taxonomy_t'
      );

      MERGE INTO p#frm#mesr_taxn_t trg
           USING (SELECT mesr_query_id
                       , taxn_id
                    FROM p#frm#mesr_query_t c
                       , p#frm#taxn_t t
                   WHERE c.mesr_query_code = p_vc_query_code
                     AND t.taxn_code = p_vc_taxonomy_code) src
              ON (trg.mesr_query_id = src.mesr_query_id
              AND trg.taxn_id = src.taxn_id)
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.mesr_query_id
                     , trg.taxn_id
                    )
             VALUES (
                       src.mesr_query_id
                     , src.taxn_id
                    );

      p#frm#trac.log_sub_info (
         l_vc_prc_name
       ,    SQL%ROWCOUNT
         || ' rows merged'
      );
      COMMIT;
   END prc_mesr_taxn_ins;

   PROCEDURE prc_mesr_taxn_del (
      p_vc_query_code      IN VARCHAR2
    , p_vc_taxonomy_code   IN VARCHAR2
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_CASE_TAXONOMY_DEL';
   BEGIN
      p#frm#trac.log_sub_info (
         'Deleting in mesr_case_taxonomy_t'
       , l_vc_prc_name
      );

      DELETE p#frm#mesr_taxn_t
       WHERE mesr_query_id = (SELECT mesr_query_id
                                FROM p#frm#mesr_query_t
                               WHERE mesr_query_code = p_vc_query_code)
         AND taxn_id = (SELECT taxn_id
                          FROM p#frm#taxn_t
                         WHERE taxn_code = p_vc_taxonomy_code);

      p#frm#trac.log_sub_info (
         l_vc_prc_name
       ,    SQL%ROWCOUNT
         || ' rows deleted'
      );
      COMMIT;
   END prc_mesr_taxn_del;

   PROCEDURE prc_query_ins (
      p_vc_query_code   IN VARCHAR2
    , p_vc_query_name   IN VARCHAR2
    , p_vc_query_sql    IN CLOB
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_query_INS';
   BEGIN
      MERGE INTO p#frm#mesr_query_t trg
           USING (SELECT p_vc_query_code AS query_code
                       , p_vc_query_name AS query_name
                       , p_vc_query_sql AS query_sql
                    FROM DUAL) src
              ON (trg.mesr_query_code = src.query_code)
      WHEN MATCHED THEN
         UPDATE SET trg.mesr_query_name = NVL (src.query_name, trg.mesr_query_name)
                  , trg.mesr_query_sql = NVL (src.query_sql, trg.mesr_query_sql)
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.mesr_query_code
                     , trg.mesr_query_name
                     , trg.mesr_query_sql
                    )
             VALUES (
                       src.query_code
                     , src.query_name
                     , src.query_sql
                    );

      p#frm#trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows merged'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_query_ins;

   PROCEDURE prc_query_del (
      p_vc_query_code   IN VARCHAR2
    , p_b_cascade       IN BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_query_DEL';
      l_n_query_id    NUMBER;
      l_n_cnt         NUMBER;
   BEGIN
      -- Get the query id
      SELECT mesr_query_id
        INTO l_n_query_id
        FROM p#frm#mesr_query_t
       WHERE mesr_query_code = p_vc_query_code;

      IF NOT p_b_cascade THEN
         SELECT COUNT (*)
           INTO l_n_cnt
           FROM p#frm#mesr_keyfigure_t
          WHERE mesr_query_id = l_n_query_id;

         IF l_n_cnt > 0 THEN
            raise_application_error (
               -20001
             , 'Cannot delete query with key figures'
            );
         END IF;
      END IF;

      FOR r_key IN (SELECT mesr_keyfigure_code
                      FROM p#frm#mesr_keyfigure_t
                     WHERE mesr_query_id = l_n_query_id) LOOP
         prc_keyfigure_del (
            p_vc_query_code
          , r_key.mesr_keyfigure_code
          , p_b_cascade
         );
      END LOOP;

      DELETE p#frm#mesr_query_t
       WHERE mesr_query_id = l_n_query_id;

      p#frm#trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows deleted'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_query_del;

   PROCEDURE prc_keyfigure_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_vc_keyfigure_name   IN VARCHAR2
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_KEYFIGURE_INS';
   BEGIN
      MERGE INTO p#frm#mesr_keyfigure_t trg
           USING (SELECT s.mesr_query_id
                       , p_vc_keyfigure_code AS keyfigure_code
                       , p_vc_keyfigure_name AS keyfigure_name
                    FROM p#frm#mesr_query_t s
                   WHERE s.mesr_query_code = p_vc_query_code) src
              ON (trg.mesr_query_id = src.mesr_query_id
              AND trg.mesr_keyfigure_code = src.keyfigure_code)
      WHEN MATCHED THEN
         UPDATE SET trg.mesr_keyfigure_name = NVL (src.keyfigure_name, trg.mesr_keyfigure_name)
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.mesr_query_id
                     , trg.mesr_keyfigure_code
                     , trg.mesr_keyfigure_name
                    )
             VALUES (
                       src.mesr_query_id
                     , src.keyfigure_code
                     , src.keyfigure_name
                    );

      p#frm#trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows merged'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_keyfigure_ins;

   PROCEDURE prc_keyfigure_del (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_b_cascade           IN BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name      t_object_name := 'PRC_KEYFIGURE_DEL';
      l_n_keyfigure_id   NUMBER;
      l_n_cnt            NUMBER;
   BEGIN
      -- Get the key figure id
      SELECT k.mesr_keyfigure_id
        INTO l_n_keyfigure_id
        FROM p#frm#mesr_query_t s
           , p#frm#mesr_keyfigure_t k
       WHERE s.mesr_query_id = k.mesr_query_id
         AND s.mesr_query_code = p_vc_query_code
         AND k.mesr_keyfigure_code = p_vc_keyfigure_code;

      IF NOT p_b_cascade THEN
         SELECT COUNT (*)
           INTO l_n_cnt
           FROM p#frm#mesr_exec_t
          WHERE mesr_keyfigure_id = l_n_keyfigure_id;

         IF l_n_cnt > 0 THEN
            raise_application_error (
               -20001
             , 'Cannot delete key figure with execution results'
            );
         END IF;
      END IF;

      DELETE p#frm#mesr_exec_t
       WHERE mesr_keyfigure_id = l_n_keyfigure_id;

      p#frm#trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows deleted'
       , l_vc_prc_name
      );

      DELETE p#frm#mesr_threshold_t
       WHERE mesr_keyfigure_id = l_n_keyfigure_id;

      p#frm#trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows deleted'
       , l_vc_prc_name
      );

      DELETE p#frm#mesr_keyfigure_t
       WHERE mesr_keyfigure_id = l_n_keyfigure_id;

      p#frm#trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows deleted'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_keyfigure_del;

   PROCEDURE prc_threshold_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_vc_threshold_type   IN VARCHAR2
    , p_n_threshold_min     IN NUMBER
    , p_n_threshold_max     IN NUMBER
    , p_d_threshold_from    IN DATE DEFAULT TO_DATE (
                                               '01011111'
                                             , 'ddmmyyyy'
                                            )
    , p_d_threshold_to      IN DATE DEFAULT TO_DATE (
                                               '09099999'
                                             , 'ddmmyyyy'
                                            )
   )
   IS
      l_vc_prc_name        t_object_name := 'PRC_THRESHOLD_INS';
      l_d_threshold_from   DATE
                              := NVL (
                                    p_d_threshold_from
                                  , TO_DATE (
                                       '01011111'
                                     , 'ddmmyyyy'
                                    )
                                 );
      l_d_threshold_to     DATE
                              := NVL (
                                    p_d_threshold_to
                                  , TO_DATE (
                                       '09099999'
                                     , 'ddmmyyyy'
                                    )
                                 );
      l_n_keyfigure_id     NUMBER;
      l_n_threshold_id     NUMBER;
      l_n_split_flag       NUMBER;
      l_n_split_min        NUMBER;
      l_n_split_max        NUMBER;
   BEGIN
      -- Get the key figure id
      SELECT k.mesr_keyfigure_id
        INTO l_n_keyfigure_id
        FROM p#frm#mesr_query_t s
           , p#frm#mesr_keyfigure_t k
       WHERE s.mesr_query_id = k.mesr_query_id
         AND s.mesr_query_code = p_vc_query_code
         AND k.mesr_keyfigure_code = p_vc_keyfigure_code;

      IF l_n_keyfigure_id IS NOT NULL THEN
         -- Delete existing time slices if they reside between new boundary
         DELETE p#frm#mesr_threshold_t
          WHERE mesr_keyfigure_id = l_n_keyfigure_id
            AND mesr_threshold_from > l_d_threshold_from
            AND mesr_threshold_to < l_d_threshold_to;

         p#frm#trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows deleted'
          , l_vc_prc_name
         );

         -- If new slice inside existing then split
         INSERT INTO p#frm#mesr_threshold_t (
                        mesr_keyfigure_id
                      , mesr_threshold_type
                      , mesr_threshold_min
                      , mesr_threshold_max
                      , mesr_threshold_from
                      , mesr_threshold_to
                     )
            SELECT mesr_keyfigure_id
                 , mesr_threshold_type
                 , mesr_threshold_min
                 , mesr_threshold_max
                 , l_d_threshold_to
                 , mesr_threshold_to
              FROM p#frm#mesr_threshold_t
             WHERE mesr_keyfigure_id = l_n_keyfigure_id
               AND mesr_threshold_from < l_d_threshold_from
               AND mesr_threshold_to > l_d_threshold_to;

         p#frm#trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows inserted'
          , l_vc_prc_name
         );

         -- Update existing time slice where upper bound > new lower bound
         UPDATE p#frm#mesr_threshold_t
            SET mesr_threshold_to = l_d_threshold_from
          WHERE mesr_keyfigure_id = l_n_keyfigure_id
            AND mesr_threshold_from < l_d_threshold_from
            AND mesr_threshold_to > l_d_threshold_from;

         p#frm#trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows updated'
          , l_vc_prc_name
         );

         -- Update existing time slice where lower bound < new upper bound
         UPDATE p#frm#mesr_threshold_t
            SET mesr_threshold_from = l_d_threshold_to
          WHERE mesr_keyfigure_id = l_n_keyfigure_id
            AND mesr_threshold_to > l_d_threshold_to
            AND mesr_threshold_from < l_d_threshold_to;

         p#frm#trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows updated'
          , l_vc_prc_name
         );

            -- Update time slice with same boundary
            UPDATE p#frm#mesr_threshold_t
               SET mesr_threshold_type = p_vc_threshold_type
                 , mesr_threshold_min = p_n_threshold_min
                 , mesr_threshold_max = p_n_threshold_max
             WHERE mesr_keyfigure_id = l_n_keyfigure_id
               AND mesr_threshold_from = l_d_threshold_from
               AND mesr_threshold_to = l_d_threshold_to
         RETURNING mesr_threshold_id
              INTO l_n_threshold_id;

         p#frm#trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows updated'
          , l_vc_prc_name
         );

         IF l_n_threshold_id IS NULL THEN
            INSERT INTO p#frm#mesr_threshold_t (
                           mesr_keyfigure_id
                         , mesr_threshold_type
                         , mesr_threshold_min
                         , mesr_threshold_max
                         , mesr_threshold_from
                         , mesr_threshold_to
                        )
                 VALUES (
                           l_n_keyfigure_id
                         , p_vc_threshold_type
                         , p_n_threshold_min
                         , p_n_threshold_max
                         , l_d_threshold_from
                         , l_d_threshold_to
                        );

            p#frm#trac.log_sub_info (
                  SQL%ROWCOUNT
               || ' rows inserted'
             , l_vc_prc_name
            );
         END IF;

         COMMIT;
      END IF;
   END prc_threshold_ins;

   PROCEDURE prc_exec_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_n_result_value      IN NUMBER
    , p_vc_result_report    IN CLOB
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_EXEC_INS';
   BEGIN
      INSERT INTO p#frm#mesr_exec_t (
                     mesr_keyfigure_id
                   , mesr_exec_result_value
                   , mesr_exec_result_report
                  )
         SELECT k.mesr_keyfigure_id
              , p_n_result_value
              , p_vc_result_report
           FROM p#frm#mesr_query_t s
              , p#frm#mesr_keyfigure_t k
          WHERE s.mesr_query_id = k.mesr_query_id
            AND s.mesr_query_code = p_vc_query_code
            AND k.mesr_keyfigure_code = p_vc_keyfigure_code;

      p#frm#trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows inserted'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_exec_ins;

   PROCEDURE prc_exec (
      p_vc_query_code          IN VARCHAR2 DEFAULT 'ALL'
    , p_b_exception_if_fails   IN BOOLEAN DEFAULT FALSE
    , p_vc_storage_type        IN VARCHAR2 DEFAULT 'VALUE'
   )
   IS
      l_vc_prc_name       t_object_name := 'PRC_EXEC';
      l_keyfigure         t_keyvalue;
      l_vc_query_table    VARCHAR2 (100);
      l_vc_stmt           VARCHAR2 (32000);
      l_vc_report         CLOB;
      l_vc_job_name       VARCHAR2 (100);
      l_n_gui             NUMBER;
      l_n_query_no        NUMBER;
      l_n_result          NUMBER;
      l_n_threshold_min   NUMBER;
      l_n_threshold_max   NUMBER;
      l_b_success         BOOLEAN := TRUE;
   BEGIN
      p#frm#trac.log_sub_info (
            'Execute case query '
         || p_vc_query_code
       , 'Query START'
      );
      p#frm#trac.log_sub_info (
            'Results will be stored as '
         || p_vc_storage_type
       ,    'STORAGE '
         || p_vc_storage_type
      );

      FOR r_query IN (  SELECT s.mesr_query_id
                             , s.mesr_query_code
                             , s.mesr_query_sql
                          FROM p#frm#mesr_query_t s
                         WHERE (p_vc_query_code IN (s.mesr_query_code, 'ALL')
                             OR p_vc_query_code IS NULL)
                      ORDER BY s.mesr_query_code) LOOP
         p#frm#trac.log_sub_info (
               'query '
            || r_query.mesr_query_code
          , 'query START'
         );

         BEGIN
            IF p_vc_storage_type = 'VALUE'
            OR p_vc_storage_type IS NULL THEN
               EXECUTE IMMEDIATE r_query.mesr_query_sql BULK COLLECT INTO l_keyfigure;

               p#frm#trac.log_sub_info (
                     'query '
                  || r_query.mesr_query_code
                  || ': SQL executed '
                , 'SQL EXECUTED'
               );

               IF l_keyfigure.FIRST IS NOT NULL THEN
                  FOR i IN l_keyfigure.FIRST .. l_keyfigure.LAST LOOP
                     prc_keyfigure_ins (
                        r_query.mesr_query_code
                      , l_keyfigure (i).keyfigure
                      , l_keyfigure (i).keyfigure
                     );

                     IF p_b_exception_if_fails THEN
                        l_b_success :=
                           fct_exec_verify (
                              r_query.mesr_query_code
                            , l_keyfigure (i).keyfigure
                            , l_keyfigure (i).resultvalue
                           );
                     END IF;

                     prc_exec_ins (
                        r_query.mesr_query_code
                      , l_keyfigure (i).keyfigure
                      , l_keyfigure (i).resultvalue
                      , NULL
                     );
                     p#frm#trac.log_sub_info (
                           'Key figure '
                        || l_keyfigure (i).keyfigure
                        || ' = '
                        || l_keyfigure (i).resultvalue
                        || ' , result stored'
                      , 'KEY FIGURE STORED'
                     );
                  END LOOP;
               ELSE
                  p#frm#trac.log_sub_info (
                        'query '
                     || r_query.mesr_query_code
                     || ': no rows returned '
                   , 'NO RESULTS'
                  );
               END IF;
            ELSIF p_vc_storage_type = 'REPORT' THEN
               l_vc_query_table :=
                     'tmp_mesr_query_'
                  || TRIM (TO_CHAR (
                              r_query.mesr_query_id
                            , '0000000000'
                           ));

               BEGIN
                  l_vc_stmt :=
                        'DROP TABLE '
                     || l_vc_query_table;

                  EXECUTE IMMEDIATE l_vc_stmt;
               EXCEPTION
                  WHEN OTHERS THEN
                     NULL;
               END;

               l_vc_stmt :=
                     'CREATE TABLE '
                  || l_vc_query_table
                  || ' AS '
                  || r_query.mesr_query_sql;

               EXECUTE IMMEDIATE l_vc_stmt;

               p#frm#trac.log_sub_info (
                     'query '
                  || r_query.mesr_query_code
                  || ': Table created '
                , 'SQL EXECUTED'
               );
               l_vc_report :=
                  p#frm#docu.fct_get_table_dataset (
                     USER
                   , l_vc_query_table
                  );
               prc_keyfigure_ins (
                  r_query.mesr_query_code
                , 'REPORT'
                , 'REPORT'
               );
               prc_exec_ins (
                  r_query.mesr_query_code
                , 'REPORT'
                , NULL
                , l_vc_report
               );
               p#frm#trac.log_sub_info (
                  'Report stored'
                , 'REPORT STORED'
               );
            END IF;
         EXCEPTION
            WHEN OTHERS THEN
               p#frm#trac.log_error (
                     'query '
                  || r_query.mesr_query_code
                  || ': '
                  || SQLERRM
                , 'ERROR'
               );
         END;

         p#frm#trac.log_sub_info (
               'query '
            || r_query.mesr_query_code
          , 'query FINISH'
         );
      END LOOP;

      p#frm#trac.log_sub_info (
            'Execute query '
         || p_vc_query_code
         || ' : success '
         || CASE
               WHEN l_b_success THEN
                  'TRUE'
               ELSE
                  'FALSE'
            END
       , 'CASE FINISH'
      );

      IF p_b_exception_if_fails
     AND NOT l_b_success THEN
         raise_application_error (
            -20001
          , 'Test failed'
         );
      END IF;
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_error (
               'query '
            || p_vc_query_code
            || ' : failed'
          , 'QUERY ERROR'
         );
         RAISE;
   END;

   PROCEDURE prc_exec_taxonomy (
      p_vc_taxonomy_code       IN VARCHAR2
    , p_b_exception_if_fails   IN BOOLEAN DEFAULT FALSE
    , p_vc_storage_type        IN VARCHAR2 DEFAULT 'VALUE'
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_EXEC_TAXONOMY';
   BEGIN
      p#frm#trac.log_sub_info (
            'Executing all cases belonging to taxonomy '
         || p_vc_taxonomy_code
         || ' and its children'
       , l_vc_prc_name
      );

      FOR r_tax IN (    SELECT taxn_id
                             , taxn_name
                             , SYS_CONNECT_BY_PATH (
                                  taxn_code
                                , '/'
                               )
                                  taxn_path
                          FROM p#frm#taxn_t
                    START WITH taxn_code = p_vc_taxonomy_code
                    CONNECT BY PRIOR taxn_id = taxn_parent_id) LOOP
         p#frm#trac.log_sub_info (
               'Executing all cases belonging to taxonomy '
            || r_tax.taxn_path
          , l_vc_prc_name
         );

         FOR r_query IN (SELECT c.mesr_query_code
                           FROM p#frm#mesr_taxn_t t
                              , p#frm#mesr_query_t c
                          WHERE t.mesr_query_id = c.mesr_query_id
                            AND t.taxn_id = r_tax.taxn_id) LOOP
            prc_exec (
               r_query.mesr_query_code
             , p_b_exception_if_fails
             , p_vc_storage_type
            );
         END LOOP;

         p#frm#trac.log_sub_info (
               'All cases belonging to taxonomy '
            || r_tax.taxn_path
            || ' have been executed'
          , l_vc_prc_name
         );
      END LOOP;

      p#frm#trac.log_sub_info (
            'All cases belonging to taxonomy '
         || p_vc_taxonomy_code
         || ' and its children have been executed'
       , l_vc_prc_name
      );
   END;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END p#frm#mesr;
2014-11-20 16:37:50.553 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE BODY dwhutl_mesr
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * Key value type
   */
   TYPE r_keyvalue IS RECORD (
      keyfigure     VARCHAR2 (100)
    , resultvalue   NUMBER
   );

   TYPE t_keyvalue IS TABLE OF r_keyvalue;

   FUNCTION fct_exec_verify (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_n_exec_value        IN NUMBER
   )
      RETURN BOOLEAN
   IS
      l_vc_prc_name         t_object_name := 'FCT_EXEC_VERIFY';
      l_n_keyfigure_id      NUMBER;
      l_vc_threshold_type   CHAR (1);
      l_n_threshold_min     NUMBER;
      l_n_threshold_max     NUMBER;
      l_n_result_previous   NUMBER;
      l_n_increment         NUMBER;
      l_n_cnt               NUMBER := 0;
      l_b_success           BOOLEAN := TRUE;
   BEGIN
      SELECT MIN (k.mesr_keyfigure_id)
           , MIN (t.mesr_threshold_type)
           , MIN (t.mesr_threshold_min)
           , MAX (t.mesr_threshold_max)
        INTO l_n_keyfigure_id
           , l_vc_threshold_type
           , l_n_threshold_min
           , l_n_threshold_max
        FROM dwhutl_mesr_query_t s
           , dwhutl_mesr_keyfigure_t k
           , dwhutl_mesr_threshold_t t
       WHERE s.mesr_query_id = k.mesr_query_id
         AND t.mesr_keyfigure_id = k.mesr_keyfigure_id
         AND s.mesr_query_code = p_vc_query_code
         AND k.mesr_keyfigure_code = p_vc_keyfigure_code
         AND t.mesr_threshold_from <= SYSDATE
         AND SYSDATE < t.mesr_threshold_to;

      dwhutl_trac.log_sub_info (
            'Key figure '
         || p_vc_keyfigure_code
         || ' type '
         || l_vc_threshold_type
         || ' threshold = '
         || l_n_threshold_min
         || ' - '
         || l_n_threshold_max
       , 'VERIFYING'
      );

      IF l_vc_threshold_type = 'A' THEN
         IF l_n_threshold_min IS NOT NULL
        AND l_n_threshold_max IS NOT NULL
        AND p_n_exec_value NOT BETWEEN l_n_threshold_min AND l_n_threshold_max THEN
            l_b_success := FALSE;
            dwhutl_trac.log_sub_info (
                  'Result '
               || p_n_exec_value
               || ' not ok'
             , 'RESULT NOT OK'
            );
         ELSE
            dwhutl_trac.log_sub_info (
                  'Result '
               || p_n_exec_value
               || ' ok'
             , 'RESULT OK'
            );
         END IF;
      ELSIF l_vc_threshold_type = 'I' THEN
         SELECT COUNT (*)
           INTO l_n_cnt
           FROM dwhutl_mesr_exec_t
          WHERE mesr_keyfigure_id = l_n_keyfigure_id;

         IF l_n_cnt > 0 THEN
            SELECT MAX (NVL (mesr_exec_result_value, 0))
              INTO l_n_result_previous
              FROM (SELECT mesr_exec_id
                         , mesr_exec_result_value
                         , MAX (mesr_exec_id) OVER (PARTITION BY mesr_keyfigure_id) AS mesr_exec_last
                      FROM dwhutl_mesr_exec_t
                     WHERE mesr_keyfigure_id = l_n_keyfigure_id)
             WHERE mesr_exec_id = mesr_exec_last;

            dwhutl_trac.log_sub_info (
                  'Previous result = '
               || l_n_result_previous
             , 'VERIFYING INCREMENT'
            );

            IF l_n_result_previous > 0 THEN
               l_n_increment :=
                    (  p_n_exec_value
                     - l_n_result_previous)
                  / l_n_result_previous;

               IF l_n_threshold_min IS NOT NULL
              AND l_n_threshold_max IS NOT NULL
              AND l_n_increment NOT BETWEEN l_n_threshold_min AND l_n_threshold_max THEN
                  l_b_success := FALSE;
                  dwhutl_trac.log_sub_info (
                        'Increment '
                     || l_n_increment
                     || ' not ok'
                   , 'RESULT NOT OK'
                  );
               ELSE
                  dwhutl_trac.log_sub_info (
                        'Increment '
                     || l_n_increment
                     || ' ok'
                   , 'RESULT OK'
                  );
               END IF;
            ELSE
               dwhutl_trac.log_sub_info (
                     'Previous result = '
                  || l_n_result_previous
                , 'RESULT OK'
               );
            END IF;
         ELSE
            dwhutl_trac.log_sub_info (
                  'Key figure '
               || p_vc_keyfigure_code
               || ' type '
               || l_vc_threshold_type
               || ' - no previous results available'
             , 'RESULT OK'
            );
         END IF;
      END IF;

      RETURN l_b_success;
   END fct_exec_verify;

   PROCEDURE prc_mesr_taxn_ins (
      p_vc_query_code      IN VARCHAR2
    , p_vc_taxonomy_code   IN VARCHAR2
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_mesr_TAXONOMY_INS';
   BEGIN
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Inserting in mesr_case_taxonomy_t'
      );

      MERGE INTO dwhutl_mesr_taxn_t trg
           USING (SELECT mesr_query_id
                       , taxn_id
                    FROM dwhutl_mesr_query_t c
                       , dwhutl_taxn_t t
                   WHERE c.mesr_query_code = p_vc_query_code
                     AND t.taxn_code = p_vc_taxonomy_code) src
              ON (trg.mesr_query_id = src.mesr_query_id
              AND trg.taxn_id = src.taxn_id)
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.mesr_query_id
                     , trg.taxn_id
                    )
             VALUES (
                       src.mesr_query_id
                     , src.taxn_id
                    );

      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       ,    SQL%ROWCOUNT
         || ' rows merged'
      );
      COMMIT;
   END prc_mesr_taxn_ins;

   PROCEDURE prc_mesr_taxn_del (
      p_vc_query_code      IN VARCHAR2
    , p_vc_taxonomy_code   IN VARCHAR2
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_CASE_TAXONOMY_DEL';
   BEGIN
      dwhutl_trac.log_sub_info (
         'Deleting in mesr_case_taxonomy_t'
       , l_vc_prc_name
      );

      DELETE dwhutl_mesr_taxn_t
       WHERE mesr_query_id = (SELECT mesr_query_id
                                FROM dwhutl_mesr_query_t
                               WHERE mesr_query_code = p_vc_query_code)
         AND taxn_id = (SELECT taxn_id
                          FROM dwhutl_taxn_t
                         WHERE taxn_code = p_vc_taxonomy_code);

      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       ,    SQL%ROWCOUNT
         || ' rows deleted'
      );
      COMMIT;
   END prc_mesr_taxn_del;

   PROCEDURE prc_query_ins (
      p_vc_query_code   IN VARCHAR2
    , p_vc_query_name   IN VARCHAR2
    , p_vc_query_sql    IN CLOB
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_query_INS';
   BEGIN
      MERGE INTO dwhutl_mesr_query_t trg
           USING (SELECT p_vc_query_code AS query_code
                       , p_vc_query_name AS query_name
                       , p_vc_query_sql AS query_sql
                    FROM DUAL) src
              ON (trg.mesr_query_code = src.query_code)
      WHEN MATCHED THEN
         UPDATE SET trg.mesr_query_name = NVL (src.query_name, trg.mesr_query_name)
                  , trg.mesr_query_sql = NVL (src.query_sql, trg.mesr_query_sql)
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.mesr_query_code
                     , trg.mesr_query_name
                     , trg.mesr_query_sql
                    )
             VALUES (
                       src.query_code
                     , src.query_name
                     , src.query_sql
                    );

      dwhutl_trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows merged'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_query_ins;

   PROCEDURE prc_query_del (
      p_vc_query_code   IN VARCHAR2
    , p_b_cascade       IN BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_query_DEL';
      l_n_query_id    NUMBER;
      l_n_cnt         NUMBER;
   BEGIN
      -- Get the query id
      SELECT mesr_query_id
        INTO l_n_query_id
        FROM dwhutl_mesr_query_t
       WHERE mesr_query_code = p_vc_query_code;

      IF NOT p_b_cascade THEN
         SELECT COUNT (*)
           INTO l_n_cnt
           FROM dwhutl_mesr_keyfigure_t
          WHERE mesr_query_id = l_n_query_id;

         IF l_n_cnt > 0 THEN
            raise_application_error (
               -20001
             , 'Cannot delete query with key figures'
            );
         END IF;
      END IF;

      FOR r_key IN (SELECT mesr_keyfigure_code
                      FROM dwhutl_mesr_keyfigure_t
                     WHERE mesr_query_id = l_n_query_id) LOOP
         prc_keyfigure_del (
            p_vc_query_code
          , r_key.mesr_keyfigure_code
          , p_b_cascade
         );
      END LOOP;

      DELETE dwhutl_mesr_query_t
       WHERE mesr_query_id = l_n_query_id;

      dwhutl_trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows deleted'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_query_del;

   PROCEDURE prc_keyfigure_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_vc_keyfigure_name   IN VARCHAR2
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_KEYFIGURE_INS';
   BEGIN
      MERGE INTO dwhutl_mesr_keyfigure_t trg
           USING (SELECT s.mesr_query_id
                       , p_vc_keyfigure_code AS keyfigure_code
                       , p_vc_keyfigure_name AS keyfigure_name
                    FROM dwhutl_mesr_query_t s
                   WHERE s.mesr_query_code = p_vc_query_code) src
              ON (trg.mesr_query_id = src.mesr_query_id
              AND trg.mesr_keyfigure_code = src.keyfigure_code)
      WHEN MATCHED THEN
         UPDATE SET trg.mesr_keyfigure_name = NVL (src.keyfigure_name, trg.mesr_keyfigure_name)
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.mesr_query_id
                     , trg.mesr_keyfigure_code
                     , trg.mesr_keyfigure_name
                    )
             VALUES (
                       src.mesr_query_id
                     , src.keyfigure_code
                     , src.keyfigure_name
                    );

      dwhutl_trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows merged'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_keyfigure_ins;

   PROCEDURE prc_keyfigure_del (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_b_cascade           IN BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name      t_object_name := 'PRC_KEYFIGURE_DEL';
      l_n_keyfigure_id   NUMBER;
      l_n_cnt            NUMBER;
   BEGIN
      -- Get the key figure id
      SELECT k.mesr_keyfigure_id
        INTO l_n_keyfigure_id
        FROM dwhutl_mesr_query_t s
           , dwhutl_mesr_keyfigure_t k
       WHERE s.mesr_query_id = k.mesr_query_id
         AND s.mesr_query_code = p_vc_query_code
         AND k.mesr_keyfigure_code = p_vc_keyfigure_code;

      IF NOT p_b_cascade THEN
         SELECT COUNT (*)
           INTO l_n_cnt
           FROM dwhutl_mesr_exec_t
          WHERE mesr_keyfigure_id = l_n_keyfigure_id;

         IF l_n_cnt > 0 THEN
            raise_application_error (
               -20001
             , 'Cannot delete key figure with execution results'
            );
         END IF;
      END IF;

      DELETE dwhutl_mesr_exec_t
       WHERE mesr_keyfigure_id = l_n_keyfigure_id;

      dwhutl_trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows deleted'
       , l_vc_prc_name
      );

      DELETE dwhutl_mesr_threshold_t
       WHERE mesr_keyfigure_id = l_n_keyfigure_id;

      dwhutl_trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows deleted'
       , l_vc_prc_name
      );

      DELETE dwhutl_mesr_keyfigure_t
       WHERE mesr_keyfigure_id = l_n_keyfigure_id;

      dwhutl_trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows deleted'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_keyfigure_del;

   PROCEDURE prc_threshold_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_vc_threshold_type   IN VARCHAR2
    , p_n_threshold_min     IN NUMBER
    , p_n_threshold_max     IN NUMBER
    , p_d_threshold_from    IN DATE DEFAULT TO_DATE (
                                               '01011111'
                                             , 'ddmmyyyy'
                                            )
    , p_d_threshold_to      IN DATE DEFAULT TO_DATE (
                                               '09099999'
                                             , 'ddmmyyyy'
                                            )
   )
   IS
      l_vc_prc_name        t_object_name := 'PRC_THRESHOLD_INS';
      l_d_threshold_from   DATE
                              := NVL (
                                    p_d_threshold_from
                                  , TO_DATE (
                                       '01011111'
                                     , 'ddmmyyyy'
                                    )
                                 );
      l_d_threshold_to     DATE
                              := NVL (
                                    p_d_threshold_to
                                  , TO_DATE (
                                       '09099999'
                                     , 'ddmmyyyy'
                                    )
                                 );
      l_n_keyfigure_id     NUMBER;
      l_n_threshold_id     NUMBER;
      l_n_split_flag       NUMBER;
      l_n_split_min        NUMBER;
      l_n_split_max        NUMBER;
   BEGIN
      -- Get the key figure id
      SELECT k.mesr_keyfigure_id
        INTO l_n_keyfigure_id
        FROM dwhutl_mesr_query_t s
           , dwhutl_mesr_keyfigure_t k
       WHERE s.mesr_query_id = k.mesr_query_id
         AND s.mesr_query_code = p_vc_query_code
         AND k.mesr_keyfigure_code = p_vc_keyfigure_code;

      IF l_n_keyfigure_id IS NOT NULL THEN
         -- Delete existing time slices if they reside between new boundary
         DELETE dwhutl_mesr_threshold_t
          WHERE mesr_keyfigure_id = l_n_keyfigure_id
            AND mesr_threshold_from > l_d_threshold_from
            AND mesr_threshold_to < l_d_threshold_to;

         dwhutl_trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows deleted'
          , l_vc_prc_name
         );

         -- If new slice inside existing then split
         INSERT INTO dwhutl_mesr_threshold_t (
                        mesr_keyfigure_id
                      , mesr_threshold_type
                      , mesr_threshold_min
                      , mesr_threshold_max
                      , mesr_threshold_from
                      , mesr_threshold_to
                     )
            SELECT mesr_keyfigure_id
                 , mesr_threshold_type
                 , mesr_threshold_min
                 , mesr_threshold_max
                 , l_d_threshold_to
                 , mesr_threshold_to
              FROM dwhutl_mesr_threshold_t
             WHERE mesr_keyfigure_id = l_n_keyfigure_id
               AND mesr_threshold_from < l_d_threshold_from
               AND mesr_threshold_to > l_d_threshold_to;

         dwhutl_trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows inserted'
          , l_vc_prc_name
         );

         -- Update existing time slice where upper bound > new lower bound
         UPDATE dwhutl_mesr_threshold_t
            SET mesr_threshold_to = l_d_threshold_from
          WHERE mesr_keyfigure_id = l_n_keyfigure_id
            AND mesr_threshold_from < l_d_threshold_from
            AND mesr_threshold_to > l_d_threshold_from;

         dwhutl_trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows updated'
          , l_vc_prc_name
         );

         -- Update existing time slice where lower bound < new upper bound
         UPDATE dwhutl_mesr_threshold_t
            SET mesr_threshold_from = l_d_threshold_to
          WHERE mesr_keyfigure_id = l_n_keyfigure_id
            AND mesr_threshold_to > l_d_threshold_to
            AND mesr_threshold_from < l_d_threshold_to;

         dwhutl_trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows updated'
          , l_vc_prc_name
         );

            -- Update time slice with same boundary
            UPDATE dwhutl_mesr_threshold_t
               SET mesr_threshold_type = p_vc_threshold_type
                 , mesr_threshold_min = p_n_threshold_min
                 , mesr_threshold_max = p_n_threshold_max
             WHERE mesr_keyfigure_id = l_n_keyfigure_id
               AND mesr_threshold_from = l_d_threshold_from
               AND mesr_threshold_to = l_d_threshold_to
         RETURNING mesr_threshold_id
              INTO l_n_threshold_id;

         dwhutl_trac.log_sub_info (
               SQL%ROWCOUNT
            || ' rows updated'
          , l_vc_prc_name
         );

         IF l_n_threshold_id IS NULL THEN
            INSERT INTO dwhutl_mesr_threshold_t (
                           mesr_keyfigure_id
                         , mesr_threshold_type
                         , mesr_threshold_min
                         , mesr_threshold_max
                         , mesr_threshold_from
                         , mesr_threshold_to
                        )
                 VALUES (
                           l_n_keyfigure_id
                         , p_vc_threshold_type
                         , p_n_threshold_min
                         , p_n_threshold_max
                         , l_d_threshold_from
                         , l_d_threshold_to
                        );

            dwhutl_trac.log_sub_info (
                  SQL%ROWCOUNT
               || ' rows inserted'
             , l_vc_prc_name
            );
         END IF;

         COMMIT;
      END IF;
   END prc_threshold_ins;

   PROCEDURE prc_exec_ins (
      p_vc_query_code       IN VARCHAR2
    , p_vc_keyfigure_code   IN VARCHAR2
    , p_n_result_value      IN NUMBER
    , p_vc_result_report    IN CLOB
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_EXEC_INS';
   BEGIN
      INSERT INTO dwhutl_mesr_exec_t (
                     mesr_keyfigure_id
                   , mesr_exec_result_value
                   , mesr_exec_result_report
                  )
         SELECT k.mesr_keyfigure_id
              , p_n_result_value
              , p_vc_result_report
           FROM dwhutl_mesr_query_t s
              , dwhutl_mesr_keyfigure_t k
          WHERE s.mesr_query_id = k.mesr_query_id
            AND s.mesr_query_code = p_vc_query_code
            AND k.mesr_keyfigure_code = p_vc_keyfigure_code;

      dwhutl_trac.log_sub_info (
            SQL%ROWCOUNT
         || ' rows inserted'
       , l_vc_prc_name
      );
      COMMIT;
   END prc_exec_ins;

   PROCEDURE prc_exec (
      p_vc_query_code          IN VARCHAR2 DEFAULT 'ALL'
    , p_b_exception_if_fails   IN BOOLEAN DEFAULT FALSE
    , p_vc_storage_type        IN VARCHAR2 DEFAULT 'VALUE'
   )
   IS
      l_vc_prc_name       t_object_name := 'PRC_EXEC';
      l_keyfigure         t_keyvalue;
      l_vc_query_table    VARCHAR2 (100);
      l_vc_stmt           VARCHAR2 (32000);
      l_vc_report         CLOB;
      l_vc_job_name       VARCHAR2 (100);
      l_n_gui             NUMBER;
      l_n_query_no        NUMBER;
      l_n_result          NUMBER;
      l_n_threshold_min   NUMBER;
      l_n_threshold_max   NUMBER;
      l_b_success         BOOLEAN := TRUE;
   BEGIN
      dwhutl_trac.log_sub_info (
            'Execute case query '
         || p_vc_query_code
       , 'Query START'
      );
      dwhutl_trac.log_sub_info (
            'Results will be stored as '
         || p_vc_storage_type
       ,    'STORAGE '
         || p_vc_storage_type
      );

      FOR r_query IN (  SELECT s.mesr_query_id
                             , s.mesr_query_code
                             , s.mesr_query_sql
                          FROM dwhutl_mesr_query_t s
                         WHERE (p_vc_query_code IN (s.mesr_query_code, 'ALL')
                             OR p_vc_query_code IS NULL)
                      ORDER BY s.mesr_query_code) LOOP
         dwhutl_trac.log_sub_info (
               'query '
            || r_query.mesr_query_code
          , 'query START'
         );

         BEGIN
            IF p_vc_storage_type = 'VALUE'
            OR p_vc_storage_type IS NULL THEN
               EXECUTE IMMEDIATE r_query.mesr_query_sql BULK COLLECT INTO l_keyfigure;

               dwhutl_trac.log_sub_info (
                     'query '
                  || r_query.mesr_query_code
                  || ': SQL executed '
                , 'SQL EXECUTED'
               );

               IF l_keyfigure.FIRST IS NOT NULL THEN
                  FOR i IN l_keyfigure.FIRST .. l_keyfigure.LAST LOOP
                     prc_keyfigure_ins (
                        r_query.mesr_query_code
                      , l_keyfigure (i).keyfigure
                      , l_keyfigure (i).keyfigure
                     );

                     IF p_b_exception_if_fails THEN
                        l_b_success :=
                           fct_exec_verify (
                              r_query.mesr_query_code
                            , l_keyfigure (i).keyfigure
                            , l_keyfigure (i).resultvalue
                           );
                     END IF;

                     prc_exec_ins (
                        r_query.mesr_query_code
                      , l_keyfigure (i).keyfigure
                      , l_keyfigure (i).resultvalue
                      , NULL
                     );
                     dwhutl_trac.log_sub_info (
                           'Key figure '
                        || l_keyfigure (i).keyfigure
                        || ' = '
                        || l_keyfigure (i).resultvalue
                        || ' , result stored'
                      , 'KEY FIGURE STORED'
                     );
                  END LOOP;
               ELSE
                  dwhutl_trac.log_sub_info (
                        'query '
                     || r_query.mesr_query_code
                     || ': no rows returned '
                   , 'NO RESULTS'
                  );
               END IF;
            ELSIF p_vc_storage_type = 'REPORT' THEN
               l_vc_query_table :=
                     'tmp_mesr_query_'
                  || TRIM (TO_CHAR (
                              r_query.mesr_query_id
                            , '0000000000'
                           ));

               BEGIN
                  l_vc_stmt :=
                        'DROP TABLE '
                     || l_vc_query_table;

                  EXECUTE IMMEDIATE l_vc_stmt;
               EXCEPTION
                  WHEN OTHERS THEN
                     NULL;
               END;

               l_vc_stmt :=
                     'CREATE TABLE '
                  || l_vc_query_table
                  || ' AS '
                  || r_query.mesr_query_sql;

               EXECUTE IMMEDIATE l_vc_stmt;

               dwhutl_trac.log_sub_info (
                     'query '
                  || r_query.mesr_query_code
                  || ': Table created '
                , 'SQL EXECUTED'
               );
               l_vc_report :=
                  dwhutl_docu.fct_get_table_dataset (
                     USER
                   , l_vc_query_table
                  );
               prc_keyfigure_ins (
                  r_query.mesr_query_code
                , 'REPORT'
                , 'REPORT'
               );
               prc_exec_ins (
                  r_query.mesr_query_code
                , 'REPORT'
                , NULL
                , l_vc_report
               );
               dwhutl_trac.log_sub_info (
                  'Report stored'
                , 'REPORT STORED'
               );
            END IF;
         EXCEPTION
            WHEN OTHERS THEN
               dwhutl_trac.log_error (
                     'query '
                  || r_query.mesr_query_code
                  || ': '
                  || SQLERRM
                , 'ERROR'
               );
         END;

         dwhutl_trac.log_sub_info (
               'query '
            || r_query.mesr_query_code
          , 'query FINISH'
         );
      END LOOP;

      dwhutl_trac.log_sub_info (
            'Execute query '
         || p_vc_query_code
         || ' : success '
         || CASE
               WHEN l_b_success THEN
                  'TRUE'
               ELSE
                  'FALSE'
            END
       , 'CASE FINISH'
      );

      IF p_b_exception_if_fails
     AND NOT l_b_success THEN
         raise_application_error (
            -20001
          , 'Test failed'
         );
      END IF;
   EXCEPTION
      WHEN OTHERS THEN
         dwhutl_trac.log_error (
               'query '
            || p_vc_query_code
            || ' : failed'
          , 'QUERY ERROR'
         );
         RAISE;
   END;

   PROCEDURE prc_exec_taxonomy (
      p_vc_taxonomy_code       IN VARCHAR2
    , p_b_exception_if_fails   IN BOOLEAN DEFAULT FALSE
    , p_vc_storage_type        IN VARCHAR2 DEFAULT 'VALUE'
   )
   IS
      l_vc_prc_name   t_object_name := 'PRC_EXEC_TAXONOMY';
   BEGIN
      dwhutl_trac.log_sub_info (
            'Executing all cases belonging to taxonomy '
         || p_vc_taxonomy_code
         || ' and its children'
       , l_vc_prc_name
      );

      FOR r_tax IN (    SELECT taxn_id
                             , taxn_name
                             , SYS_CONNECT_BY_PATH (
                                  taxn_code
                                , '/'
                               )
                                  taxn_path
                          FROM dwhutl_taxn_t
                    START WITH taxn_code = p_vc_taxonomy_code
                    CONNECT BY PRIOR taxn_id = taxn_parent_id) LOOP
         dwhutl_trac.log_sub_info (
               'Executing all cases belonging to taxonomy '
            || r_tax.taxn_path
          , l_vc_prc_name
         );

         FOR r_query IN (SELECT c.mesr_query_code
                           FROM dwhutl_mesr_taxn_t t
                              , dwhutl_mesr_query_t c
                          WHERE t.mesr_query_id = c.mesr_query_id
                            AND t.taxn_id = r_tax.taxn_id) LOOP
            prc_exec (
               r_query.mesr_query_code
             , p_b_exception_if_fails
             , p_vc_storage_type
            );
         END LOOP;

         dwhutl_trac.log_sub_info (
               'All cases belonging to taxonomy '
            || r_tax.taxn_path
            || ' have been executed'
          , l_vc_prc_name
         );
      END LOOP;

      dwhutl_trac.log_sub_info (
            'All cases belonging to taxonomy '
         || p_vc_taxonomy_code
         || ' and its children have been executed'
       , l_vc_prc_name
      );
   END;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END dwhutl_mesr;
2014-11-20 16:37:50.698 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/mesr/mesr-impl.sql executed
2014-11-20 16:37:50.698 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Module all installed
2014-11-20 16:37:50.698 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Found module "stag"
2014-11-20 16:37:50.698 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Installing all module
2014-11-20 16:37:50.698 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_column_t.sql delimiter 
2014-11-20 16:37:50.700 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_column'
    , 'stag_object_id NUMBER,
	   stag_column_pos NUMBER,
	   stag_column_name VARCHAR2 (100),
	   stag_column_name_map VARCHAR2 (100),
	   stag_column_comment VARCHAR2 (4000),
       stag_column_type VARCHAR2 (100),
       stag_column_length NUMBER,
       stag_column_precision NUMBER,
       stag_column_scale NUMBER,
	   stag_column_def VARCHAR2 (100),
	   stag_column_def_src VARCHAR2 (100),
	   stag_column_nk_pos NUMBER,
	   stag_column_incr_flag NUMBER,
	   stag_column_hist_flag NUMBER,
	   stag_column_edwh_flag NUMBER'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:50.701 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_column'
    , 'stag_object_id NUMBER,
	   stag_column_pos NUMBER,
	   stag_column_name VARCHAR2 (100),
	   stag_column_name_map VARCHAR2 (100),
	   stag_column_comment VARCHAR2 (4000),
       stag_column_type VARCHAR2 (100),
       stag_column_length NUMBER,
       stag_column_precision NUMBER,
       stag_column_scale NUMBER,
	   stag_column_def VARCHAR2 (100),
	   stag_column_def_src VARCHAR2 (100),
	   stag_column_nk_pos NUMBER,
	   stag_column_incr_flag NUMBER,
	   stag_column_hist_flag NUMBER,
	   stag_column_edwh_flag NUMBER'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:50.860 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_column_t.sql executed
2014-11-20 16:37:50.860 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_column_check_t.sql delimiter 
2014-11-20 16:37:50.861 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_column_check'
    , 'stag_object_id NUMBER,
	   stag_column_name VARCHAR2 (100),
	   stag_column_pos NUMBER,
       stag_column_type VARCHAR2 (100),
       stag_column_length NUMBER,
       stag_column_precision NUMBER,
       stag_column_scale NUMBER,
	   stag_column_def VARCHAR2 (100),
	   stag_column_nk_pos NUMBER'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:50.861 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_column_check'
    , 'stag_object_id NUMBER,
	   stag_column_name VARCHAR2 (100),
	   stag_column_pos NUMBER,
       stag_column_type VARCHAR2 (100),
       stag_column_length NUMBER,
       stag_column_precision NUMBER,
       stag_column_scale NUMBER,
	   stag_column_def VARCHAR2 (100),
	   stag_column_nk_pos NUMBER'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:51.175 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_column_check_t.sql executed
2014-11-20 16:37:51.184 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_ddl_t.sql delimiter 
2014-11-20 16:37:51.185 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_ddl'
    , 'stag_ddl_type VARCHAR2 (100),
       stag_ddl_name VARCHAR2 (100),
       stag_ddl_code CLOB'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:51.185 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_ddl'
    , 'stag_ddl_type VARCHAR2 (100),
       stag_ddl_name VARCHAR2 (100),
       stag_ddl_code CLOB'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:51.351 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_ddl_t.sql executed
2014-11-20 16:37:51.351 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_object_t.sql delimiter 
2014-11-20 16:37:51.353 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_object'
    , 'stag_source_id NUMBER,
	   stag_object_name VARCHAR2 (100),
       stag_object_comment VARCHAR2(4000),
	   stag_object_root VARCHAR2 (100),
	   stag_src_table_name VARCHAR2 (100),
	   stag_stage_table_name VARCHAR2 (100),
	   stag_hist_table_name VARCHAR2 (100),
	   stag_hist_nk_name VARCHAR2 (100),
	   stag_hist_view_name VARCHAR2 (100),
	   stag_hist_fbda_name VARCHAR2 (100),
       stag_diff_table_name VARCHAR2 (100),
	   stag_diff_nk_name VARCHAR2 (100),
	   stag_dupl_table_name VARCHAR2 (100),
	   stag_package_name VARCHAR2 (100),
	   stag_source_nk_flag NUMBER,
	   stag_parallel_degree NUMBER DEFAULT 1,
       stag_filter_clause VARCHAR2(4000),
       stag_increment_buffer NUMBER,
       stag_partition_clause VARCHAR2(4000),
       stag_hist_flag NUMBER DEFAULT 1,
       stag_fbda_flag NUMBER DEFAULT 0'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:51.353 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_object'
    , 'stag_source_id NUMBER,
	   stag_object_name VARCHAR2 (100),
       stag_object_comment VARCHAR2(4000),
	   stag_object_root VARCHAR2 (100),
	   stag_src_table_name VARCHAR2 (100),
	   stag_stage_table_name VARCHAR2 (100),
	   stag_hist_table_name VARCHAR2 (100),
	   stag_hist_nk_name VARCHAR2 (100),
	   stag_hist_view_name VARCHAR2 (100),
	   stag_hist_fbda_name VARCHAR2 (100),
       stag_diff_table_name VARCHAR2 (100),
	   stag_diff_nk_name VARCHAR2 (100),
	   stag_dupl_table_name VARCHAR2 (100),
	   stag_package_name VARCHAR2 (100),
	   stag_source_nk_flag NUMBER,
	   stag_parallel_degree NUMBER DEFAULT 1,
       stag_filter_clause VARCHAR2(4000),
       stag_increment_buffer NUMBER,
       stag_partition_clause VARCHAR2(4000),
       stag_hist_flag NUMBER DEFAULT 1,
       stag_fbda_flag NUMBER DEFAULT 0'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:51.617 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_object_t.sql executed
2014-11-20 16:37:51.618 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_object_uk.sql delimiter ;
2014-11-20 16:37:51.618 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
ALTER TABLE p#frm#stag_object_t ADD (CONSTRAINT p#frm#stag_object_uk UNIQUE ( stag_object_root));
2014-11-20 16:37:51.619 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
ALTER TABLE dwhutl_stag_object_t ADD (CONSTRAINT dwhutl_stag_object_uk UNIQUE ( stag_object_root));
2014-11-20 16:37:51.637 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_object_uk.sql executed
2014-11-20 16:37:51.638 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_queue_t.sql delimiter 
2014-11-20 16:37:51.638 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_queue'
    , 'stag_queue_code VARCHAR2(10),
       stag_queue_name VARCHAR2(100)'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:51.638 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_queue'
    , 'stag_queue_code VARCHAR2(10),
       stag_queue_name VARCHAR2(100)'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:51.886 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_queue_t.sql executed
2014-11-20 16:37:51.887 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_queue_uk.sql delimiter ;
2014-11-20 16:37:51.888 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
ALTER TABLE p#frm#stag_queue_t ADD CONSTRAINT p#frm#stag_queue_uk UNIQUE (stag_queue_code);
2014-11-20 16:37:51.888 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
ALTER TABLE dwhutl_stag_queue_t ADD CONSTRAINT dwhutl_stag_queue_uk UNIQUE (stag_queue_code);
2014-11-20 16:37:51.965 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_queue_uk.sql executed
2014-11-20 16:37:51.965 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_queue_object_t.sql delimiter 
2014-11-20 16:37:51.966 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_queue_object'
    , 'stag_queue_id NUMBER
     , stag_object_id NUMBER
     , etl_step_status NUMBER
     , etl_step_session_id NUMBER
     , etl_step_begin_date DATE
     , etl_step_end_date DATE'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:51.966 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_queue_object'
    , 'stag_queue_id NUMBER
     , stag_object_id NUMBER
     , etl_step_status NUMBER
     , etl_step_session_id NUMBER
     , etl_step_begin_date DATE
     , etl_step_end_date DATE'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.121 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_queue_object_t.sql executed
2014-11-20 16:37:52.121 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_queue_object_uk.sql delimiter ;
2014-11-20 16:37:52.122 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
ALTER TABLE p#frm#stag_queue_object_t ADD CONSTRAINT p#frm#stag_queue_object_uk UNIQUE (stag_queue_id,stag_object_id);
2014-11-20 16:37:52.122 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
ALTER TABLE dwhutl_stag_queue_object_t ADD CONSTRAINT dwhutl_stag_queue_object_uk UNIQUE (stag_queue_id,stag_object_id);
2014-11-20 16:37:52.138 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_queue_object_uk.sql executed
2014-11-20 16:37:52.139 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_source_db_t.sql delimiter 
2014-11-20 16:37:52.139 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_source_db'
    , 'stag_source_id          NUMBER,
       stag_source_db_link     VARCHAR2(100),
       stag_source_db_jdbcname VARCHAR2(100),
       stag_source_owner       VARCHAR2(100),
       stag_distribution_code  VARCHAR2(10),
       stag_source_bodi_ds     VARCHAR2(100)'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.140 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_source_db'
    , 'stag_source_id          NUMBER,
       stag_source_db_link     VARCHAR2(100),
       stag_source_db_jdbcname VARCHAR2(100),
       stag_source_owner       VARCHAR2(100),
       stag_distribution_code  VARCHAR2(10),
       stag_source_bodi_ds     VARCHAR2(100)'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.333 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_source_db_t.sql executed
2014-11-20 16:37:52.333 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_source_t.sql delimiter 
2014-11-20 16:37:52.334 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_source'
    , 'stag_source_code VARCHAR2(10),
		stag_source_prefix VARCHAR2(10),
		stag_source_name VARCHAR2(1000),
		stag_owner VARCHAR2(100),
		stag_ts_stage_data VARCHAR2(100),
		stag_ts_stage_indx VARCHAR2(100),
		stag_ts_hist_data VARCHAR2(100),
		stag_ts_hist_indx VARCHAR2(100),
		stag_fb_archive VARCHAR2(100),
		stag_bodi_ds VARCHAR2(100),
		stag_source_bodi_ds VARCHAR2(100)'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.335 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_source'
    , 'stag_source_code VARCHAR2(10),
		stag_source_prefix VARCHAR2(10),
		stag_source_name VARCHAR2(1000),
		stag_owner VARCHAR2(100),
		stag_ts_stage_data VARCHAR2(100),
		stag_ts_stage_indx VARCHAR2(100),
		stag_ts_hist_data VARCHAR2(100),
		stag_ts_hist_indx VARCHAR2(100),
		stag_fb_archive VARCHAR2(100),
		stag_bodi_ds VARCHAR2(100),
		stag_source_bodi_ds VARCHAR2(100)'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.543 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_source_t.sql executed
2014-11-20 16:37:52.543 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_stat_type_t.sql delimiter 
2014-11-20 16:37:52.544 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_stat_type'
    , 'stag_stat_type_code VARCHAR2(10),
       stag_stat_type_name VARCHAR2(100),
	   stag_stat_type_desc VARCHAR2(1000)'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.544 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_stat_type'
    , 'stag_stat_type_code VARCHAR2(10),
       stag_stat_type_name VARCHAR2(100),
	   stag_stat_type_desc VARCHAR2(1000)'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.729 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_stat_type_t.sql executed
2014-11-20 16:37:52.729 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_stat_t.sql delimiter 
2014-11-20 16:37:52.730 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_stat'
    , 'stag_object_id NUMBER,
	   stag_partition NUMBER,
	   stag_load_id NUMBER,
	   stag_stat_type_id NUMBER,
	   stag_stat_value NUMBER,
	   stag_stat_error NUMBER,
	   stag_stat_sid NUMBER'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.730 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_stat'
    , 'stag_object_id NUMBER,
	   stag_partition NUMBER,
	   stag_load_id NUMBER,
	   stag_stat_type_id NUMBER,
	   stag_stat_value NUMBER,
	   stag_stat_error NUMBER,
	   stag_stat_sid NUMBER'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.900 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_stat_t.sql executed
2014-11-20 16:37:52.901 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_size_t.sql delimiter 
2014-11-20 16:37:52.901 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
   p#frm#ddls.prc_create_entity (
      'p#frm#'
    , 'stag_size'
    , 'stag_object_id NUMBER,
       stag_table_name VARCHAR2(100),
       stag_num_rows NUMBER,
       stag_bytes NUMBER'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:52.901 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
   dwhutl_ddls.prc_create_entity (
      'dwhutl_'
    , 'stag_size'
    , 'stag_object_id NUMBER,
       stag_table_name VARCHAR2(100),
       stag_num_rows NUMBER,
       stag_bytes NUMBER'
    , 'DROP'
    , TRUE
    , TRUE
   );
END;
2014-11-20 16:37:53.048 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_size_t.sql executed
2014-11-20 16:37:53.048 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_size_uk.sql delimiter ;
2014-11-20 16:37:53.049 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
ALTER TABLE p#frm#stag_size_t ADD (CONSTRAINT p#frm#stag_size_uk UNIQUE (stag_table_name, create_date));
2014-11-20 16:37:53.049 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
ALTER TABLE dwhutl_stag_size_t ADD (CONSTRAINT dwhutl_stag_size_uk UNIQUE (stag_table_name, create_date));
2014-11-20 16:37:53.081 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_size_uk.sql executed
2014-11-20 16:37:53.081 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_column_v.sql delimiter ;
2014-11-20 16:37:53.082 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_column_v
AS
     SELECT sc.stag_source_id
          , sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , ob.stag_source_nk_flag
          , co.stag_column_id
          , co.stag_column_pos
          , co.stag_column_name
          , co.stag_column_name_map
          , co.stag_column_comment
          , co.stag_column_def
          , co.stag_column_def_src
          , co.stag_column_nk_pos
          , co.stag_column_hist_flag
          , co.stag_column_edwh_flag
          , co.update_date
       FROM p#frm#stag_column_t co
          , p#frm#stag_object_t ob
          , p#frm#stag_source_t sc
      WHERE ob.stag_object_id = co.stag_object_id
        AND ob.stag_source_id = sc.stag_source_id
   ORDER BY sc.stag_source_code
          , ob.stag_object_name
          , co.stag_column_pos;
2014-11-20 16:37:53.082 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_column_v
AS
     SELECT sc.stag_source_id
          , sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , ob.stag_source_nk_flag
          , co.stag_column_id
          , co.stag_column_pos
          , co.stag_column_name
          , co.stag_column_name_map
          , co.stag_column_comment
          , co.stag_column_def
          , co.stag_column_def_src
          , co.stag_column_nk_pos
          , co.stag_column_hist_flag
          , co.stag_column_edwh_flag
          , co.update_date
       FROM dwhutl_stag_column_t co
          , dwhutl_stag_object_t ob
          , dwhutl_stag_source_t sc
      WHERE ob.stag_object_id = co.stag_object_id
        AND ob.stag_source_id = sc.stag_source_id
   ORDER BY sc.stag_source_code
          , ob.stag_object_name
          , co.stag_column_pos;
2014-11-20 16:37:53.149 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_column_v.sql executed
2014-11-20 16:37:53.150 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_column_check_v.sql delimiter ;
2014-11-20 16:37:53.150 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_column_check_v
AS
     SELECT sc.stag_source_id
          , sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , ob.stag_source_nk_flag
          , co.stag_column_id
          , co.stag_column_name
          , co.stag_column_name_map
          , co.stag_column_comment
          , co.stag_column_edwh_flag
          , co.stag_column_stag_pos
          , co.stag_column_stag_def
          , co.stag_column_stag_nk_pos
          , co.stag_column_src_pos
          , co.stag_column_src_def
          , co.stag_column_src_nk_pos
          , co.update_date
       FROM (SELECT NVL (c.stag_object_id, k.stag_object_id) AS stag_object_id
                  , c.stag_column_id
                  , NVL (c.stag_column_name, k.stag_column_name) AS stag_column_name
                  , c.stag_column_name_map
                  , c.stag_column_comment
                  , c.stag_column_edwh_flag
                  , c.stag_column_pos AS stag_column_stag_pos
                  , c.stag_column_def AS stag_column_stag_def
                  , c.stag_column_nk_pos AS stag_column_stag_nk_pos
                  , k.stag_column_pos AS stag_column_src_pos
                  , k.stag_column_def AS stag_column_src_def
                  , k.stag_column_nk_pos AS stag_column_src_nk_pos
                  , c.update_date
               FROM p#frm#stag_column_check_t k
                    FULL OUTER JOIN p#frm#stag_column_t c
                       ON c.stag_object_id = k.stag_object_id
                      AND c.stag_column_name = k.stag_column_name) co
          , p#frm#stag_object_t ob
          , p#frm#stag_source_t sc
      WHERE ob.stag_object_id = co.stag_object_id
        AND ob.stag_source_id = sc.stag_source_id
   ORDER BY sc.stag_source_code
          , ob.stag_object_name
          , NVL (co.stag_column_stag_pos, co.stag_column_src_pos);
2014-11-20 16:37:53.151 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_column_check_v
AS
     SELECT sc.stag_source_id
          , sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , ob.stag_source_nk_flag
          , co.stag_column_id
          , co.stag_column_name
          , co.stag_column_name_map
          , co.stag_column_comment
          , co.stag_column_edwh_flag
          , co.stag_column_stag_pos
          , co.stag_column_stag_def
          , co.stag_column_stag_nk_pos
          , co.stag_column_src_pos
          , co.stag_column_src_def
          , co.stag_column_src_nk_pos
          , co.update_date
       FROM (SELECT NVL (c.stag_object_id, k.stag_object_id) AS stag_object_id
                  , c.stag_column_id
                  , NVL (c.stag_column_name, k.stag_column_name) AS stag_column_name
                  , c.stag_column_name_map
                  , c.stag_column_comment
                  , c.stag_column_edwh_flag
                  , c.stag_column_pos AS stag_column_stag_pos
                  , c.stag_column_def AS stag_column_stag_def
                  , c.stag_column_nk_pos AS stag_column_stag_nk_pos
                  , k.stag_column_pos AS stag_column_src_pos
                  , k.stag_column_def AS stag_column_src_def
                  , k.stag_column_nk_pos AS stag_column_src_nk_pos
                  , c.update_date
               FROM dwhutl_stag_column_check_t k
                    FULL OUTER JOIN dwhutl_stag_column_t c
                       ON c.stag_object_id = k.stag_object_id
                      AND c.stag_column_name = k.stag_column_name) co
          , dwhutl_stag_object_t ob
          , dwhutl_stag_source_t sc
      WHERE ob.stag_object_id = co.stag_object_id
        AND ob.stag_source_id = sc.stag_source_id
   ORDER BY sc.stag_source_code
          , ob.stag_object_name
          , NVL (co.stag_column_stag_pos, co.stag_column_src_pos);
2014-11-20 16:37:53.182 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_column_check_v.sql executed
2014-11-20 16:37:53.183 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_object_v.sql delimiter ;
2014-11-20 16:37:53.184 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_object_v
AS
     SELECT sc.stag_source_id
          , sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , ob.stag_object_comment
          , ob.stag_object_root
          , ob.stag_src_table_name
          , ob.stag_stage_table_name
          , ob.stag_hist_table_name
          , ob.stag_hist_nk_name
          , ob.stag_dupl_table_name
          , ob.stag_diff_table_name
          , ob.stag_diff_nk_name
          , ob.stag_hist_view_name
          , ob.stag_hist_fbda_name
          , ob.stag_package_name
          , ob.stag_source_nk_flag
          , ob.stag_parallel_degree
          , ob.stag_partition_clause
          , ob.stag_filter_clause
          , ob.stag_fbda_flag
          , ob.update_date
       FROM p#frm#stag_object_t ob
          , p#frm#stag_source_t sc
      WHERE ob.stag_source_id = sc.stag_source_id
   ORDER BY sc.stag_source_code
          , ob.stag_object_name;
2014-11-20 16:37:53.184 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_object_v
AS
     SELECT sc.stag_source_id
          , sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , ob.stag_object_comment
          , ob.stag_object_root
          , ob.stag_src_table_name
          , ob.stag_stage_table_name
          , ob.stag_hist_table_name
          , ob.stag_hist_nk_name
          , ob.stag_dupl_table_name
          , ob.stag_diff_table_name
          , ob.stag_diff_nk_name
          , ob.stag_hist_view_name
          , ob.stag_hist_fbda_name
          , ob.stag_package_name
          , ob.stag_source_nk_flag
          , ob.stag_parallel_degree
          , ob.stag_partition_clause
          , ob.stag_filter_clause
          , ob.stag_fbda_flag
          , ob.update_date
       FROM dwhutl_stag_object_t ob
          , dwhutl_stag_source_t sc
      WHERE ob.stag_source_id = sc.stag_source_id
   ORDER BY sc.stag_source_code
          , ob.stag_object_name;
2014-11-20 16:37:53.216 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_object_v.sql executed
2014-11-20 16:37:53.216 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_queue_object_v.sql delimiter ;
2014-11-20 16:37:53.217 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_queue_object_v
AS
     SELECT q.stag_queue_code
          , qo.stag_object_id
          , s.stag_source_code
          , o.stag_object_name
          , qo.etl_step_status
          , qo.etl_step_session_id
          , qo.etl_step_begin_date AS step_begin
          , qo.etl_step_end_date AS step_finish
          , NUMTODSINTERVAL (
                 qo.etl_step_end_date
               - qo.etl_step_begin_date
             , 'day'
            )
               step_duration
       FROM p#frm#stag_queue_object_t qo
          , p#frm#stag_queue_t q
          , p#frm#stag_object_t o
          , p#frm#stag_source_t s
      WHERE qo.stag_queue_id = q.stag_queue_id
        AND qo.stag_object_id = o.stag_object_id
        AND o.stag_source_id = s.stag_source_id
   ORDER BY qo.etl_step_begin_date DESC NULLS FIRST
          , qo.etl_step_end_date DESC NULLS FIRST
          , qo.stag_queue_id DESC
          , qo.stag_queue_object_id;
2014-11-20 16:37:53.217 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_queue_object_v
AS
     SELECT q.stag_queue_code
          , qo.stag_object_id
          , s.stag_source_code
          , o.stag_object_name
          , qo.etl_step_status
          , qo.etl_step_session_id
          , qo.etl_step_begin_date AS step_begin
          , qo.etl_step_end_date AS step_finish
          , NUMTODSINTERVAL (
                 qo.etl_step_end_date
               - qo.etl_step_begin_date
             , 'day'
            )
               step_duration
       FROM dwhutl_stag_queue_object_t qo
          , dwhutl_stag_queue_t q
          , dwhutl_stag_object_t o
          , dwhutl_stag_source_t s
      WHERE qo.stag_queue_id = q.stag_queue_id
        AND qo.stag_object_id = o.stag_object_id
        AND o.stag_source_id = s.stag_source_id
   ORDER BY qo.etl_step_begin_date DESC NULLS FIRST
          , qo.etl_step_end_date DESC NULLS FIRST
          , qo.stag_queue_id DESC
          , qo.stag_queue_object_id;
2014-11-20 16:37:53.232 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_queue_object_v.sql executed
2014-11-20 16:37:53.233 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_queue_v.sql delimiter ;
2014-11-20 16:37:53.234 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_queue_v
AS
   SELECT stag_queue_id
        , stag_queue_code
        , stag_queue_name
     FROM p#frm#stag_queue_t q;
2014-11-20 16:37:53.234 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_queue_v
AS
   SELECT stag_queue_id
        , stag_queue_code
        , stag_queue_name
     FROM dwhutl_stag_queue_t q;
2014-11-20 16:37:53.245 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_queue_v.sql executed
2014-11-20 16:37:53.245 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_source_db_v.sql delimiter ;
2014-11-20 16:37:53.246 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_source_db_v
AS
     SELECT sc.stag_source_id
          , sc.stag_source_code
          , db.stag_source_db_link
          , db.stag_source_db_jdbcname
          , db.stag_source_owner
          , db.stag_distribution_code
          , db.stag_source_bodi_ds
          , db.update_date
       FROM p#frm#stag_source_db_t db
          , p#frm#stag_source_t sc
      WHERE sc.stag_source_id = db.stag_source_id
   ORDER BY sc.stag_source_code;
2014-11-20 16:37:53.246 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_source_db_v
AS
     SELECT sc.stag_source_id
          , sc.stag_source_code
          , db.stag_source_db_link
          , db.stag_source_db_jdbcname
          , db.stag_source_owner
          , db.stag_distribution_code
          , db.stag_source_bodi_ds
          , db.update_date
       FROM dwhutl_stag_source_db_t db
          , dwhutl_stag_source_t sc
      WHERE sc.stag_source_id = db.stag_source_id
   ORDER BY sc.stag_source_code;
2014-11-20 16:37:53.258 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_source_db_v.sql executed
2014-11-20 16:37:53.258 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_source_v.sql delimiter ;
2014-11-20 16:37:53.259 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_source_v
AS
   SELECT stag_source_id
        , stag_source_code
        , stag_source_name
        , stag_source_prefix
        , stag_owner
        , stag_ts_stage_data
        , stag_ts_stage_indx
        , stag_ts_hist_data
        , stag_ts_hist_indx
        , stag_fb_archive
        , stag_bodi_ds
        , stag_source_bodi_ds
        , update_date
     FROM p#frm#stag_source_t;
2014-11-20 16:37:53.259 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_source_v
AS
   SELECT stag_source_id
        , stag_source_code
        , stag_source_name
        , stag_source_prefix
        , stag_owner
        , stag_ts_stage_data
        , stag_ts_stage_indx
        , stag_ts_hist_data
        , stag_ts_hist_indx
        , stag_fb_archive
        , stag_bodi_ds
        , stag_source_bodi_ds
        , update_date
     FROM dwhutl_stag_source_t;
2014-11-20 16:37:53.275 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_source_v.sql executed
2014-11-20 16:37:53.275 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_stat_last_v.sql delimiter ;
2014-11-20 16:37:53.276 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_stat_last_v
AS
     SELECT stage_source
          , stage_object
          , MIN (first_date) AS first_begin_date
          , MAX (CASE
                    WHEN stage_id = 2
                     AND stage_action = 'ANL' THEN
                       last_date
                 END)
               AS last_complete_date
          , SUM (CASE
                    WHEN stage_id = 1
                     AND stage_action = 'INS' THEN
                       stat_value
                    ELSE
                       0
                 END)
               AS stg1_insert_cnt
          , SUM (CASE
                    WHEN stage_id = 1
                     AND stage_action = 'INS' THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg1_insert_duration
          , SUM (CASE
                    WHEN stage_id = 1
                     AND stage_action = 'ANL' THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg1_analyze_duration
          , SUM (CASE
                    WHEN stage_id = 1 THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg1_duration
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action = 'IDT' THEN
                       stat_value
                    ELSE
                       0
                 END)
               AS stg2_insert_cnt
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action = 'IDT' THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg2_insert_duration
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action IN ('MDT', 'MDE', 'FDI', 'FUP', 'FIN') THEN
                       stat_value
                    ELSE
                       0
                 END)
               AS stg2_delta_cnt
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action IN ('MDT', 'MDE', 'FDI', 'FUP', 'FIN') THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg2_delta_duration
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action = 'ANL' THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg2_analyze_duration
          , SUM (CASE
                    WHEN stage_id = 2 THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg2_duration
       FROM (  SELECT sc.stag_source_code AS stage_source
                    , ob.stag_object_name AS stage_object
                    , ty.stag_stat_type_code AS stage_action
                    , st.stag_id AS stage_id
                    , SUM (st.stag_stat_value) AS stat_value
                    , ROUND (  (  MAX (st.update_date)
                                - MIN (st.create_date))
                             * 86400)
                         AS stat_duration
                    , MAX (st.update_date) AS last_date
                    , MIN (st.create_date) AS first_date
                 FROM (SELECT s.*
                            , ROW_NUMBER () OVER (PARTITION BY stag_object_id, stag_partition, stag_stat_type_id, stag_id ORDER BY create_date DESC) AS stat_rank
                         FROM p#frm#stag_stat_t s) st
                    , p#frm#stag_stat_type_t ty
                    , p#frm#stag_object_t ob
                    , p#frm#stag_source_t sc
                WHERE st.stag_stat_type_id = ty.stag_stat_type_id
                  AND st.stag_object_id = ob.stag_object_id
                  AND ob.stag_source_id = sc.stag_source_id
                  AND st.stag_stat_value IS NOT NULL
                  AND st.stat_rank = 1
             GROUP BY sc.stag_source_code
                    , ob.stag_object_name
                    , ty.stag_stat_type_code
                    , st.stag_id)
   GROUP BY stage_source
          , stage_object;
2014-11-20 16:37:53.276 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_stat_last_v
AS
     SELECT stage_source
          , stage_object
          , MIN (first_date) AS first_begin_date
          , MAX (CASE
                    WHEN stage_id = 2
                     AND stage_action = 'ANL' THEN
                       last_date
                 END)
               AS last_complete_date
          , SUM (CASE
                    WHEN stage_id = 1
                     AND stage_action = 'INS' THEN
                       stat_value
                    ELSE
                       0
                 END)
               AS stg1_insert_cnt
          , SUM (CASE
                    WHEN stage_id = 1
                     AND stage_action = 'INS' THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg1_insert_duration
          , SUM (CASE
                    WHEN stage_id = 1
                     AND stage_action = 'ANL' THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg1_analyze_duration
          , SUM (CASE
                    WHEN stage_id = 1 THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg1_duration
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action = 'IDT' THEN
                       stat_value
                    ELSE
                       0
                 END)
               AS stg2_insert_cnt
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action = 'IDT' THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg2_insert_duration
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action IN ('MDT', 'MDE', 'FDI', 'FUP', 'FIN') THEN
                       stat_value
                    ELSE
                       0
                 END)
               AS stg2_delta_cnt
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action IN ('MDT', 'MDE', 'FDI', 'FUP', 'FIN') THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg2_delta_duration
          , SUM (CASE
                    WHEN stage_id = 2
                     AND stage_action = 'ANL' THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg2_analyze_duration
          , SUM (CASE
                    WHEN stage_id = 2 THEN
                       stat_duration
                    ELSE
                       0
                 END)
               AS stg2_duration
       FROM (  SELECT sc.stag_source_code AS stage_source
                    , ob.stag_object_name AS stage_object
                    , ty.stag_stat_type_code AS stage_action
                    , st.stag_id AS stage_id
                    , SUM (st.stag_stat_value) AS stat_value
                    , ROUND (  (  MAX (st.update_date)
                                - MIN (st.create_date))
                             * 86400)
                         AS stat_duration
                    , MAX (st.update_date) AS last_date
                    , MIN (st.create_date) AS first_date
                 FROM (SELECT s.*
                            , ROW_NUMBER () OVER (PARTITION BY stag_object_id, stag_partition, stag_stat_type_id, stag_id ORDER BY create_date DESC) AS stat_rank
                         FROM dwhutl_stag_stat_t s) st
                    , dwhutl_stag_stat_type_t ty
                    , dwhutl_stag_object_t ob
                    , dwhutl_stag_source_t sc
                WHERE st.stag_stat_type_id = ty.stag_stat_type_id
                  AND st.stag_object_id = ob.stag_object_id
                  AND ob.stag_source_id = sc.stag_source_id
                  AND st.stag_stat_value IS NOT NULL
                  AND st.stat_rank = 1
             GROUP BY sc.stag_source_code
                    , ob.stag_object_name
                    , ty.stag_stat_type_code
                    , st.stag_id)
   GROUP BY stage_source
          , stage_object;
2014-11-20 16:37:53.288 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_stat_last_v.sql executed
2014-11-20 16:37:53.289 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_stat_v.sql delimiter ;
2014-11-20 16:37:53.290 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_stat_v
AS
     SELECT st.stag_stat_id
          , sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , ob.stag_package_name
          , st.stag_partition
          , st.stag_load_id
          , ty.stag_stat_type_name
          , st.stag_stat_value
          , st.stag_stat_error
          , st.create_date AS stat_start
          , st.update_date AS stat_finish
          , NUMTODSINTERVAL (
               ROUND (  (  st.update_date
                         - st.create_date)
                      * 86400)
             , 'second'
            )
               AS stat_duration
          , st.stag_stat_sid
       FROM p#frm#stag_stat_t st
          , p#frm#stag_stat_type_t ty
          , p#frm#stag_object_t ob
          , p#frm#stag_source_t sc
      WHERE st.stag_stat_type_id = ty.stag_stat_type_id
        AND st.stag_object_id = ob.stag_object_id
        AND ob.stag_source_id = sc.stag_source_id
   ORDER BY st.update_date DESC
          , st.create_date DESC
          , st.stag_stat_id;
2014-11-20 16:37:53.290 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_stat_v
AS
     SELECT st.stag_stat_id
          , sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , ob.stag_package_name
          , st.stag_partition
          , st.stag_load_id
          , ty.stag_stat_type_name
          , st.stag_stat_value
          , st.stag_stat_error
          , st.create_date AS stat_start
          , st.update_date AS stat_finish
          , NUMTODSINTERVAL (
               ROUND (  (  st.update_date
                         - st.create_date)
                      * 86400)
             , 'second'
            )
               AS stat_duration
          , st.stag_stat_sid
       FROM dwhutl_stag_stat_t st
          , dwhutl_stag_stat_type_t ty
          , dwhutl_stag_object_t ob
          , dwhutl_stag_source_t sc
      WHERE st.stag_stat_type_id = ty.stag_stat_type_id
        AND st.stag_object_id = ob.stag_object_id
        AND ob.stag_source_id = sc.stag_source_id
   ORDER BY st.update_date DESC
          , st.create_date DESC
          , st.stag_stat_id;
2014-11-20 16:37:53.354 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_stat_v.sql executed
2014-11-20 16:37:53.355 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_size_v.sql delimiter ;
2014-11-20 16:37:53.356 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE VIEW p#frm#stag_size_v
AS
     SELECT sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , si.stag_table_name
          , si.stag_num_rows
          , si.stag_bytes
          , si.create_date
       FROM p#frm#stag_size_t si
          , p#frm#stag_object_t ob
          , p#frm#stag_source_t sc
      WHERE si.stag_object_id = ob.stag_object_id
        AND ob.stag_source_id = sc.stag_source_id
   ORDER BY si.create_date DESC;
2014-11-20 16:37:53.356 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE VIEW dwhutl_stag_size_v
AS
     SELECT sc.stag_source_code
          , ob.stag_object_id
          , ob.stag_object_name
          , si.stag_table_name
          , si.stag_num_rows
          , si.stag_bytes
          , si.create_date
       FROM dwhutl_stag_size_t si
          , dwhutl_stag_object_t ob
          , dwhutl_stag_source_t sc
      WHERE si.stag_object_id = ob.stag_object_id
        AND ob.stag_source_id = sc.stag_source_id
   ORDER BY si.create_date DESC;
2014-11-20 16:37:53.506 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script views/stag_size_v.sql executed
2014-11-20 16:37:53.507 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_param/stag_param-def.sql delimiter 
2014-11-20 16:37:53.508 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE p#frm#stag_param
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version         CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url             CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version                  VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                      VARCHAR2 (1024);

   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * String type
   */
   SUBTYPE t_string IS VARCHAR2 (32767);

   /**
    * Default namesand prefixes
    */
   c_vc_suffix_tab_source          t_object_name := 'SRC';
   c_vc_suffix_tab_stag            t_object_name := 'STG';
   c_vc_suffix_tab_hist            t_object_name := 'HST';
   c_vc_suffix_tab_diff            t_object_name := 'DIF';
   c_vc_suffix_tab_dupl            t_object_name := 'DUP';
   c_vc_suffix_nk_diff             t_object_name := 'DNK';
   c_vc_suffix_nk_hist             t_object_name := 'HNK';
   c_vc_suffix_view_fbda           t_object_name := 'H';
   c_vc_suffix_package             t_object_name := 'PKG';
   c_vc_prefix_partition           t_object_name := 'P';
   --
   c_vc_procedure_trunc_stage      t_object_name := 'prc_trunc_stage';
   c_vc_procedure_trunc_diff       t_object_name := 'prc_trunc_diff';
   c_vc_procedure_load_init        t_object_name := 'prc_load_init';
   c_vc_procedure_load_stage       t_object_name := 'prc_load_stage';
   c_vc_procedure_load_stage_p     t_object_name := 'prc_load_stage_p';
   c_vc_procedure_load_diff        t_object_name := 'prc_load_diff';
   c_vc_procedure_load_diff_incr   t_object_name := 'prc_load_diff_incr';
   c_vc_procedure_load_hist        t_object_name := 'prc_load_hist';
   c_vc_procedure_wrapper          t_object_name := 'prc_load';
   c_vc_procedure_wrapper_incr     t_object_name := 'prc_load_incr';
   --
   c_vc_column_stage_sk            t_object_name := 'DWH_SK';
   c_vc_column_valid_from          t_object_name := 'DWH_VALID_FROM';
   c_vc_column_valid_to            t_object_name := 'DWH_VALID_TO';
   c_vc_column_dml_op              t_object_name := 'DWH_OPERATION';
   c_vc_column_source_db           t_object_name := 'DWH_SOURCE_ID';
   c_vc_column_partition           t_object_name := 'DWH_PARTITION_ID';
   c_vc_column_system_src          t_object_name := 'DWH_SYSTEM';
   c_vc_column_active_version      t_object_name := 'DWH_ACTIVE';
   /**
    * Grantees
    */
   c_vc_list_grantee               t_string := 'DWHCORE';
END p#frm#stag_param;
2014-11-20 16:37:53.508 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE dwhutl_stag_param
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version         CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url             CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version                  VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                      VARCHAR2 (1024);

   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * String type
   */
   SUBTYPE t_string IS VARCHAR2 (32767);

   /**
    * Default namesand prefixes
    */
   c_vc_suffix_tab_source          t_object_name := 'SRC';
   c_vc_suffix_tab_stag            t_object_name := 'STG';
   c_vc_suffix_tab_hist            t_object_name := 'HST';
   c_vc_suffix_tab_diff            t_object_name := 'DIF';
   c_vc_suffix_tab_dupl            t_object_name := 'DUP';
   c_vc_suffix_nk_diff             t_object_name := 'DNK';
   c_vc_suffix_nk_hist             t_object_name := 'HNK';
   c_vc_suffix_view_fbda           t_object_name := 'H';
   c_vc_suffix_package             t_object_name := 'PKG';
   c_vc_prefix_partition           t_object_name := 'P';
   --
   c_vc_procedure_trunc_stage      t_object_name := 'prc_trunc_stage';
   c_vc_procedure_trunc_diff       t_object_name := 'prc_trunc_diff';
   c_vc_procedure_load_init        t_object_name := 'prc_load_init';
   c_vc_procedure_load_stage       t_object_name := 'prc_load_stage';
   c_vc_procedure_load_stage_p     t_object_name := 'prc_load_stage_p';
   c_vc_procedure_load_diff        t_object_name := 'prc_load_diff';
   c_vc_procedure_load_diff_incr   t_object_name := 'prc_load_diff_incr';
   c_vc_procedure_load_hist        t_object_name := 'prc_load_hist';
   c_vc_procedure_wrapper          t_object_name := 'prc_load';
   c_vc_procedure_wrapper_incr     t_object_name := 'prc_load_incr';
   --
   c_vc_column_stage_sk            t_object_name := 'DWH_SK';
   c_vc_column_valid_from          t_object_name := 'DWH_VALID_FROM';
   c_vc_column_valid_to            t_object_name := 'DWH_VALID_TO';
   c_vc_column_dml_op              t_object_name := 'DWH_OPERATION';
   c_vc_column_source_db           t_object_name := 'DWH_SOURCE_ID';
   c_vc_column_partition           t_object_name := 'DWH_PARTITION_ID';
   c_vc_column_system_src          t_object_name := 'DWH_SYSTEM';
   c_vc_column_active_version      t_object_name := 'DWH_ACTIVE';
   /**
    * Grantees
    */
   c_vc_list_grantee               t_string := 'DWHCORE';
END dwhutl_stag_param;
2014-11-20 16:37:53.555 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_param/stag_param-def.sql executed
2014-11-20 16:37:53.555 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_stat/stag_stat-def.sql delimiter 
2014-11-20 16:37:53.556 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE p#frm#stag_stat
   AUTHID CURRENT_USER
AS
   /**
   * Package containing tools to collect statistics and size of STAGE tables
   *
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   /**
    * Set global load id
    */
   --PROCEDURE prc_set_load_id;
   /**
    * Create a synonym for a given object
    *
    * @param p_vc_source_code       Source name
    * @param p_vc_object_name       Object name
    * @param p_n_partition          Table partition
    * @param p_vc_stat_type_code    Statistics type
    */
   FUNCTION prc_stat_begin (
      p_vc_source_code       VARCHAR2
    , p_vc_object_name       VARCHAR2
    , p_n_partition          NUMBER DEFAULT NULL
    , p_vc_stat_type_code    VARCHAR2 DEFAULT NULL
   )
      RETURN NUMBER;

   PROCEDURE prc_stat_end (
      p_n_stat_id       NUMBER
    , p_n_stat_value    NUMBER DEFAULT 0
    , p_n_stat_error    NUMBER DEFAULT 0
   );

   PROCEDURE prc_stat_purge;

   PROCEDURE prc_size_store (
      p_vc_source_code    VARCHAR2
    , p_vc_object_name    VARCHAR2
    , p_vc_table_name     VARCHAR2
   );
END p#frm#stag_stat;
2014-11-20 16:37:53.556 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE dwhutl_stag_stat
   AUTHID CURRENT_USER
AS
   /**
   * Package containing tools to collect statistics and size of STAGE tables
   *
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   /**
    * Set global load id
    */
   --PROCEDURE prc_set_load_id;
   /**
    * Create a synonym for a given object
    *
    * @param p_vc_source_code       Source name
    * @param p_vc_object_name       Object name
    * @param p_n_partition          Table partition
    * @param p_vc_stat_type_code    Statistics type
    */
   FUNCTION prc_stat_begin (
      p_vc_source_code       VARCHAR2
    , p_vc_object_name       VARCHAR2
    , p_n_partition          NUMBER DEFAULT NULL
    , p_vc_stat_type_code    VARCHAR2 DEFAULT NULL
   )
      RETURN NUMBER;

   PROCEDURE prc_stat_end (
      p_n_stat_id       NUMBER
    , p_n_stat_value    NUMBER DEFAULT 0
    , p_n_stat_error    NUMBER DEFAULT 0
   );

   PROCEDURE prc_stat_purge;

   PROCEDURE prc_size_store (
      p_vc_source_code    VARCHAR2
    , p_vc_object_name    VARCHAR2
    , p_vc_table_name     VARCHAR2
   );
END dwhutl_stag_stat;
2014-11-20 16:37:53.563 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_stat/stag_stat-def.sql executed
2014-11-20 16:37:53.563 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_stat/stag_stat-impl.sql delimiter 
2014-11-20 16:37:53.564 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE BODY p#frm#stag_stat
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   FUNCTION prc_stat_begin (
      p_vc_source_code       VARCHAR2
    , p_vc_object_name       VARCHAR2
    , p_n_partition          NUMBER DEFAULT NULL
    , p_vc_stat_type_code    VARCHAR2 DEFAULT NULL
   )
      RETURN NUMBER
   IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      l_n_stat_type_id   NUMBER;
      l_n_object_id      NUMBER;
      l_n_result         NUMBER;
      l_n_load_id        NUMBER;
   BEGIN
      BEGIN
         /*l_n_load_id    := TO_NUMBER (pkg_utl_parameter.get_parameter ('STAGE_LOAD_ID'
                                                                     , 'STAGE'
                                                                     , 'STAGE'
                                                                      ));*/
         NULL;
      EXCEPTION
         WHEN OTHERS THEN
            NULL;
      END;

      DBMS_APPLICATION_INFO.set_module (
            'OBJECT '
         || p_vc_object_name
       ,    'STAGE PART'
         || p_n_partition
         || ' '
         || p_vc_stat_type_code
      );

      SELECT MIN (stag_object_id)
        INTO l_n_object_id
        FROM p#frm#stag_source_t s
           , p#frm#stag_object_t o
       WHERE s.stag_source_id = o.stag_source_id
         AND s.stag_source_code = p_vc_source_code
         AND o.stag_object_name = p_vc_object_name;

      SELECT MIN (stag_stat_type_id)
        INTO l_n_stat_type_id
        FROM p#frm#stag_stat_type_t
       WHERE stag_stat_type_code = p_vc_stat_type_code;

      INSERT INTO p#frm#stag_stat_t (
                     stag_object_id
                   , stag_partition
                   , stag_load_id
                   , stag_stat_type_id
                   , stag_stat_sid
                  )
           VALUES (
                     l_n_object_id
                   , p_n_partition
                   , l_n_load_id
                   , l_n_stat_type_id
                   , TO_NUMBER (SYS_CONTEXT (
                                   'USERENV'
                                 , 'SESSIONID'
                                ))
                  )
        RETURNING stag_stat_id
             INTO l_n_result;

      COMMIT;
      RETURN l_n_result;
   END prc_stat_begin;

   PROCEDURE prc_stat_end (
      p_n_stat_id       NUMBER
    , p_n_stat_value    NUMBER DEFAULT 0
    , p_n_stat_error    NUMBER DEFAULT 0
   )
   IS
      PRAGMA AUTONOMOUS_TRANSACTION;
   BEGIN
      UPDATE p#frm#stag_stat_t
         SET stag_stat_value = p_n_stat_value
           , stag_stat_error = p_n_stat_error
       WHERE stag_stat_id = p_n_stat_id;

      COMMIT;
   END prc_stat_end;

   PROCEDURE prc_stat_purge
   IS
   BEGIN
      DELETE p#frm#stag_stat_t
       WHERE stag_stat_value IS NULL;

      COMMIT;
   END prc_stat_purge;

   PROCEDURE prc_size_store (
      p_vc_source_code    VARCHAR2
    , p_vc_object_name    VARCHAR2
    , p_vc_table_name     VARCHAR2
   )
   IS
   BEGIN
      INSERT INTO p#frm#stag_size_t (
                     stag_object_id
                   , stag_table_name
                   , stag_num_rows
                   , stag_bytes
                  )
           SELECT ob.stag_object_id
                , p_vc_table_name
                , tb.num_rows
                , SUM (sg.bytes)
             FROM p#frm#stag_object_t ob
                , p#frm#stag_source_t sr
                , user_tables tb
                , user_segments sg
            WHERE ob.stag_source_id = sr.stag_source_id
              AND sr.stag_source_code = p_vc_source_code
              AND ob.stag_object_name = p_vc_object_name
              AND tb.table_name = p_vc_table_name
              AND sg.segment_name = p_vc_table_name
         GROUP BY ob.stag_object_id
                , p_vc_table_name
                , tb.num_rows;

      COMMIT;
   END prc_size_store;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END p#frm#stag_stat;
2014-11-20 16:37:53.564 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE BODY dwhutl_stag_stat
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   FUNCTION prc_stat_begin (
      p_vc_source_code       VARCHAR2
    , p_vc_object_name       VARCHAR2
    , p_n_partition          NUMBER DEFAULT NULL
    , p_vc_stat_type_code    VARCHAR2 DEFAULT NULL
   )
      RETURN NUMBER
   IS
      PRAGMA AUTONOMOUS_TRANSACTION;
      l_n_stat_type_id   NUMBER;
      l_n_object_id      NUMBER;
      l_n_result         NUMBER;
      l_n_load_id        NUMBER;
   BEGIN
      BEGIN
         /*l_n_load_id    := TO_NUMBER (pkg_utl_parameter.get_parameter ('STAGE_LOAD_ID'
                                                                     , 'STAGE'
                                                                     , 'STAGE'
                                                                      ));*/
         NULL;
      EXCEPTION
         WHEN OTHERS THEN
            NULL;
      END;

      DBMS_APPLICATION_INFO.set_module (
            'OBJECT '
         || p_vc_object_name
       ,    'STAGE PART'
         || p_n_partition
         || ' '
         || p_vc_stat_type_code
      );

      SELECT MIN (stag_object_id)
        INTO l_n_object_id
        FROM dwhutl_stag_source_t s
           , dwhutl_stag_object_t o
       WHERE s.stag_source_id = o.stag_source_id
         AND s.stag_source_code = p_vc_source_code
         AND o.stag_object_name = p_vc_object_name;

      SELECT MIN (stag_stat_type_id)
        INTO l_n_stat_type_id
        FROM dwhutl_stag_stat_type_t
       WHERE stag_stat_type_code = p_vc_stat_type_code;

      INSERT INTO dwhutl_stag_stat_t (
                     stag_object_id
                   , stag_partition
                   , stag_load_id
                   , stag_stat_type_id
                   , stag_stat_sid
                  )
           VALUES (
                     l_n_object_id
                   , p_n_partition
                   , l_n_load_id
                   , l_n_stat_type_id
                   , TO_NUMBER (SYS_CONTEXT (
                                   'USERENV'
                                 , 'SESSIONID'
                                ))
                  )
        RETURNING stag_stat_id
             INTO l_n_result;

      COMMIT;
      RETURN l_n_result;
   END prc_stat_begin;

   PROCEDURE prc_stat_end (
      p_n_stat_id       NUMBER
    , p_n_stat_value    NUMBER DEFAULT 0
    , p_n_stat_error    NUMBER DEFAULT 0
   )
   IS
      PRAGMA AUTONOMOUS_TRANSACTION;
   BEGIN
      UPDATE dwhutl_stag_stat_t
         SET stag_stat_value = p_n_stat_value
           , stag_stat_error = p_n_stat_error
       WHERE stag_stat_id = p_n_stat_id;

      COMMIT;
   END prc_stat_end;

   PROCEDURE prc_stat_purge
   IS
   BEGIN
      DELETE dwhutl_stag_stat_t
       WHERE stag_stat_value IS NULL;

      COMMIT;
   END prc_stat_purge;

   PROCEDURE prc_size_store (
      p_vc_source_code    VARCHAR2
    , p_vc_object_name    VARCHAR2
    , p_vc_table_name     VARCHAR2
   )
   IS
   BEGIN
      INSERT INTO dwhutl_stag_size_t (
                     stag_object_id
                   , stag_table_name
                   , stag_num_rows
                   , stag_bytes
                  )
           SELECT ob.stag_object_id
                , p_vc_table_name
                , tb.num_rows
                , SUM (sg.bytes)
             FROM dwhutl_stag_object_t ob
                , dwhutl_stag_source_t sr
                , user_tables tb
                , user_segments sg
            WHERE ob.stag_source_id = sr.stag_source_id
              AND sr.stag_source_code = p_vc_source_code
              AND ob.stag_object_name = p_vc_object_name
              AND tb.table_name = p_vc_table_name
              AND sg.segment_name = p_vc_table_name
         GROUP BY ob.stag_object_id
                , p_vc_table_name
                , tb.num_rows;

      COMMIT;
   END prc_size_store;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END dwhutl_stag_stat;
2014-11-20 16:37:53.605 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_stat/stag_stat-impl.sql executed
2014-11-20 16:37:53.605 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_meta/stag_meta-def.sql delimiter 
2014-11-20 16:37:53.607 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE p#frm#stag_meta
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   FUNCTION fct_get_column_list (
      p_vc_object_id     IN NUMBER
    , p_vc_column_type   IN VARCHAR2
    , p_vc_list_type     IN VARCHAR2
    , p_vc_alias1        IN VARCHAR2 DEFAULT NULL
    , p_vc_alias2        IN VARCHAR2 DEFAULT NULL
   )
      RETURN VARCHAR2;

   PROCEDURE prc_stat_type_ins (
      p_vc_type_code   IN VARCHAR2
    , p_vc_type_name   IN VARCHAR2
    , p_vc_type_desc   IN VARCHAR2
   );

   PROCEDURE prc_source_ins (
      p_vc_source_code      IN VARCHAR2
    , p_vc_source_prefix    IN VARCHAR2
    , p_vc_source_name      IN VARCHAR2
    , p_vc_stage_owner      IN VARCHAR2
    , p_vc_ts_stg1_data     IN VARCHAR2
    , p_vc_ts_stg1_indx     IN VARCHAR2
    , p_vc_ts_stg2_data     IN VARCHAR2
    , p_vc_ts_stg2_indx     IN VARCHAR2
    , p_vc_fb_archive       IN VARCHAR2 DEFAULT NULL
    , p_vc_bodi_ds          IN VARCHAR2 DEFAULT NULL
    , p_vc_source_bodi_ds   IN VARCHAR2 DEFAULT NULL
   );

   PROCEDURE prc_source_del (
      p_vc_source_code   IN VARCHAR2
    , p_b_cascade        IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_source_db_ins (
      p_vc_source_code          IN VARCHAR2
    , p_vc_distribution_code    IN VARCHAR2
    , p_vc_source_db_link       IN VARCHAR2
    , p_vc_source_owner         IN VARCHAR2
    , p_vc_source_db_jdbcname   IN VARCHAR2 DEFAULT NULL
    , p_vc_source_bodi_ds       IN VARCHAR2 DEFAULT NULL
   );

   PROCEDURE prc_object_ins (
      p_vc_source_code        IN VARCHAR2
    , p_vc_object_name        IN VARCHAR2
    , p_n_parallel_degree     IN NUMBER DEFAULT NULL
    , p_vc_filter_clause      IN VARCHAR2 DEFAULT NULL
    , p_vc_partition_clause   IN VARCHAR2 DEFAULT NULL
    , p_vc_hist_flag          IN NUMBER DEFAULT 1
    , p_vc_fbda_flag          IN NUMBER DEFAULT 0
    , p_vc_increment_buffer   IN NUMBER DEFAULT NULL
   );

   PROCEDURE prc_object_del (
      p_vc_source_code   IN VARCHAR2
    , p_vc_object_name   IN VARCHAR2
    , p_b_cascade        IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_column_ins (
      p_vc_source_code       IN VARCHAR2
    , p_vc_object_name       IN VARCHAR2
    , p_vc_column_name       IN VARCHAR2
    , p_vc_column_name_map   IN VARCHAR2 DEFAULT NULL
    , p_vc_column_def        IN VARCHAR2 DEFAULT NULL
    , p_n_column_pos         IN NUMBER DEFAULT NULL
    , p_n_column_nk_pos      IN NUMBER DEFAULT NULL
    , p_n_column_incr_flag   IN NUMBER DEFAULT 0
    , p_n_column_hist_flag   IN NUMBER DEFAULT 1
    , p_n_column_edwh_flag   IN NUMBER DEFAULT 1
   );

   PROCEDURE prc_column_del (
      p_vc_source_code   IN VARCHAR2
    , p_vc_object_name   IN VARCHAR2
    , p_vc_column_name   IN VARCHAR2
   );

   PROCEDURE prc_column_import_from_source (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   );

   PROCEDURE prc_column_import_from_stage (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   );

   PROCEDURE prc_check_column_changes (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   );

   PROCEDURE prc_set_object_properties;
END p#frm#stag_meta;
2014-11-20 16:37:53.607 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE dwhutl_stag_meta
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   FUNCTION fct_get_column_list (
      p_vc_object_id     IN NUMBER
    , p_vc_column_type   IN VARCHAR2
    , p_vc_list_type     IN VARCHAR2
    , p_vc_alias1        IN VARCHAR2 DEFAULT NULL
    , p_vc_alias2        IN VARCHAR2 DEFAULT NULL
   )
      RETURN VARCHAR2;

   PROCEDURE prc_stat_type_ins (
      p_vc_type_code   IN VARCHAR2
    , p_vc_type_name   IN VARCHAR2
    , p_vc_type_desc   IN VARCHAR2
   );

   PROCEDURE prc_source_ins (
      p_vc_source_code      IN VARCHAR2
    , p_vc_source_prefix    IN VARCHAR2
    , p_vc_source_name      IN VARCHAR2
    , p_vc_stage_owner      IN VARCHAR2
    , p_vc_ts_stg1_data     IN VARCHAR2
    , p_vc_ts_stg1_indx     IN VARCHAR2
    , p_vc_ts_stg2_data     IN VARCHAR2
    , p_vc_ts_stg2_indx     IN VARCHAR2
    , p_vc_fb_archive       IN VARCHAR2 DEFAULT NULL
    , p_vc_bodi_ds          IN VARCHAR2 DEFAULT NULL
    , p_vc_source_bodi_ds   IN VARCHAR2 DEFAULT NULL
   );

   PROCEDURE prc_source_del (
      p_vc_source_code   IN VARCHAR2
    , p_b_cascade        IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_source_db_ins (
      p_vc_source_code          IN VARCHAR2
    , p_vc_distribution_code    IN VARCHAR2
    , p_vc_source_db_link       IN VARCHAR2
    , p_vc_source_owner         IN VARCHAR2
    , p_vc_source_db_jdbcname   IN VARCHAR2 DEFAULT NULL
    , p_vc_source_bodi_ds       IN VARCHAR2 DEFAULT NULL
   );

   PROCEDURE prc_object_ins (
      p_vc_source_code        IN VARCHAR2
    , p_vc_object_name        IN VARCHAR2
    , p_n_parallel_degree     IN NUMBER DEFAULT NULL
    , p_vc_filter_clause      IN VARCHAR2 DEFAULT NULL
    , p_vc_partition_clause   IN VARCHAR2 DEFAULT NULL
    , p_vc_hist_flag          IN NUMBER DEFAULT 1
    , p_vc_fbda_flag          IN NUMBER DEFAULT 0
    , p_vc_increment_buffer   IN NUMBER DEFAULT NULL
   );

   PROCEDURE prc_object_del (
      p_vc_source_code   IN VARCHAR2
    , p_vc_object_name   IN VARCHAR2
    , p_b_cascade        IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_column_ins (
      p_vc_source_code       IN VARCHAR2
    , p_vc_object_name       IN VARCHAR2
    , p_vc_column_name       IN VARCHAR2
    , p_vc_column_name_map   IN VARCHAR2 DEFAULT NULL
    , p_vc_column_def        IN VARCHAR2 DEFAULT NULL
    , p_n_column_pos         IN NUMBER DEFAULT NULL
    , p_n_column_nk_pos      IN NUMBER DEFAULT NULL
    , p_n_column_incr_flag   IN NUMBER DEFAULT 0
    , p_n_column_hist_flag   IN NUMBER DEFAULT 1
    , p_n_column_edwh_flag   IN NUMBER DEFAULT 1
   );

   PROCEDURE prc_column_del (
      p_vc_source_code   IN VARCHAR2
    , p_vc_object_name   IN VARCHAR2
    , p_vc_column_name   IN VARCHAR2
   );

   PROCEDURE prc_column_import_from_source (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   );

   PROCEDURE prc_column_import_from_stage (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   );

   PROCEDURE prc_check_column_changes (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   );

   PROCEDURE prc_set_object_properties;
END dwhutl_stag_meta;
2014-11-20 16:37:53.615 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_meta/stag_meta-def.sql executed
2014-11-20 16:37:53.615 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_meta/stag_meta-impl.sql delimiter 
2014-11-20 16:37:53.617 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE BODY p#frm#stag_meta
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * String type
   */
   SUBTYPE t_string IS VARCHAR2 (32767);

   /**
   * Table containing dictionary values
   */
   TYPE r_column IS RECORD (
      stag_column_pos         NUMBER
    , stag_column_name        VARCHAR2 (4000)
    , stag_column_comment     VARCHAR2 (4000)
    , stag_column_type        VARCHAR2 (4000)
    , stag_column_length      VARCHAR2 (4000)
    , stag_column_precision   VARCHAR2 (4000)
    , stag_column_scale       VARCHAR2 (4000)
    , stag_column_def         VARCHAR2 (4000)
    , stag_column_nk_pos      NUMBER
   );

   TYPE t_t_columns IS TABLE OF r_column;

   l_t_columns      t_t_columns := NULL;
   /**
   * Other types
   */
   l_sql_col_def    CLOB := p#frm#dict.c_sql_col_def;
   l_n_pk_pos_max   NUMBER;

   FUNCTION fct_get_column_list (
      p_vc_object_id     IN NUMBER
    , p_vc_column_type   IN VARCHAR2
    , p_vc_list_type     IN VARCHAR2
    , p_vc_alias1        IN VARCHAR2 DEFAULT NULL
    , p_vc_alias2        IN VARCHAR2 DEFAULT NULL
   )
      RETURN VARCHAR2
   IS
      l_vc_list   t_string;
   BEGIN
      -- Build list of columns
      FOR r_col IN (  SELECT stag_column_name
                        FROM p#frm#stag_column_t
                       WHERE stag_object_id = p_vc_object_id
                         AND stag_column_edwh_flag = 1
                         AND (p_vc_column_type = 'ALL'
                           OR (p_vc_column_type = 'PK'
                           AND stag_column_nk_pos IS NOT NULL)
                           OR (p_vc_column_type = 'NPK'
                           AND stag_column_nk_pos IS NULL))
                    ORDER BY stag_column_nk_pos
                           , stag_column_pos) LOOP
         l_vc_list :=
               l_vc_list
            || CHR (10)
            || CASE p_vc_list_type
                  WHEN 'LIST_SIMPLE' THEN
                        r_col.stag_column_name
                     || ', '
                  WHEN 'LIST_ALIAS' THEN
                        p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ', '
                  WHEN 'SET_ALIAS' THEN
                        p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ' = '
                     || p_vc_alias2
                     || '.'
                     || r_col.stag_column_name
                     || ', '
                  WHEN 'LIST_NVL2' THEN
                        'NVL2 ('
                     || p_vc_alias1
                     || '.rowid, '
                     || p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ', '
                     || p_vc_alias2
                     || '.'
                     || r_col.stag_column_name
                     || ') AS '
                     || r_col.stag_column_name
                     || ', '
                  WHEN 'AND_NOTNULL' THEN
                        r_col.stag_column_name
                     || ' IS NOT NULL AND '
                  WHEN 'AND_ALIAS' THEN
                        p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ' = '
                     || p_vc_alias2
                     || '.'
                     || r_col.stag_column_name
                     || ' AND '
                  WHEN 'OR_DECODE' THEN
                        'DECODE ('
                     || p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ', '
                     || p_vc_alias2
                     || '.'
                     || r_col.stag_column_name
                     || ', 0, 1) = 1 OR '
               END;
      END LOOP;

      IF p_vc_list_type IN ('LIST_SIMPLE', 'LIST_ALIAS', 'LIST_NVL2', 'SET_ALIAS') THEN
         l_vc_list :=
            RTRIM (
               l_vc_list
             , ', '
            );
      ELSIF p_vc_list_type IN ('AND_NOTNULL', 'AND_ALIAS') THEN
         l_vc_list :=
            SUBSTR (
               l_vc_list
             , 1
             ,   LENGTH (l_vc_list)
               - 5
            );
      ELSIF p_vc_list_type = 'OR_DECODE' THEN
         l_vc_list :=
            SUBSTR (
               l_vc_list
             , 1
             ,   LENGTH (l_vc_list)
               - 4
            );
      END IF;

      RETURN l_vc_list;
   END fct_get_column_list;

   PROCEDURE prc_stat_type_ins (
      p_vc_type_code   IN VARCHAR2
    , p_vc_type_name   IN VARCHAR2
    , p_vc_type_desc   IN VARCHAR2
   )
   IS
   BEGIN
      MERGE INTO p#frm#stag_stat_type_t trg
           USING (SELECT p_vc_type_code AS type_code
                       , p_vc_type_name AS type_name
                       , p_vc_type_desc AS type_desc
                    FROM DUAL) src
              ON (trg.stag_stat_type_code = src.type_code)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_stat_type_name = src.type_name
                  , trg.stag_stat_type_desc = src.type_desc
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_stat_type_code
                     , trg.stag_stat_type_name
                     , trg.stag_stat_type_desc
                    )
             VALUES (
                       src.type_code
                     , src.type_name
                     , src.type_desc
                    );

      COMMIT;
   END prc_stat_type_ins;

   PROCEDURE prc_source_ins (
      p_vc_source_code      IN VARCHAR2
    , p_vc_source_prefix    IN VARCHAR2
    , p_vc_source_name      IN VARCHAR2
    , p_vc_stage_owner      IN VARCHAR2
    , p_vc_ts_stg1_data     IN VARCHAR2
    , p_vc_ts_stg1_indx     IN VARCHAR2
    , p_vc_ts_stg2_data     IN VARCHAR2
    , p_vc_ts_stg2_indx     IN VARCHAR2
    , p_vc_fb_archive       IN VARCHAR2 DEFAULT NULL
    , p_vc_bodi_ds          IN VARCHAR2 DEFAULT NULL
    , p_vc_source_bodi_ds   IN VARCHAR2 DEFAULT NULL
   )
   IS
   BEGIN
      MERGE INTO p#frm#stag_source_t trg
           USING (SELECT p_vc_source_code AS source_code
                       , p_vc_source_prefix AS source_prefix
                       , p_vc_source_name AS source_name
                       , p_vc_stage_owner AS stage_owner
                       , p_vc_ts_stg1_data AS ts_stg1_data
                       , p_vc_ts_stg1_indx AS ts_stg1_indx
                       , p_vc_ts_stg2_data AS ts_stg2_data
                       , p_vc_ts_stg2_indx AS ts_stg2_indx
                       , p_vc_fb_archive AS fb_archive
                       , p_vc_bodi_ds AS bodi_ds
                       , p_vc_source_bodi_ds AS source_bodi_ds
                    FROM DUAL) src
              ON (trg.stag_source_code = src.source_code)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_source_prefix = src.source_prefix
                  , trg.stag_source_name = src.source_name
                  , trg.stag_owner = src.stage_owner
                  , trg.stag_ts_stage_data = src.ts_stg1_data
                  , trg.stag_ts_stage_indx = src.ts_stg1_indx
                  , trg.stag_ts_hist_data = src.ts_stg2_data
                  , trg.stag_ts_hist_indx = src.ts_stg2_indx
                  , trg.stag_fb_archive = src.fb_archive
                  , trg.stag_bodi_ds = src.bodi_ds
                  , trg.stag_source_bodi_ds = src.source_bodi_ds
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_source_code
                     , trg.stag_source_prefix
                     , trg.stag_source_name
                     , trg.stag_owner
                     , trg.stag_ts_stage_data
                     , trg.stag_ts_stage_indx
                     , trg.stag_ts_hist_data
                     , trg.stag_ts_hist_indx
                     , trg.stag_fb_archive
                     , trg.stag_bodi_ds
                     , trg.stag_source_bodi_ds
                    )
             VALUES (
                       src.source_code
                     , src.source_prefix
                     , src.source_name
                     , src.stage_owner
                     , src.ts_stg1_data
                     , src.ts_stg1_indx
                     , src.ts_stg2_data
                     , src.ts_stg2_indx
                     , src.source_bodi_ds
                     , src.bodi_ds
                     , src.source_bodi_ds
                    );

      COMMIT;
   END prc_source_ins;

   PROCEDURE prc_source_del (
      p_vc_source_code   IN VARCHAR2
    , p_b_cascade        IN BOOLEAN DEFAULT FALSE
   )
   IS
      l_n_source_id   NUMBER;
      l_n_cnt         NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO l_n_cnt
        FROM p#frm#stag_source_t
       WHERE stag_source_code = p_vc_source_code;

      IF l_n_cnt > 0 THEN
         -- Get the key object id
         SELECT stag_source_id
           INTO l_n_source_id
           FROM p#frm#stag_source_t
          WHERE stag_source_code = p_vc_source_code;

         IF NOT p_b_cascade THEN
            SELECT COUNT (*)
              INTO l_n_cnt
              FROM p#frm#stag_object_t
             WHERE stag_source_id = l_n_source_id;

            IF l_n_cnt > 0 THEN
               raise_application_error (
                  -20001
                , 'Cannot delete source with objects'
               );
            END IF;
         END IF;

         -- Delete children objects
         FOR r_obj IN (SELECT stag_object_name
                         FROM p#frm#stag_object_t
                        WHERE stag_source_id = l_n_source_id) LOOP
            prc_object_del (
               p_vc_source_code
             , r_obj.stag_object_name
             , p_b_cascade
            );
         END LOOP;

         DELETE p#frm#stag_source_db_t
          WHERE stag_source_id = l_n_source_id;

         DELETE p#frm#stag_source_t
          WHERE stag_source_code = p_vc_source_code;

         COMMIT;
      END IF;
   END prc_source_del;

   PROCEDURE prc_source_db_ins (
      p_vc_source_code          IN VARCHAR2
    , p_vc_distribution_code    IN VARCHAR2
    , p_vc_source_db_link       IN VARCHAR2
    , p_vc_source_owner         IN VARCHAR2
    , p_vc_source_db_jdbcname   IN VARCHAR2 DEFAULT NULL
    , p_vc_source_bodi_ds       IN VARCHAR2 DEFAULT NULL
   )
   IS
   BEGIN
      MERGE INTO p#frm#stag_source_db_t trg
           USING (SELECT stag_source_id
                       , p_vc_distribution_code AS distribution_code
                       , p_vc_source_db_link AS source_db_link
                       , p_vc_source_db_jdbcname AS source_db_jdbcname
                       , p_vc_source_owner AS source_owner
                       , p_vc_source_bodi_ds AS source_bodi_ds
                    FROM p#frm#stag_source_t
                   WHERE stag_source_code = p_vc_source_code) src
              ON (trg.stag_source_id = src.stag_source_id
              AND trg.stag_distribution_code = src.distribution_code)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_source_db_link = src.source_db_link
                  , trg.stag_source_db_jdbcname = src.source_db_jdbcname
                  , trg.stag_source_owner = src.source_owner
                  , trg.stag_source_bodi_ds = src.source_bodi_ds
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_source_id
                     , trg.stag_distribution_code
                     , trg.stag_source_db_link
                     , trg.stag_source_db_jdbcname
                     , trg.stag_source_owner
                     , trg.stag_source_bodi_ds
                    )
             VALUES (
                       src.stag_source_id
                     , src.distribution_code
                     , src.source_db_link
                     , src.source_db_jdbcname
                     , src.source_owner
                     , src.source_bodi_ds
                    );

      COMMIT;
   END prc_source_db_ins;

   PROCEDURE prc_object_ins (
      p_vc_source_code        IN VARCHAR2
    , p_vc_object_name        IN VARCHAR2
    , p_n_parallel_degree     IN NUMBER DEFAULT NULL
    , p_vc_filter_clause      IN VARCHAR2 DEFAULT NULL
    , p_vc_partition_clause   IN VARCHAR2 DEFAULT NULL
    , p_vc_hist_flag          IN NUMBER DEFAULT 1
    , p_vc_fbda_flag          IN NUMBER DEFAULT 0
    , p_vc_increment_buffer   IN NUMBER DEFAULT NULL
   )
   IS
      l_vc_table_comment   t_string;
   BEGIN
      -- Set object
      MERGE INTO p#frm#stag_object_t trg
           USING (SELECT stag_source_id
                       , p_vc_object_name AS object_name
                       , p_n_parallel_degree AS parallel_degree
                       , p_vc_filter_clause AS filter_clause
                       , p_vc_partition_clause AS partition_clause
                       , p_vc_hist_flag AS hist_flag
                       , p_vc_fbda_flag AS fbda_flag
                       , p_vc_increment_buffer AS increment_buffer
                    FROM p#frm#stag_source_t
                   WHERE stag_source_code = p_vc_source_code) src
              ON (trg.stag_source_id = src.stag_source_id
              AND trg.stag_object_name = src.object_name)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_parallel_degree = parallel_degree
                  , trg.stag_filter_clause = filter_clause
                  , trg.stag_partition_clause = partition_clause
                  , trg.stag_hist_flag = src.hist_flag
                  , trg.stag_fbda_flag = src.fbda_flag
                  , trg.stag_increment_buffer = src.increment_buffer
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_source_id
                     , trg.stag_object_name
                     , trg.stag_parallel_degree
                     , trg.stag_filter_clause
                     , trg.stag_partition_clause
                     , trg.stag_hist_flag
                     , trg.stag_fbda_flag
                     , trg.stag_increment_buffer
                    )
             VALUES (
                       src.stag_source_id
                     , src.object_name
                     , src.parallel_degree
                     , src.filter_clause
                     , src.partition_clause
                     , src.hist_flag
                     , src.fbda_flag
                     , src.increment_buffer
                    );

      COMMIT;

      -- Get object comment from source
      FOR r_obj IN (  SELECT stag_source_db_link
                           , stag_source_owner
                           , stag_object_id
                           , stag_object_name
                        FROM (SELECT d.stag_source_db_link
                                   , d.stag_source_owner
                                   , o.stag_object_id
                                   , o.stag_object_name
                                   , ROW_NUMBER () OVER (PARTITION BY o.stag_object_id ORDER BY d.stag_source_db_id) AS source_db_order
                                FROM p#frm#stag_source_t s
                                   , p#frm#stag_source_db_t d
                                   , p#frm#stag_object_t o
                               WHERE s.stag_source_id = d.stag_source_id
                                 AND s.stag_source_id = o.stag_source_id
                                 AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                                 AND p_vc_object_name IN (o.stag_object_name, 'ALL'))
                       WHERE source_db_order = 1
                    ORDER BY stag_object_id) LOOP
         l_vc_table_comment :=
            p#frm#dict.fct_get_table_comment (
               r_obj.stag_source_db_link
             , r_obj.stag_source_owner
             , r_obj.stag_object_name
            );

         UPDATE p#frm#stag_object_t
            SET stag_object_comment = l_vc_table_comment
          WHERE stag_object_id = r_obj.stag_object_id;
      END LOOP;

      COMMIT;
   END prc_object_ins;

   PROCEDURE prc_object_del (
      p_vc_source_code   IN VARCHAR2
    , p_vc_object_name   IN VARCHAR2
    , p_b_cascade        IN BOOLEAN DEFAULT FALSE
   )
   IS
      l_n_object_id   NUMBER;
      l_n_cnt         NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO l_n_cnt
        FROM p#frm#stag_source_t s
           , p#frm#stag_object_t o
       WHERE s.stag_source_id = o.stag_source_id
         AND s.stag_source_code = p_vc_source_code
         AND o.stag_object_name = p_vc_object_name;

      IF l_n_cnt > 0 THEN
         -- Get the key object id
         SELECT o.stag_object_id
           INTO l_n_object_id
           FROM p#frm#stag_source_t s
              , p#frm#stag_object_t o
          WHERE s.stag_source_id = o.stag_source_id
            AND s.stag_source_code = p_vc_source_code
            AND o.stag_object_name = p_vc_object_name;

         IF NOT p_b_cascade THEN
            SELECT COUNT (*)
              INTO l_n_cnt
              FROM p#frm#stag_column_t
             WHERE stag_object_id = l_n_object_id;

            IF l_n_cnt > 0 THEN
               raise_application_error (
                  -20001
                , 'Cannot delete object with columns'
               );
            END IF;
         END IF;

         DELETE p#frm#stag_column_t
          WHERE stag_object_id = l_n_object_id;

         DELETE p#frm#stag_object_t
          WHERE stag_object_id = l_n_object_id;

         COMMIT;
      END IF;
   END prc_object_del;

   PROCEDURE prc_column_ins (
      p_vc_source_code       IN VARCHAR2
    , p_vc_object_name       IN VARCHAR2
    , p_vc_column_name       IN VARCHAR2
    , p_vc_column_name_map   IN VARCHAR2 DEFAULT NULL
    , p_vc_column_def        IN VARCHAR2 DEFAULT NULL
    , p_n_column_pos         IN NUMBER DEFAULT NULL
    , p_n_column_nk_pos      IN NUMBER DEFAULT NULL
    , p_n_column_incr_flag   IN NUMBER DEFAULT 0
    , p_n_column_hist_flag   IN NUMBER DEFAULT 1
    , p_n_column_edwh_flag   IN NUMBER DEFAULT 1
   )
   IS
   BEGIN
      MERGE INTO p#frm#stag_column_t trg
           USING (SELECT o.stag_object_id
                       , p_vc_object_name AS object_name
                       , p_vc_column_name AS column_name
                       , p_vc_column_name_map AS column_name_map
                       , p_vc_column_def AS column_def
                       , p_n_column_pos AS column_pos
                       , p_n_column_nk_pos AS column_nk_pos
                       , p_n_column_incr_flag AS column_incr_flag
                       , p_n_column_hist_flag AS column_hist_flag
                       , p_n_column_edwh_flag AS column_edwh_flag
                    FROM p#frm#stag_source_t s
                       , p#frm#stag_object_t o
                   WHERE s.stag_source_id = o.stag_source_id
                     AND s.stag_source_code = p_vc_source_code
                     AND o.stag_object_name = p_vc_object_name) src
              ON (trg.stag_object_id = src.stag_object_id
              AND trg.stag_column_name = src.column_name)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_column_name_map = NVL (src.column_name_map, trg.stag_column_name_map)
                  , trg.stag_column_def = NVL (src.column_def, trg.stag_column_def)
                  , trg.stag_column_pos = NVL (src.column_pos, trg.stag_column_pos)
                  , trg.stag_column_nk_pos = NVL (src.column_nk_pos, trg.stag_column_nk_pos)
                  , trg.stag_column_incr_flag = NVL (src.column_incr_flag, trg.stag_column_incr_flag)
                  , trg.stag_column_hist_flag = NVL (src.column_hist_flag, trg.stag_column_hist_flag)
                  , trg.stag_column_edwh_flag = NVL (src.column_edwh_flag, trg.stag_column_edwh_flag)
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_object_id
                     , trg.stag_column_name
                     , trg.stag_column_name_map
                     , trg.stag_column_def
                     , trg.stag_column_pos
                     , trg.stag_column_nk_pos
                     , trg.stag_column_incr_flag
                     , trg.stag_column_hist_flag
                     , trg.stag_column_edwh_flag
                    )
             VALUES (
                       src.stag_object_id
                     , src.column_name
                     , src.column_name_map
                     , src.column_def
                     , src.column_pos
                     , src.column_nk_pos
                     , src.column_incr_flag
                     , src.column_hist_flag
                     , src.column_edwh_flag
                    );

      COMMIT;
   END prc_column_ins;

   PROCEDURE prc_column_del (
      p_vc_source_code   IN VARCHAR2
    , p_vc_object_name   IN VARCHAR2
    , p_vc_column_name   IN VARCHAR2
   )
   IS
   BEGIN
      DELETE p#frm#stag_column_t
       WHERE stag_object_id = (SELECT o.stag_object_id
                                 FROM p#frm#stag_source_t s
                                    , p#frm#stag_object_t o
                                WHERE s.stag_source_id = o.stag_source_id
                                  AND s.stag_source_code = p_vc_source_code
                                  AND o.stag_object_name = p_vc_object_name)
         AND stag_column_name = p_vc_column_name;

      COMMIT;
   END prc_column_del;

   PROCEDURE prc_column_import_from_source (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   )
   IS
      l_vc_prc_name   t_string := 'prc_column_import_from_source';
   BEGIN
      l_sql_col_def := p#frm#dict.c_sql_col_def;
      l_t_columns := NULL;
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Prepare metadata'
       , 'Start'
      );

      FOR r_obj IN (SELECT stag_object_id
                         , stag_object_name
                         , stag_hist_flag
                         , stag_owner
                         , stag_source_owner
                         , stag_source_db_link
                      FROM (SELECT o.stag_object_id
                                 , o.stag_object_name
                                 , o.stag_hist_flag
                                 , s.stag_owner
                                 , d.stag_source_owner
                                 , d.stag_source_db_link
                                 , ROW_NUMBER () OVER (PARTITION BY o.stag_object_id ORDER BY d.stag_source_db_id) AS db_rank
                              FROM p#frm#stag_object_t o
                                 , p#frm#stag_source_t s
                                 , p#frm#stag_source_db_t d
                             WHERE o.stag_source_id = s.stag_source_id
                               AND s.stag_source_id = d.stag_source_id
                               AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                               AND p_vc_object_name IN (o.stag_object_name, 'ALL'))
                     WHERE db_rank = 1) LOOP
         l_n_pk_pos_max := NULL;
         p#frm#dict.g_vc_src_obj_dblink := r_obj.stag_source_db_link;
         p#frm#dict.prc_set_text_param (
            l_sql_col_def
          , 'sql_obj_pk'
          , CASE
               WHEN p_b_check_dependencies THEN
                  p#frm#dict.c_sql_obj_col_pk
               ELSE
                  p#frm#dict.c_sql_obj_col_pk_nodep
            END
         );
         p#frm#dict.prc_set_src_param (l_sql_col_def);

         EXECUTE IMMEDIATE l_sql_col_def
            BULK COLLECT INTO l_t_columns
            USING r_obj.stag_source_owner
                , r_obj.stag_object_name;

         FOR i IN l_t_columns.FIRST .. l_t_columns.LAST LOOP
            MERGE INTO p#frm#stag_column_t trg
                 USING (SELECT l_t_columns (i).stag_column_name AS stag_column_name
                             , l_t_columns (i).stag_column_comment AS stag_column_comment
                             , l_t_columns (i).stag_column_pos AS stag_column_pos
                             , l_t_columns (i).stag_column_type AS stag_column_type
                             , l_t_columns (i).stag_column_length AS stag_column_length
                             , l_t_columns (i).stag_column_precision AS stag_column_precision
                             , l_t_columns (i).stag_column_scale AS stag_column_scale
                             , l_t_columns (i).stag_column_def AS stag_column_def
                             , l_t_columns (i).stag_column_nk_pos AS stag_column_nk_pos
                          FROM DUAL) src
                    ON (trg.stag_column_name = src.stag_column_name
                    AND trg.stag_object_id = r_obj.stag_object_id)
            WHEN MATCHED THEN
               UPDATE SET trg.stag_column_pos = src.stag_column_pos
                        , trg.stag_column_type = src.stag_column_type
                        , trg.stag_column_length = src.stag_column_length
                        , trg.stag_column_precision = src.stag_column_precision
                        , trg.stag_column_scale = src.stag_column_scale
                        , trg.stag_column_def = src.stag_column_def
                        , trg.stag_column_comment = src.stag_column_comment
                        , trg.stag_column_nk_pos = src.stag_column_nk_pos
            WHEN NOT MATCHED THEN
               INSERT     (
                             trg.stag_object_id
                           , trg.stag_column_pos
                           , trg.stag_column_name
                           , trg.stag_column_comment
                           , trg.stag_column_type
                           , trg.stag_column_length
                           , trg.stag_column_precision
                           , trg.stag_column_scale
                           , trg.stag_column_def
                           , trg.stag_column_nk_pos
                           , trg.stag_column_edwh_flag
                           , trg.stag_column_hist_flag
                          )
                   VALUES (
                             r_obj.stag_object_id
                           , src.stag_column_pos
                           , src.stag_column_name
                           , src.stag_column_comment
                           , src.stag_column_type
                           , src.stag_column_length
                           , src.stag_column_precision
                           , src.stag_column_scale
                           , src.stag_column_def
                           , src.stag_column_nk_pos
                           , 1
                           , 1
                          );

            l_n_pk_pos_max :=
               GREATEST (
                  NVL (l_t_columns (i).stag_column_nk_pos, 0)
                , NVL (l_n_pk_pos_max, 0)
               );
         END LOOP;

         UPDATE p#frm#stag_object_t
            SET stag_source_nk_flag =
                   CASE
                      WHEN l_n_pk_pos_max > 0 THEN
                         1
                      ELSE
                         0
                   END
          WHERE stag_object_id = r_obj.stag_object_id;

         COMMIT;
      END LOOP;

      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Prepare metadata'
       , 'Finish'
      );
   END prc_column_import_from_source;

   PROCEDURE prc_column_import_from_stage (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   )
   IS
      l_vc_prc_name   t_string := 'prc_column_import_from_stage';
   BEGIN
      l_sql_col_def := p#frm#dict.c_sql_col_def;
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Prepare metadata'
       , 'Start'
      );
      prc_set_object_properties;

      FOR r_obj IN (SELECT stag_owner
                         , stag_object_id
                         , stag_object_name
                         , stag_stage_table_name
                         , stag_hist_flag
                      FROM p#frm#stag_object_t o
                         , p#frm#stag_source_t s
                     WHERE o.stag_source_id = s.stag_source_id
                       AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                       AND p_vc_object_name IN (o.stag_object_name, 'ALL')) LOOP
         p#frm#dict.prc_set_text_param (
            l_sql_col_def
          , 'sql_obj_pk'
          , CASE
               WHEN p_b_check_dependencies THEN
                  p#frm#dict.c_sql_obj_col_pk
               ELSE
                  p#frm#dict.c_sql_obj_col_pk_nodep
            END
         );
         p#frm#dict.prc_set_src_param (l_sql_col_def);

         EXECUTE IMMEDIATE l_sql_col_def
            BULK COLLECT INTO l_t_columns
            USING r_obj.stag_owner
                , r_obj.stag_object_name;

         FOR i IN l_t_columns.FIRST .. l_t_columns.LAST LOOP
            MERGE INTO p#frm#stag_column_t trg
                 USING (SELECT l_t_columns (i).stag_column_name AS stag_column_name
                             , l_t_columns (i).stag_column_comment AS stag_column_comment
                             , l_t_columns (i).stag_column_pos AS stag_column_pos
                             , l_t_columns (i).stag_column_def AS stag_column_def
                             , l_t_columns (i).stag_column_nk_pos AS stag_column_nk_pos
                          FROM DUAL) src
                    ON (trg.stag_column_name = src.stag_column_name
                    AND trg.stag_object_id = r_obj.stag_object_id)
            WHEN MATCHED THEN
               UPDATE SET trg.stag_column_pos = src.stag_column_pos
                        , trg.stag_column_def = src.stag_column_def
                        , trg.stag_column_comment = src.stag_column_comment
                        , trg.stag_column_nk_pos = src.stag_column_nk_pos
            WHEN NOT MATCHED THEN
               INSERT     (
                             trg.stag_object_id
                           , trg.stag_column_pos
                           , trg.stag_column_name
                           , trg.stag_column_comment
                           , trg.stag_column_def
                           , trg.stag_column_nk_pos
                           , trg.stag_column_edwh_flag
                           , trg.stag_column_hist_flag
                          )
                   VALUES (
                             r_obj.stag_object_id
                           , src.stag_column_pos
                           , src.stag_column_name
                           , src.stag_column_comment
                           , src.stag_column_def
                           , src.stag_column_nk_pos
                           , 1
                           , 1
                          );

            l_n_pk_pos_max :=
               GREATEST (
                  NVL (l_t_columns (i).stag_column_nk_pos, 0)
                , l_n_pk_pos_max
               );
         END LOOP;

         UPDATE p#frm#stag_object_t
            SET stag_source_nk_flag =
                   CASE
                      WHEN l_n_pk_pos_max = 0 THEN
                         0
                      ELSE
                         1
                   END
          WHERE stag_object_id = r_obj.stag_object_id;

         COMMIT;
      END LOOP;

      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Prepare metadata'
       , 'Finish'
      );
   END prc_column_import_from_stage;

   PROCEDURE prc_check_column_changes (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   )
   IS
      l_vc_prc_name   t_string := 'prc_check_column_changes';
   BEGIN
      l_sql_col_def := p#frm#dict.c_sql_col_def;
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Check column changes'
       , 'Start'
      );

      FOR r_obj IN (  SELECT stag_source_id
                           , stag_source_code
                           , stag_source_db_link
                           , stag_source_owner
                           , stag_owner
                           , stag_object_id
                           , stag_object_name
                           , stag_stage_table_name
                        FROM (SELECT s.stag_source_id
                                   , s.stag_source_code
                                   , d.stag_source_db_link
                                   , d.stag_source_owner
                                   , s.stag_owner
                                   , o.stag_object_id
                                   , o.stag_object_name
                                   , o.stag_stage_table_name
                                   , ROW_NUMBER () OVER (PARTITION BY o.stag_object_id ORDER BY d.stag_source_db_id) AS source_db_order
                                FROM p#frm#stag_source_t s
                                   , p#frm#stag_source_db_t d
                                   , p#frm#stag_object_t o
                               WHERE s.stag_source_id = d.stag_source_id
                                 AND s.stag_source_id = o.stag_source_id
                                 AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                                 AND p_vc_object_name IN (o.stag_object_name, 'ALL'))
                       WHERE source_db_order = 1
                    ORDER BY stag_object_id) LOOP
         p#frm#dict.g_vc_src_obj_dblink := r_obj.stag_source_db_link;
         p#frm#dict.prc_set_text_param (
            l_sql_col_def
          , 'sql_obj_pk'
          , CASE
               WHEN p_b_check_dependencies THEN
                  p#frm#dict.c_sql_obj_col_pk
               ELSE
                  p#frm#dict.c_sql_obj_col_pk_nodep
            END
         );
         p#frm#dict.prc_set_src_param (l_sql_col_def);

         EXECUTE IMMEDIATE l_sql_col_def
            BULK COLLECT INTO l_t_columns
            USING r_obj.stag_source_owner
                , r_obj.stag_object_name;

         DELETE p#frm#stag_column_check_t
          WHERE stag_object_id = r_obj.stag_object_id;

         FOR i IN l_t_columns.FIRST .. l_t_columns.LAST LOOP
            MERGE INTO p#frm#stag_column_check_t trg
                 USING (SELECT l_t_columns (i).stag_column_name AS stag_column_name
                             , l_t_columns (i).stag_column_comment AS stag_column_comment
                             , l_t_columns (i).stag_column_pos AS stag_column_pos
                             , l_t_columns (i).stag_column_def AS stag_column_def
                             , l_t_columns (i).stag_column_nk_pos AS stag_column_nk_pos
                          FROM DUAL) src
                    ON (trg.stag_column_name = src.stag_column_name
                    AND trg.stag_object_id = r_obj.stag_object_id)
            WHEN MATCHED THEN
               UPDATE SET trg.stag_column_pos = src.stag_column_pos
                        , trg.stag_column_def = src.stag_column_def
                        , trg.stag_column_nk_pos = src.stag_column_nk_pos
            WHEN NOT MATCHED THEN
               INSERT     (
                             trg.stag_object_id
                           , trg.stag_column_pos
                           , trg.stag_column_name
                           , trg.stag_column_def
                           , trg.stag_column_nk_pos
                          )
                   VALUES (
                             r_obj.stag_object_id
                           , src.stag_column_pos
                           , src.stag_column_name
                           , src.stag_column_def
                           , src.stag_column_nk_pos
                          );
         END LOOP;

         COMMIT;
      END LOOP;

      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Check column changes'
       , 'Finish'
      );
   END;

   PROCEDURE prc_set_object_properties
   IS
   BEGIN
      -- Select all objects
      FOR r_obj IN (  SELECT stag_object_id
                           , stag_object_name
                           , stag_view_stage2_name
                           , CASE
                                WHEN root_cnt > 1 THEN
                                      SUBSTR (
                                         stag_object_root
                                       , 1
                                       , 25
                                      )
                                   || root_rank
                                ELSE
                                   stag_object_root
                             END
                                AS stag_object_root
                        FROM (SELECT t.*
                                   , COUNT (0) OVER (PARTITION BY stag_object_root) AS root_cnt
                                   , ROW_NUMBER () OVER (PARTITION BY stag_object_root ORDER BY stag_object_name) AS root_rank
                                FROM (SELECT o.stag_object_id
                                           , o.stag_object_name
                                           , SUBSTR (
                                                   CASE
                                                      WHEN s.stag_source_prefix IS NOT NULL THEN
                                                            s.stag_source_prefix
                                                         || '_'
                                                   END
                                                || o.stag_object_name
                                              , 1
                                              , 30
                                             )
                                                AS stag_view_stage2_name
                                           , SUBSTR (
                                                   CASE
                                                      WHEN s.stag_source_prefix IS NOT NULL THEN
                                                            s.stag_source_prefix
                                                         || '_'
                                                   END
                                                || o.stag_object_name
                                              , 1
                                              , 26
                                             )
                                                AS stag_object_root
                                        FROM p#frm#stag_source_t s
                                           , p#frm#stag_object_t o
                                       WHERE s.stag_source_id = o.stag_source_id) t)
                    ORDER BY stag_object_id) LOOP
         UPDATE p#frm#stag_object_t
            SET stag_object_root = r_obj.stag_object_root
              , stag_src_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || p#frm#stag_param.c_vc_suffix_tab_source
              , stag_dupl_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || p#frm#stag_param.c_vc_suffix_tab_dupl
              , stag_diff_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || p#frm#stag_param.c_vc_suffix_tab_diff
              , stag_diff_nk_name =
                      r_obj.stag_object_root
                   || '_'
                   || p#frm#stag_param.c_vc_suffix_nk_diff
              , stag_stage_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || p#frm#stag_param.c_vc_suffix_tab_stag
              , stag_hist_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || p#frm#stag_param.c_vc_suffix_tab_hist
              , stag_hist_nk_name =
                      r_obj.stag_object_root
                   || '_'
                   || p#frm#stag_param.c_vc_suffix_nk_hist
              , stag_hist_view_name = r_obj.stag_view_stage2_name
              , stag_hist_fbda_name =
                      r_obj.stag_object_root
                   || '_'
                   || p#frm#stag_param.c_vc_suffix_view_fbda
              , stag_package_name =
                      r_obj.stag_object_root
                   || '_'
                   || p#frm#stag_param.c_vc_suffix_package
          WHERE stag_object_id = r_obj.stag_object_id;

         COMMIT;
      END LOOP;
   END;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END p#frm#stag_meta;
2014-11-20 16:37:53.620 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE BODY dwhutl_stag_meta
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * String type
   */
   SUBTYPE t_string IS VARCHAR2 (32767);

   /**
   * Table containing dictionary values
   */
   TYPE r_column IS RECORD (
      stag_column_pos         NUMBER
    , stag_column_name        VARCHAR2 (4000)
    , stag_column_comment     VARCHAR2 (4000)
    , stag_column_type        VARCHAR2 (4000)
    , stag_column_length      VARCHAR2 (4000)
    , stag_column_precision   VARCHAR2 (4000)
    , stag_column_scale       VARCHAR2 (4000)
    , stag_column_def         VARCHAR2 (4000)
    , stag_column_nk_pos      NUMBER
   );

   TYPE t_t_columns IS TABLE OF r_column;

   l_t_columns      t_t_columns := NULL;
   /**
   * Other types
   */
   l_sql_col_def    CLOB := dwhutl_dict.c_sql_col_def;
   l_n_pk_pos_max   NUMBER;

   FUNCTION fct_get_column_list (
      p_vc_object_id     IN NUMBER
    , p_vc_column_type   IN VARCHAR2
    , p_vc_list_type     IN VARCHAR2
    , p_vc_alias1        IN VARCHAR2 DEFAULT NULL
    , p_vc_alias2        IN VARCHAR2 DEFAULT NULL
   )
      RETURN VARCHAR2
   IS
      l_vc_list   t_string;
   BEGIN
      -- Build list of columns
      FOR r_col IN (  SELECT stag_column_name
                        FROM dwhutl_stag_column_t
                       WHERE stag_object_id = p_vc_object_id
                         AND stag_column_edwh_flag = 1
                         AND (p_vc_column_type = 'ALL'
                           OR (p_vc_column_type = 'PK'
                           AND stag_column_nk_pos IS NOT NULL)
                           OR (p_vc_column_type = 'NPK'
                           AND stag_column_nk_pos IS NULL))
                    ORDER BY stag_column_nk_pos
                           , stag_column_pos) LOOP
         l_vc_list :=
               l_vc_list
            || CHR (10)
            || CASE p_vc_list_type
                  WHEN 'LIST_SIMPLE' THEN
                        r_col.stag_column_name
                     || ', '
                  WHEN 'LIST_ALIAS' THEN
                        p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ', '
                  WHEN 'SET_ALIAS' THEN
                        p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ' = '
                     || p_vc_alias2
                     || '.'
                     || r_col.stag_column_name
                     || ', '
                  WHEN 'LIST_NVL2' THEN
                        'NVL2 ('
                     || p_vc_alias1
                     || '.rowid, '
                     || p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ', '
                     || p_vc_alias2
                     || '.'
                     || r_col.stag_column_name
                     || ') AS '
                     || r_col.stag_column_name
                     || ', '
                  WHEN 'AND_NOTNULL' THEN
                        r_col.stag_column_name
                     || ' IS NOT NULL AND '
                  WHEN 'AND_ALIAS' THEN
                        p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ' = '
                     || p_vc_alias2
                     || '.'
                     || r_col.stag_column_name
                     || ' AND '
                  WHEN 'OR_DECODE' THEN
                        'DECODE ('
                     || p_vc_alias1
                     || '.'
                     || r_col.stag_column_name
                     || ', '
                     || p_vc_alias2
                     || '.'
                     || r_col.stag_column_name
                     || ', 0, 1) = 1 OR '
               END;
      END LOOP;

      IF p_vc_list_type IN ('LIST_SIMPLE', 'LIST_ALIAS', 'LIST_NVL2', 'SET_ALIAS') THEN
         l_vc_list :=
            RTRIM (
               l_vc_list
             , ', '
            );
      ELSIF p_vc_list_type IN ('AND_NOTNULL', 'AND_ALIAS') THEN
         l_vc_list :=
            SUBSTR (
               l_vc_list
             , 1
             ,   LENGTH (l_vc_list)
               - 5
            );
      ELSIF p_vc_list_type = 'OR_DECODE' THEN
         l_vc_list :=
            SUBSTR (
               l_vc_list
             , 1
             ,   LENGTH (l_vc_list)
               - 4
            );
      END IF;

      RETURN l_vc_list;
   END fct_get_column_list;

   PROCEDURE prc_stat_type_ins (
      p_vc_type_code   IN VARCHAR2
    , p_vc_type_name   IN VARCHAR2
    , p_vc_type_desc   IN VARCHAR2
   )
   IS
   BEGIN
      MERGE INTO dwhutl_stag_stat_type_t trg
           USING (SELECT p_vc_type_code AS type_code
                       , p_vc_type_name AS type_name
                       , p_vc_type_desc AS type_desc
                    FROM DUAL) src
              ON (trg.stag_stat_type_code = src.type_code)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_stat_type_name = src.type_name
                  , trg.stag_stat_type_desc = src.type_desc
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_stat_type_code
                     , trg.stag_stat_type_name
                     , trg.stag_stat_type_desc
                    )
             VALUES (
                       src.type_code
                     , src.type_name
                     , src.type_desc
                    );

      COMMIT;
   END prc_stat_type_ins;

   PROCEDURE prc_source_ins (
      p_vc_source_code      IN VARCHAR2
    , p_vc_source_prefix    IN VARCHAR2
    , p_vc_source_name      IN VARCHAR2
    , p_vc_stage_owner      IN VARCHAR2
    , p_vc_ts_stg1_data     IN VARCHAR2
    , p_vc_ts_stg1_indx     IN VARCHAR2
    , p_vc_ts_stg2_data     IN VARCHAR2
    , p_vc_ts_stg2_indx     IN VARCHAR2
    , p_vc_fb_archive       IN VARCHAR2 DEFAULT NULL
    , p_vc_bodi_ds          IN VARCHAR2 DEFAULT NULL
    , p_vc_source_bodi_ds   IN VARCHAR2 DEFAULT NULL
   )
   IS
   BEGIN
      MERGE INTO dwhutl_stag_source_t trg
           USING (SELECT p_vc_source_code AS source_code
                       , p_vc_source_prefix AS source_prefix
                       , p_vc_source_name AS source_name
                       , p_vc_stage_owner AS stage_owner
                       , p_vc_ts_stg1_data AS ts_stg1_data
                       , p_vc_ts_stg1_indx AS ts_stg1_indx
                       , p_vc_ts_stg2_data AS ts_stg2_data
                       , p_vc_ts_stg2_indx AS ts_stg2_indx
                       , p_vc_fb_archive AS fb_archive
                       , p_vc_bodi_ds AS bodi_ds
                       , p_vc_source_bodi_ds AS source_bodi_ds
                    FROM DUAL) src
              ON (trg.stag_source_code = src.source_code)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_source_prefix = src.source_prefix
                  , trg.stag_source_name = src.source_name
                  , trg.stag_owner = src.stage_owner
                  , trg.stag_ts_stage_data = src.ts_stg1_data
                  , trg.stag_ts_stage_indx = src.ts_stg1_indx
                  , trg.stag_ts_hist_data = src.ts_stg2_data
                  , trg.stag_ts_hist_indx = src.ts_stg2_indx
                  , trg.stag_fb_archive = src.fb_archive
                  , trg.stag_bodi_ds = src.bodi_ds
                  , trg.stag_source_bodi_ds = src.source_bodi_ds
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_source_code
                     , trg.stag_source_prefix
                     , trg.stag_source_name
                     , trg.stag_owner
                     , trg.stag_ts_stage_data
                     , trg.stag_ts_stage_indx
                     , trg.stag_ts_hist_data
                     , trg.stag_ts_hist_indx
                     , trg.stag_fb_archive
                     , trg.stag_bodi_ds
                     , trg.stag_source_bodi_ds
                    )
             VALUES (
                       src.source_code
                     , src.source_prefix
                     , src.source_name
                     , src.stage_owner
                     , src.ts_stg1_data
                     , src.ts_stg1_indx
                     , src.ts_stg2_data
                     , src.ts_stg2_indx
                     , src.source_bodi_ds
                     , src.bodi_ds
                     , src.source_bodi_ds
                    );

      COMMIT;
   END prc_source_ins;

   PROCEDURE prc_source_del (
      p_vc_source_code   IN VARCHAR2
    , p_b_cascade        IN BOOLEAN DEFAULT FALSE
   )
   IS
      l_n_source_id   NUMBER;
      l_n_cnt         NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO l_n_cnt
        FROM dwhutl_stag_source_t
       WHERE stag_source_code = p_vc_source_code;

      IF l_n_cnt > 0 THEN
         -- Get the key object id
         SELECT stag_source_id
           INTO l_n_source_id
           FROM dwhutl_stag_source_t
          WHERE stag_source_code = p_vc_source_code;

         IF NOT p_b_cascade THEN
            SELECT COUNT (*)
              INTO l_n_cnt
              FROM dwhutl_stag_object_t
             WHERE stag_source_id = l_n_source_id;

            IF l_n_cnt > 0 THEN
               raise_application_error (
                  -20001
                , 'Cannot delete source with objects'
               );
            END IF;
         END IF;

         -- Delete children objects
         FOR r_obj IN (SELECT stag_object_name
                         FROM dwhutl_stag_object_t
                        WHERE stag_source_id = l_n_source_id) LOOP
            prc_object_del (
               p_vc_source_code
             , r_obj.stag_object_name
             , p_b_cascade
            );
         END LOOP;

         DELETE dwhutl_stag_source_db_t
          WHERE stag_source_id = l_n_source_id;

         DELETE dwhutl_stag_source_t
          WHERE stag_source_code = p_vc_source_code;

         COMMIT;
      END IF;
   END prc_source_del;

   PROCEDURE prc_source_db_ins (
      p_vc_source_code          IN VARCHAR2
    , p_vc_distribution_code    IN VARCHAR2
    , p_vc_source_db_link       IN VARCHAR2
    , p_vc_source_owner         IN VARCHAR2
    , p_vc_source_db_jdbcname   IN VARCHAR2 DEFAULT NULL
    , p_vc_source_bodi_ds       IN VARCHAR2 DEFAULT NULL
   )
   IS
   BEGIN
      MERGE INTO dwhutl_stag_source_db_t trg
           USING (SELECT stag_source_id
                       , p_vc_distribution_code AS distribution_code
                       , p_vc_source_db_link AS source_db_link
                       , p_vc_source_db_jdbcname AS source_db_jdbcname
                       , p_vc_source_owner AS source_owner
                       , p_vc_source_bodi_ds AS source_bodi_ds
                    FROM dwhutl_stag_source_t
                   WHERE stag_source_code = p_vc_source_code) src
              ON (trg.stag_source_id = src.stag_source_id
              AND trg.stag_distribution_code = src.distribution_code)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_source_db_link = src.source_db_link
                  , trg.stag_source_db_jdbcname = src.source_db_jdbcname
                  , trg.stag_source_owner = src.source_owner
                  , trg.stag_source_bodi_ds = src.source_bodi_ds
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_source_id
                     , trg.stag_distribution_code
                     , trg.stag_source_db_link
                     , trg.stag_source_db_jdbcname
                     , trg.stag_source_owner
                     , trg.stag_source_bodi_ds
                    )
             VALUES (
                       src.stag_source_id
                     , src.distribution_code
                     , src.source_db_link
                     , src.source_db_jdbcname
                     , src.source_owner
                     , src.source_bodi_ds
                    );

      COMMIT;
   END prc_source_db_ins;

   PROCEDURE prc_object_ins (
      p_vc_source_code        IN VARCHAR2
    , p_vc_object_name        IN VARCHAR2
    , p_n_parallel_degree     IN NUMBER DEFAULT NULL
    , p_vc_filter_clause      IN VARCHAR2 DEFAULT NULL
    , p_vc_partition_clause   IN VARCHAR2 DEFAULT NULL
    , p_vc_hist_flag          IN NUMBER DEFAULT 1
    , p_vc_fbda_flag          IN NUMBER DEFAULT 0
    , p_vc_increment_buffer   IN NUMBER DEFAULT NULL
   )
   IS
      l_vc_table_comment   t_string;
   BEGIN
      -- Set object
      MERGE INTO dwhutl_stag_object_t trg
           USING (SELECT stag_source_id
                       , p_vc_object_name AS object_name
                       , p_n_parallel_degree AS parallel_degree
                       , p_vc_filter_clause AS filter_clause
                       , p_vc_partition_clause AS partition_clause
                       , p_vc_hist_flag AS hist_flag
                       , p_vc_fbda_flag AS fbda_flag
                       , p_vc_increment_buffer AS increment_buffer
                    FROM dwhutl_stag_source_t
                   WHERE stag_source_code = p_vc_source_code) src
              ON (trg.stag_source_id = src.stag_source_id
              AND trg.stag_object_name = src.object_name)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_parallel_degree = parallel_degree
                  , trg.stag_filter_clause = filter_clause
                  , trg.stag_partition_clause = partition_clause
                  , trg.stag_hist_flag = src.hist_flag
                  , trg.stag_fbda_flag = src.fbda_flag
                  , trg.stag_increment_buffer = src.increment_buffer
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_source_id
                     , trg.stag_object_name
                     , trg.stag_parallel_degree
                     , trg.stag_filter_clause
                     , trg.stag_partition_clause
                     , trg.stag_hist_flag
                     , trg.stag_fbda_flag
                     , trg.stag_increment_buffer
                    )
             VALUES (
                       src.stag_source_id
                     , src.object_name
                     , src.parallel_degree
                     , src.filter_clause
                     , src.partition_clause
                     , src.hist_flag
                     , src.fbda_flag
                     , src.increment_buffer
                    );

      COMMIT;

      -- Get object comment from source
      FOR r_obj IN (  SELECT stag_source_db_link
                           , stag_source_owner
                           , stag_object_id
                           , stag_object_name
                        FROM (SELECT d.stag_source_db_link
                                   , d.stag_source_owner
                                   , o.stag_object_id
                                   , o.stag_object_name
                                   , ROW_NUMBER () OVER (PARTITION BY o.stag_object_id ORDER BY d.stag_source_db_id) AS source_db_order
                                FROM dwhutl_stag_source_t s
                                   , dwhutl_stag_source_db_t d
                                   , dwhutl_stag_object_t o
                               WHERE s.stag_source_id = d.stag_source_id
                                 AND s.stag_source_id = o.stag_source_id
                                 AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                                 AND p_vc_object_name IN (o.stag_object_name, 'ALL'))
                       WHERE source_db_order = 1
                    ORDER BY stag_object_id) LOOP
         l_vc_table_comment :=
            dwhutl_dict.fct_get_table_comment (
               r_obj.stag_source_db_link
             , r_obj.stag_source_owner
             , r_obj.stag_object_name
            );

         UPDATE dwhutl_stag_object_t
            SET stag_object_comment = l_vc_table_comment
          WHERE stag_object_id = r_obj.stag_object_id;
      END LOOP;

      COMMIT;
   END prc_object_ins;

   PROCEDURE prc_object_del (
      p_vc_source_code   IN VARCHAR2
    , p_vc_object_name   IN VARCHAR2
    , p_b_cascade        IN BOOLEAN DEFAULT FALSE
   )
   IS
      l_n_object_id   NUMBER;
      l_n_cnt         NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO l_n_cnt
        FROM dwhutl_stag_source_t s
           , dwhutl_stag_object_t o
       WHERE s.stag_source_id = o.stag_source_id
         AND s.stag_source_code = p_vc_source_code
         AND o.stag_object_name = p_vc_object_name;

      IF l_n_cnt > 0 THEN
         -- Get the key object id
         SELECT o.stag_object_id
           INTO l_n_object_id
           FROM dwhutl_stag_source_t s
              , dwhutl_stag_object_t o
          WHERE s.stag_source_id = o.stag_source_id
            AND s.stag_source_code = p_vc_source_code
            AND o.stag_object_name = p_vc_object_name;

         IF NOT p_b_cascade THEN
            SELECT COUNT (*)
              INTO l_n_cnt
              FROM dwhutl_stag_column_t
             WHERE stag_object_id = l_n_object_id;

            IF l_n_cnt > 0 THEN
               raise_application_error (
                  -20001
                , 'Cannot delete object with columns'
               );
            END IF;
         END IF;

         DELETE dwhutl_stag_column_t
          WHERE stag_object_id = l_n_object_id;

         DELETE dwhutl_stag_object_t
          WHERE stag_object_id = l_n_object_id;

         COMMIT;
      END IF;
   END prc_object_del;

   PROCEDURE prc_column_ins (
      p_vc_source_code       IN VARCHAR2
    , p_vc_object_name       IN VARCHAR2
    , p_vc_column_name       IN VARCHAR2
    , p_vc_column_name_map   IN VARCHAR2 DEFAULT NULL
    , p_vc_column_def        IN VARCHAR2 DEFAULT NULL
    , p_n_column_pos         IN NUMBER DEFAULT NULL
    , p_n_column_nk_pos      IN NUMBER DEFAULT NULL
    , p_n_column_incr_flag   IN NUMBER DEFAULT 0
    , p_n_column_hist_flag   IN NUMBER DEFAULT 1
    , p_n_column_edwh_flag   IN NUMBER DEFAULT 1
   )
   IS
   BEGIN
      MERGE INTO dwhutl_stag_column_t trg
           USING (SELECT o.stag_object_id
                       , p_vc_object_name AS object_name
                       , p_vc_column_name AS column_name
                       , p_vc_column_name_map AS column_name_map
                       , p_vc_column_def AS column_def
                       , p_n_column_pos AS column_pos
                       , p_n_column_nk_pos AS column_nk_pos
                       , p_n_column_incr_flag AS column_incr_flag
                       , p_n_column_hist_flag AS column_hist_flag
                       , p_n_column_edwh_flag AS column_edwh_flag
                    FROM dwhutl_stag_source_t s
                       , dwhutl_stag_object_t o
                   WHERE s.stag_source_id = o.stag_source_id
                     AND s.stag_source_code = p_vc_source_code
                     AND o.stag_object_name = p_vc_object_name) src
              ON (trg.stag_object_id = src.stag_object_id
              AND trg.stag_column_name = src.column_name)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_column_name_map = NVL (src.column_name_map, trg.stag_column_name_map)
                  , trg.stag_column_def = NVL (src.column_def, trg.stag_column_def)
                  , trg.stag_column_pos = NVL (src.column_pos, trg.stag_column_pos)
                  , trg.stag_column_nk_pos = NVL (src.column_nk_pos, trg.stag_column_nk_pos)
                  , trg.stag_column_incr_flag = NVL (src.column_incr_flag, trg.stag_column_incr_flag)
                  , trg.stag_column_hist_flag = NVL (src.column_hist_flag, trg.stag_column_hist_flag)
                  , trg.stag_column_edwh_flag = NVL (src.column_edwh_flag, trg.stag_column_edwh_flag)
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_object_id
                     , trg.stag_column_name
                     , trg.stag_column_name_map
                     , trg.stag_column_def
                     , trg.stag_column_pos
                     , trg.stag_column_nk_pos
                     , trg.stag_column_incr_flag
                     , trg.stag_column_hist_flag
                     , trg.stag_column_edwh_flag
                    )
             VALUES (
                       src.stag_object_id
                     , src.column_name
                     , src.column_name_map
                     , src.column_def
                     , src.column_pos
                     , src.column_nk_pos
                     , src.column_incr_flag
                     , src.column_hist_flag
                     , src.column_edwh_flag
                    );

      COMMIT;
   END prc_column_ins;

   PROCEDURE prc_column_del (
      p_vc_source_code   IN VARCHAR2
    , p_vc_object_name   IN VARCHAR2
    , p_vc_column_name   IN VARCHAR2
   )
   IS
   BEGIN
      DELETE dwhutl_stag_column_t
       WHERE stag_object_id = (SELECT o.stag_object_id
                                 FROM dwhutl_stag_source_t s
                                    , dwhutl_stag_object_t o
                                WHERE s.stag_source_id = o.stag_source_id
                                  AND s.stag_source_code = p_vc_source_code
                                  AND o.stag_object_name = p_vc_object_name)
         AND stag_column_name = p_vc_column_name;

      COMMIT;
   END prc_column_del;

   PROCEDURE prc_column_import_from_source (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   )
   IS
      l_vc_prc_name   t_string := 'prc_column_import_from_source';
   BEGIN
      l_sql_col_def := dwhutl_dict.c_sql_col_def;
      l_t_columns := NULL;
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Prepare metadata'
       , 'Start'
      );

      FOR r_obj IN (SELECT stag_object_id
                         , stag_object_name
                         , stag_hist_flag
                         , stag_owner
                         , stag_source_owner
                         , stag_source_db_link
                      FROM (SELECT o.stag_object_id
                                 , o.stag_object_name
                                 , o.stag_hist_flag
                                 , s.stag_owner
                                 , d.stag_source_owner
                                 , d.stag_source_db_link
                                 , ROW_NUMBER () OVER (PARTITION BY o.stag_object_id ORDER BY d.stag_source_db_id) AS db_rank
                              FROM dwhutl_stag_object_t o
                                 , dwhutl_stag_source_t s
                                 , dwhutl_stag_source_db_t d
                             WHERE o.stag_source_id = s.stag_source_id
                               AND s.stag_source_id = d.stag_source_id
                               AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                               AND p_vc_object_name IN (o.stag_object_name, 'ALL'))
                     WHERE db_rank = 1) LOOP
         l_n_pk_pos_max := NULL;
         dwhutl_dict.g_vc_src_obj_dblink := r_obj.stag_source_db_link;
         dwhutl_dict.prc_set_text_param (
            l_sql_col_def
          , 'sql_obj_pk'
          , CASE
               WHEN p_b_check_dependencies THEN
                  dwhutl_dict.c_sql_obj_col_pk
               ELSE
                  dwhutl_dict.c_sql_obj_col_pk_nodep
            END
         );
         dwhutl_dict.prc_set_src_param (l_sql_col_def);

         EXECUTE IMMEDIATE l_sql_col_def
            BULK COLLECT INTO l_t_columns
            USING r_obj.stag_source_owner
                , r_obj.stag_object_name;

         FOR i IN l_t_columns.FIRST .. l_t_columns.LAST LOOP
            MERGE INTO dwhutl_stag_column_t trg
                 USING (SELECT l_t_columns (i).stag_column_name AS stag_column_name
                             , l_t_columns (i).stag_column_comment AS stag_column_comment
                             , l_t_columns (i).stag_column_pos AS stag_column_pos
                             , l_t_columns (i).stag_column_type AS stag_column_type
                             , l_t_columns (i).stag_column_length AS stag_column_length
                             , l_t_columns (i).stag_column_precision AS stag_column_precision
                             , l_t_columns (i).stag_column_scale AS stag_column_scale
                             , l_t_columns (i).stag_column_def AS stag_column_def
                             , l_t_columns (i).stag_column_nk_pos AS stag_column_nk_pos
                          FROM DUAL) src
                    ON (trg.stag_column_name = src.stag_column_name
                    AND trg.stag_object_id = r_obj.stag_object_id)
            WHEN MATCHED THEN
               UPDATE SET trg.stag_column_pos = src.stag_column_pos
                        , trg.stag_column_type = src.stag_column_type
                        , trg.stag_column_length = src.stag_column_length
                        , trg.stag_column_precision = src.stag_column_precision
                        , trg.stag_column_scale = src.stag_column_scale
                        , trg.stag_column_def = src.stag_column_def
                        , trg.stag_column_comment = src.stag_column_comment
                        , trg.stag_column_nk_pos = src.stag_column_nk_pos
            WHEN NOT MATCHED THEN
               INSERT     (
                             trg.stag_object_id
                           , trg.stag_column_pos
                           , trg.stag_column_name
                           , trg.stag_column_comment
                           , trg.stag_column_type
                           , trg.stag_column_length
                           , trg.stag_column_precision
                           , trg.stag_column_scale
                           , trg.stag_column_def
                           , trg.stag_column_nk_pos
                           , trg.stag_column_edwh_flag
                           , trg.stag_column_hist_flag
                          )
                   VALUES (
                             r_obj.stag_object_id
                           , src.stag_column_pos
                           , src.stag_column_name
                           , src.stag_column_comment
                           , src.stag_column_type
                           , src.stag_column_length
                           , src.stag_column_precision
                           , src.stag_column_scale
                           , src.stag_column_def
                           , src.stag_column_nk_pos
                           , 1
                           , 1
                          );

            l_n_pk_pos_max :=
               GREATEST (
                  NVL (l_t_columns (i).stag_column_nk_pos, 0)
                , NVL (l_n_pk_pos_max, 0)
               );
         END LOOP;

         UPDATE dwhutl_stag_object_t
            SET stag_source_nk_flag =
                   CASE
                      WHEN l_n_pk_pos_max > 0 THEN
                         1
                      ELSE
                         0
                   END
          WHERE stag_object_id = r_obj.stag_object_id;

         COMMIT;
      END LOOP;

      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Prepare metadata'
       , 'Finish'
      );
   END prc_column_import_from_source;

   PROCEDURE prc_column_import_from_stage (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   )
   IS
      l_vc_prc_name   t_string := 'prc_column_import_from_stage';
   BEGIN
      l_sql_col_def := dwhutl_dict.c_sql_col_def;
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Prepare metadata'
       , 'Start'
      );
      prc_set_object_properties;

      FOR r_obj IN (SELECT stag_owner
                         , stag_object_id
                         , stag_object_name
                         , stag_stage_table_name
                         , stag_hist_flag
                      FROM dwhutl_stag_object_t o
                         , dwhutl_stag_source_t s
                     WHERE o.stag_source_id = s.stag_source_id
                       AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                       AND p_vc_object_name IN (o.stag_object_name, 'ALL')) LOOP
         dwhutl_dict.prc_set_text_param (
            l_sql_col_def
          , 'sql_obj_pk'
          , CASE
               WHEN p_b_check_dependencies THEN
                  dwhutl_dict.c_sql_obj_col_pk
               ELSE
                  dwhutl_dict.c_sql_obj_col_pk_nodep
            END
         );
         dwhutl_dict.prc_set_src_param (l_sql_col_def);

         EXECUTE IMMEDIATE l_sql_col_def
            BULK COLLECT INTO l_t_columns
            USING r_obj.stag_owner
                , r_obj.stag_object_name;

         FOR i IN l_t_columns.FIRST .. l_t_columns.LAST LOOP
            MERGE INTO dwhutl_stag_column_t trg
                 USING (SELECT l_t_columns (i).stag_column_name AS stag_column_name
                             , l_t_columns (i).stag_column_comment AS stag_column_comment
                             , l_t_columns (i).stag_column_pos AS stag_column_pos
                             , l_t_columns (i).stag_column_def AS stag_column_def
                             , l_t_columns (i).stag_column_nk_pos AS stag_column_nk_pos
                          FROM DUAL) src
                    ON (trg.stag_column_name = src.stag_column_name
                    AND trg.stag_object_id = r_obj.stag_object_id)
            WHEN MATCHED THEN
               UPDATE SET trg.stag_column_pos = src.stag_column_pos
                        , trg.stag_column_def = src.stag_column_def
                        , trg.stag_column_comment = src.stag_column_comment
                        , trg.stag_column_nk_pos = src.stag_column_nk_pos
            WHEN NOT MATCHED THEN
               INSERT     (
                             trg.stag_object_id
                           , trg.stag_column_pos
                           , trg.stag_column_name
                           , trg.stag_column_comment
                           , trg.stag_column_def
                           , trg.stag_column_nk_pos
                           , trg.stag_column_edwh_flag
                           , trg.stag_column_hist_flag
                          )
                   VALUES (
                             r_obj.stag_object_id
                           , src.stag_column_pos
                           , src.stag_column_name
                           , src.stag_column_comment
                           , src.stag_column_def
                           , src.stag_column_nk_pos
                           , 1
                           , 1
                          );

            l_n_pk_pos_max :=
               GREATEST (
                  NVL (l_t_columns (i).stag_column_nk_pos, 0)
                , l_n_pk_pos_max
               );
         END LOOP;

         UPDATE dwhutl_stag_object_t
            SET stag_source_nk_flag =
                   CASE
                      WHEN l_n_pk_pos_max = 0 THEN
                         0
                      ELSE
                         1
                   END
          WHERE stag_object_id = r_obj.stag_object_id;

         COMMIT;
      END LOOP;

      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Prepare metadata'
       , 'Finish'
      );
   END prc_column_import_from_stage;

   PROCEDURE prc_check_column_changes (
      p_vc_source_code         IN VARCHAR2
    , p_vc_object_name         IN VARCHAR2 DEFAULT 'ALL'
    , p_b_check_dependencies   IN BOOLEAN DEFAULT TRUE
   )
   IS
      l_vc_prc_name   t_string := 'prc_check_column_changes';
   BEGIN
      l_sql_col_def := dwhutl_dict.c_sql_col_def;
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Check column changes'
       , 'Start'
      );

      FOR r_obj IN (  SELECT stag_source_id
                           , stag_source_code
                           , stag_source_db_link
                           , stag_source_owner
                           , stag_owner
                           , stag_object_id
                           , stag_object_name
                           , stag_stage_table_name
                        FROM (SELECT s.stag_source_id
                                   , s.stag_source_code
                                   , d.stag_source_db_link
                                   , d.stag_source_owner
                                   , s.stag_owner
                                   , o.stag_object_id
                                   , o.stag_object_name
                                   , o.stag_stage_table_name
                                   , ROW_NUMBER () OVER (PARTITION BY o.stag_object_id ORDER BY d.stag_source_db_id) AS source_db_order
                                FROM dwhutl_stag_source_t s
                                   , dwhutl_stag_source_db_t d
                                   , dwhutl_stag_object_t o
                               WHERE s.stag_source_id = d.stag_source_id
                                 AND s.stag_source_id = o.stag_source_id
                                 AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                                 AND p_vc_object_name IN (o.stag_object_name, 'ALL'))
                       WHERE source_db_order = 1
                    ORDER BY stag_object_id) LOOP
         dwhutl_dict.g_vc_src_obj_dblink := r_obj.stag_source_db_link;
         dwhutl_dict.prc_set_text_param (
            l_sql_col_def
          , 'sql_obj_pk'
          , CASE
               WHEN p_b_check_dependencies THEN
                  dwhutl_dict.c_sql_obj_col_pk
               ELSE
                  dwhutl_dict.c_sql_obj_col_pk_nodep
            END
         );
         dwhutl_dict.prc_set_src_param (l_sql_col_def);

         EXECUTE IMMEDIATE l_sql_col_def
            BULK COLLECT INTO l_t_columns
            USING r_obj.stag_source_owner
                , r_obj.stag_object_name;

         DELETE dwhutl_stag_column_check_t
          WHERE stag_object_id = r_obj.stag_object_id;

         FOR i IN l_t_columns.FIRST .. l_t_columns.LAST LOOP
            MERGE INTO dwhutl_stag_column_check_t trg
                 USING (SELECT l_t_columns (i).stag_column_name AS stag_column_name
                             , l_t_columns (i).stag_column_comment AS stag_column_comment
                             , l_t_columns (i).stag_column_pos AS stag_column_pos
                             , l_t_columns (i).stag_column_def AS stag_column_def
                             , l_t_columns (i).stag_column_nk_pos AS stag_column_nk_pos
                          FROM DUAL) src
                    ON (trg.stag_column_name = src.stag_column_name
                    AND trg.stag_object_id = r_obj.stag_object_id)
            WHEN MATCHED THEN
               UPDATE SET trg.stag_column_pos = src.stag_column_pos
                        , trg.stag_column_def = src.stag_column_def
                        , trg.stag_column_nk_pos = src.stag_column_nk_pos
            WHEN NOT MATCHED THEN
               INSERT     (
                             trg.stag_object_id
                           , trg.stag_column_pos
                           , trg.stag_column_name
                           , trg.stag_column_def
                           , trg.stag_column_nk_pos
                          )
                   VALUES (
                             r_obj.stag_object_id
                           , src.stag_column_pos
                           , src.stag_column_name
                           , src.stag_column_def
                           , src.stag_column_nk_pos
                          );
         END LOOP;

         COMMIT;
      END LOOP;

      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Check column changes'
       , 'Finish'
      );
   END;

   PROCEDURE prc_set_object_properties
   IS
   BEGIN
      -- Select all objects
      FOR r_obj IN (  SELECT stag_object_id
                           , stag_object_name
                           , stag_view_stage2_name
                           , CASE
                                WHEN root_cnt > 1 THEN
                                      SUBSTR (
                                         stag_object_root
                                       , 1
                                       , 25
                                      )
                                   || root_rank
                                ELSE
                                   stag_object_root
                             END
                                AS stag_object_root
                        FROM (SELECT t.*
                                   , COUNT (0) OVER (PARTITION BY stag_object_root) AS root_cnt
                                   , ROW_NUMBER () OVER (PARTITION BY stag_object_root ORDER BY stag_object_name) AS root_rank
                                FROM (SELECT o.stag_object_id
                                           , o.stag_object_name
                                           , SUBSTR (
                                                   CASE
                                                      WHEN s.stag_source_prefix IS NOT NULL THEN
                                                            s.stag_source_prefix
                                                         || '_'
                                                   END
                                                || o.stag_object_name
                                              , 1
                                              , 30
                                             )
                                                AS stag_view_stage2_name
                                           , SUBSTR (
                                                   CASE
                                                      WHEN s.stag_source_prefix IS NOT NULL THEN
                                                            s.stag_source_prefix
                                                         || '_'
                                                   END
                                                || o.stag_object_name
                                              , 1
                                              , 26
                                             )
                                                AS stag_object_root
                                        FROM dwhutl_stag_source_t s
                                           , dwhutl_stag_object_t o
                                       WHERE s.stag_source_id = o.stag_source_id) t)
                    ORDER BY stag_object_id) LOOP
         UPDATE dwhutl_stag_object_t
            SET stag_object_root = r_obj.stag_object_root
              , stag_src_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || dwhutl_stag_param.c_vc_suffix_tab_source
              , stag_dupl_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || dwhutl_stag_param.c_vc_suffix_tab_dupl
              , stag_diff_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || dwhutl_stag_param.c_vc_suffix_tab_diff
              , stag_diff_nk_name =
                      r_obj.stag_object_root
                   || '_'
                   || dwhutl_stag_param.c_vc_suffix_nk_diff
              , stag_stage_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || dwhutl_stag_param.c_vc_suffix_tab_stag
              , stag_hist_table_name =
                      r_obj.stag_object_root
                   || '_'
                   || dwhutl_stag_param.c_vc_suffix_tab_hist
              , stag_hist_nk_name =
                      r_obj.stag_object_root
                   || '_'
                   || dwhutl_stag_param.c_vc_suffix_nk_hist
              , stag_hist_view_name = r_obj.stag_view_stage2_name
              , stag_hist_fbda_name =
                      r_obj.stag_object_root
                   || '_'
                   || dwhutl_stag_param.c_vc_suffix_view_fbda
              , stag_package_name =
                      r_obj.stag_object_root
                   || '_'
                   || dwhutl_stag_param.c_vc_suffix_package
          WHERE stag_object_id = r_obj.stag_object_id;

         COMMIT;
      END LOOP;
   END;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END dwhutl_stag_meta;
2014-11-20 16:37:53.793 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_meta/stag_meta-impl.sql executed
2014-11-20 16:37:53.793 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_ddl/stag_ddl-def.sql delimiter 
2014-11-20 16:37:53.794 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE p#frm#stag_ddl
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version      CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url          CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version               VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                   VARCHAR2 (1024);

   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * String type
   */
   SUBTYPE t_string IS VARCHAR2 (32767);

   -- Object related identifiers
   g_n_object_id                NUMBER;
   g_n_source_nk_flag           NUMBER;
   g_n_fbda_flag                NUMBER;
   g_n_parallel_degree          NUMBER;
   g_vc_source_code             t_object_name;
   g_vc_object_name             t_object_name;
   g_vc_prefix_src              t_object_name;
   --
   g_vc_dblink                  t_object_name;
   g_vc_owner_src               t_object_name;
   g_vc_table_name_source       t_object_name;
   g_vc_source_identifier       t_object_name;
   --
   g_vc_owner_stg               t_object_name;
   g_vc_table_name_stage        t_object_name;
   g_vc_table_name_diff         t_object_name;
   g_vc_table_name_dupl         t_object_name;
   g_vc_table_name_hist         t_object_name;
   g_vc_table_comment           t_string;
   g_vc_nk_name_diff            t_object_name;
   g_vc_nk_name_stage           t_object_name;
   g_vc_nk_name_hist            t_object_name;
   g_vc_view_name_hist          t_object_name;
   g_vc_view_name_fbda          t_object_name;
   g_vc_package_main            t_object_name;
   g_vc_filter_clause           t_string;
   g_vc_dedupl_rank_clause      t_string;
   g_vc_partition_expr          t_string;
   g_vc_increment_column        t_string;
   g_vc_increment_coldef        t_string;
   g_n_increment_buffer         NUMBER;
   --
   g_vc_tablespace_stage_data   t_object_name;
   g_vc_tablespace_stage_indx   t_object_name;
   g_vc_tablespace_hist_data    t_object_name;
   g_vc_tablespace_hist_indx    t_object_name;
   g_vc_fb_archive              t_object_name;
   -- List of source related identifiers
   g_l_dblink                   DBMS_SQL.varchar2s;
   g_l_owner_src                DBMS_SQL.varchar2s;
   g_l_distr_code               DBMS_SQL.varchar2s;
   -- List of columns
   g_vc_col_def                 t_string;
   g_vc_col_all                 t_string;
   g_vc_col_pk_src              t_string;
   g_vc_col_pk                  t_string;
   --
   g_vc_col_hist                t_string;
   g_vc_col_update              t_string;

   PROCEDURE prc_create_stage_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_create_duplicate_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_create_diff_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_create_hist_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_create_hist_view (p_b_raise_flag BOOLEAN DEFAULT FALSE);

   PROCEDURE prc_create_hist_synonym (p_b_raise_flag BOOLEAN DEFAULT FALSE);

   PROCEDURE prc_create_fbda_view (p_b_raise_flag BOOLEAN DEFAULT FALSE);

   PROCEDURE prc_create_package_main (
      p_b_hist_only_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag        BOOLEAN DEFAULT FALSE
   );
END p#frm#stag_ddl;
2014-11-20 16:37:53.794 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE dwhutl_stag_ddl
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version      CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url          CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version               VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                   VARCHAR2 (1024);

   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * String type
   */
   SUBTYPE t_string IS VARCHAR2 (32767);

   -- Object related identifiers
   g_n_object_id                NUMBER;
   g_n_source_nk_flag           NUMBER;
   g_n_fbda_flag                NUMBER;
   g_n_parallel_degree          NUMBER;
   g_vc_source_code             t_object_name;
   g_vc_object_name             t_object_name;
   g_vc_prefix_src              t_object_name;
   --
   g_vc_dblink                  t_object_name;
   g_vc_owner_src               t_object_name;
   g_vc_table_name_source       t_object_name;
   g_vc_source_identifier       t_object_name;
   --
   g_vc_owner_stg               t_object_name;
   g_vc_table_name_stage        t_object_name;
   g_vc_table_name_diff         t_object_name;
   g_vc_table_name_dupl         t_object_name;
   g_vc_table_name_hist         t_object_name;
   g_vc_table_comment           t_string;
   g_vc_nk_name_diff            t_object_name;
   g_vc_nk_name_stage           t_object_name;
   g_vc_nk_name_hist            t_object_name;
   g_vc_view_name_hist          t_object_name;
   g_vc_view_name_fbda          t_object_name;
   g_vc_package_main            t_object_name;
   g_vc_filter_clause           t_string;
   g_vc_dedupl_rank_clause      t_string;
   g_vc_partition_expr          t_string;
   g_vc_increment_column        t_string;
   g_vc_increment_coldef        t_string;
   g_n_increment_buffer         NUMBER;
   --
   g_vc_tablespace_stage_data   t_object_name;
   g_vc_tablespace_stage_indx   t_object_name;
   g_vc_tablespace_hist_data    t_object_name;
   g_vc_tablespace_hist_indx    t_object_name;
   g_vc_fb_archive              t_object_name;
   -- List of source related identifiers
   g_l_dblink                   DBMS_SQL.varchar2s;
   g_l_owner_src                DBMS_SQL.varchar2s;
   g_l_distr_code               DBMS_SQL.varchar2s;
   -- List of columns
   g_vc_col_def                 t_string;
   g_vc_col_all                 t_string;
   g_vc_col_pk_src              t_string;
   g_vc_col_pk                  t_string;
   --
   g_vc_col_hist                t_string;
   g_vc_col_update              t_string;

   PROCEDURE prc_create_stage_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_create_duplicate_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_create_diff_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_create_hist_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   );

   PROCEDURE prc_create_hist_view (p_b_raise_flag BOOLEAN DEFAULT FALSE);

   PROCEDURE prc_create_hist_synonym (p_b_raise_flag BOOLEAN DEFAULT FALSE);

   PROCEDURE prc_create_fbda_view (p_b_raise_flag BOOLEAN DEFAULT FALSE);

   PROCEDURE prc_create_package_main (
      p_b_hist_only_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag        BOOLEAN DEFAULT FALSE
   );
END dwhutl_stag_ddl;
2014-11-20 16:37:53.802 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_ddl/stag_ddl-def.sql executed
2014-11-20 16:37:53.802 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_ddl/stag_ddl-impl.sql delimiter 
2014-11-20 16:37:53.804 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE BODY p#frm#stag_ddl
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Templates for standard code tokens
   **/
   --
   c_token_utl_column_hist        t_string := '#validFromColumnName#, #validToColumnName#, #dmlOpColumnName#';
   c_token_utl_coldef_hist        t_string := '#validFromColumnName# DATE, #validToColumnName# DATE, #dmlOpColumnName# VARCHAR2(10)';
   c_token_utl_colval_hist        t_string := 'SYSDATE, TO_DATE(''99991231'',''yyyymmdd''), ''I''';
   c_token_utl_column_source_db   t_string := '#sourceDbColumnName#';
   c_token_utl_coldef_source_db   t_string := '#sourceDbColumnName# VARCHAR(100)';
   c_token_utl_column_partition   t_string := '#partitionColumnName#';
   c_token_utl_coldef_partition   t_string := '#partitionColumnName# NUMBER(1)';
   --
   c_token_diff_partition         CLOB
                                     :=    'PARTITION BY LIST ('
                                        || p#frm#stag_param.c_vc_column_dml_op
                                        || ')
    (  
	  PARTITION PI VALUES (''I'') NOLOGGING NOCOMPRESS
    , PARTITION PH VALUES (''H'') NOLOGGING NOCOMPRESS
    , PARTITION PU VALUES (''U'') NOLOGGING NOCOMPRESS
    , PARTITION PD VALUES (''D'') NOLOGGING NOCOMPRESS
    , PARTITION PR VALUES (''R'') NOLOGGING NOCOMPRESS
	)';
   c_token_diff_subpartition      CLOB
                                     :=    'PARTITION BY LIST (#partitionColumnName#)
    SUBPARTITION BY LIST ('
                                        || p#frm#stag_param.c_vc_column_dml_op
                                        || ')
    SUBPARTITION TEMPLATE 
    (  
        SUBPARTITION PI VALUES (''I''),
        SUBPARTITION PH VALUES (''H''),
        SUBPARTITION PU VALUES (''U''),
        SUBPARTITION PD VALUES (''D''),
        SUBPARTITION PR VALUES (''R'')
    )
    (
        PARTITION p0 VALUES (0) NOLOGGING NOCOMPRESS,
        PARTITION p1 VALUES (1) NOLOGGING NOCOMPRESS,
        PARTITION p2 VALUES (2) NOLOGGING NOCOMPRESS,
        PARTITION p3 VALUES (3) NOLOGGING NOCOMPRESS,
        PARTITION p4 VALUES (4) NOLOGGING NOCOMPRESS,
        PARTITION p5 VALUES (5) NOLOGGING NOCOMPRESS,
        PARTITION p6 VALUES (6) NOLOGGING NOCOMPRESS,
        PARTITION p7 VALUES (7) NOLOGGING NOCOMPRESS,
        PARTITION p8 VALUES (8) NOLOGGING NOCOMPRESS,
        PARTITION p9 VALUES (9) NOLOGGING NOCOMPRESS
    )';
   c_token_partition              CLOB := 'PARTITION BY LIST (#partitionColumnName#)
    (
        PARTITION p0 VALUES (0) NOLOGGING NOCOMPRESS,
        PARTITION p1 VALUES (1) NOLOGGING NOCOMPRESS,
        PARTITION p2 VALUES (2) NOLOGGING NOCOMPRESS,
        PARTITION p3 VALUES (3) NOLOGGING NOCOMPRESS,
        PARTITION p4 VALUES (4) NOLOGGING NOCOMPRESS,
        PARTITION p5 VALUES (5) NOLOGGING NOCOMPRESS,
        PARTITION p6 VALUES (6) NOLOGGING NOCOMPRESS,
        PARTITION p7 VALUES (7) NOLOGGING NOCOMPRESS,
        PARTITION p8 VALUES (8) NOLOGGING NOCOMPRESS,
        PARTITION p9 VALUES (9) NOLOGGING NOCOMPRESS
    )';
   -- Template to initialize run time statistics in a procedure
   -- Set the step number and the workflow
   c_token_prc_initialize         CLOB := '';
   -- Template to finalize run time statistics in a procedure
   -- Set the final step number and finalize job statistics
   c_token_prc_finalize           CLOB := '';
   -- Exception handler
   c_token_prc_exception          CLOB := 'p#frm#stag_stat.prc_stat_end(l_n_stat_id, 0, 1);';
   -- Standard parameters for a generated procedure
   c_token_prc_param              CLOB := 'p_n_stream NUMBER DEFAULT NULL';
   -- Code body for the wrapper procedure
   c_token_prc_wrapper            CLOB := '
        p#frm#trac.log_sub_debug (l_vc_prc_name, ''Staging Begin'', ''Start extracting from #tableName#'');

		#prcLoadStage#

        #prcLoadDiff#

		#prcLoadHist#

		#prcTruncStage#

		#prcTruncDiff#

        p#frm#trac.log_sub_debug (l_vc_prc_name, ''Staging End'', ''Stage completed for #tableName#'');';
   -- Statistics token
   c_token_analyze                CLOB := '
        l_n_stat_id := p#frm#stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', NULL, ''#statisticsType#'');
        
        DBMS_STATS.UNLOCK_TABLE_STATS (''#stgOwner#'', ''#tableName#'') ;
        DBMS_STATS.GATHER_TABLE_STATS (''#stgOwner#'', ''#tableName#'', NULL, 1);
        p#frm#stag_stat.prc_size_store(''#sourceCode#'', ''#objectName#'', ''#tableName#'');

        p#frm#stag_stat.prc_stat_end(l_n_stat_id, 0);

        p#frm#trac.log_sub_debug (l_vc_prc_name, ''STAT END'', ''#tableName# : Statistics gathered'');
        ';
   -- Check token of the init procedure
   c_token_check_table_isempty    CLOB := '
		  p#frm#trac.log_sub_debug (l_vc_prc_name, ''CHECK'', ''Check table #tableName# '');
        SELECT COUNT (*)
          INTO l_n_result
          FROM #tableName#
         WHERE rownum = 1;
         
        IF l_n_result = 0 THEN
              p#frm#trac.log_sub_debug (l_vc_prc_name, ''CHECK'', ''Table #tableName# is empty'');
        ELSE
            p#frm#trac.log_sub_error (l_vc_prc_name, ''CHECK'', ''Table #tableName# is not empty'');
            raise_application_error (-20000, ''Cannot init load non-empty table'');        
        END IF;';
   -- Insert token of the staging 1 procedure
   c_token_stage_get_incr_bound   CLOB := '
   
          p#frm#trac.log_sub_debug (l_vc_prc_name, ''INCR BOUND'', ''#tableName# #partition# : get last #incrementColumn#'');
   
        SELECT MAX(#incrementColumn#)
          INTO l_t_increment_bound
          FROM #histTableName# #partition#;
          
          p#frm#trac.log_sub_debug (l_vc_prc_name, ''INCR BOUND'', ''#tableName# #partition# : last #incrementColumn# = '' || l_t_increment_bound);
        
        ';
   -- Insert token of the staging procedure
   c_token_stage_insert           CLOB := '
        l_n_stat_id := p#frm#stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''STIN'');

        #computeIncrementBound#
                   
        #insertStatement#

		l_n_result := SQL%ROWCOUNT;

		p#frm#stag_stat.prc_stat_end(l_n_stat_id, l_n_result);

        COMMIT;

        p#frm#trac.log_sub_debug (l_vc_prc_name, ''INSERT END'', ''#targetIdentifier# #partition# : '' || l_n_result || '' rows inserted'', NULL, l_n_result);
		';
   -- Check token of the historicizing procedure
   c_token_diff_check             CLOB := '
        l_b_ok := p#frm#dict.fct_check_pk (
			NULL, ''#stgOwner#'', ''#stageTableName#'', ''#stgOwner#'', ''#histTableName#''
		);
		IF l_b_ok THEN
			  p#frm#trac.log_sub_debug (l_vc_prc_name, ''CHECK NK'', ''#stageTableName# and #histTableName# have the same NK'');
		ELSE
			  p#frm#trac.log_sub_warn (l_vc_prc_name, ''CHECK NK'', ''#stageTableName# and #histTableName# have not the same NK'');		
		END IF;
        
        SELECT COUNT(*) INTO l_n_result FROM #stageTableName#;
        
        IF l_n_result = 0 THEN
            p#frm#trac.log_sub_error (l_vc_prc_name, ''CHECK'', ''Table #stageTableName# is empty'');
            raise_application_error (-20000, ''Stage table is empty.'');        
        END IF;
        
        EXECUTE IMMEDIATE ''ALTER SESSION ENABLE PARALLEL DML'';
		
		-- Truncate Diff table
		 p#frm#trac.log_sub_debug (l_vc_prc_name, ''DIFF TRUNCATE'', ''Truncate #diffIdentifier#'');		
		EXECUTE IMMEDIATE ''TRUNCATE TABLE #diffIdentifier# DROP STORAGE'';
		 p#frm#trac.log_sub_debug (l_vc_prc_name, ''DIFF TRUNCATE'', ''#diffIdentifier# truncated'');
		';
   -- Diff token of the historicizing procedure - with nk
   c_token_diff_insert            CLOB := '
		p#frm#trac.log_sub_debug (l_vc_prc_name, ''DIFF BEGIN'', ''Insert into #diffIdentifier#'');

		l_n_stat_id := p#frm#stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''DFIN'');
      
        #insertStatement#
        
		l_n_result := SQL%ROWCOUNT;

      COMMIT;

	  p#frm#stag_stat.prc_stat_end(l_n_stat_id, l_n_result);
		
      p#frm#trac.log_sub_debug (l_vc_prc_name, ''DIFF INSERTED'', ''#diffIdentifier# : '' || l_n_result || '' rows inserted'');
';
   -- Merge token of the historicizing procedure - 2 separate statement
   c_token_hist_reconcile         CLOB := '
        #enableParallelDML#
		
        -- Close old and deleted records in hist table
        
        p#frm#trac.log_sub_debug (l_vc_prc_name, ''HIST CLOSE'', ''Update #targetIdentifier#'');
        l_n_stat_id := p#frm#stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''HSCL'');

        #closeStatement#

        l_n_result := SQL%ROWCOUNT;

        p#frm#stag_stat.prc_stat_end(l_n_stat_id, l_n_result);

        COMMIT;
        
        p#frm#trac.log_sub_debug (l_vc_prc_name, ''HIST CLOSED'', ''#targetIdentifier# : '' || l_n_result || '' rows updated'');
        
    	-- Update Hist table
		
		p#frm#trac.log_sub_debug (l_vc_prc_name, ''HIST UPDATE'', ''Update #targetIdentifier#'');
		l_n_stat_id := p#frm#stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''HSUP'');

        #updateStatement#

		l_n_result := SQL%ROWCOUNT;

		p#frm#stag_stat.prc_stat_end(l_n_stat_id, l_n_result);

        COMMIT;
		
        p#frm#trac.log_sub_debug (l_vc_prc_name, ''HIST UPDATED'', ''#targetIdentifier# : '' || l_n_result || '' rows updated'');
		
		-- Insert into Hist table
		
        p#frm#trac.log_sub_debug (l_vc_prc_name, ''HIST INSERT'', ''#targetIdentifier# : Insert'');

	    l_n_stat_id := p#frm#stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''HSIN'');
        
        #insertStatement#

        l_n_result := SQL%ROWCOUNT;

        p#frm#stag_stat.prc_stat_end(l_n_stat_id, l_n_result);

	    COMMIT;

        p#frm#trac.log_sub_debug (l_vc_prc_name, ''HIST END'', ''#targetIdentifier# : '' || l_n_result || '' rows inserted'');';
   -- Buffers
   l_buffer_pkg_head              CLOB;
   l_buffer_pkg_body              CLOB;
   l_vc_col_src                   t_string;
   l_vc_col_dupl                  t_string;
   l_vc_col_pk_notnull            t_string;
   -- Anonymization
   l_vc_def_anonymized            t_string;
   l_vc_col_anonymized            t_string;
   l_vc_set_anonymized            t_string;
   l_vc_ins_anonymized            t_string;
   l_vc_fct_anonymized            t_string;
   l_vc_ini_anonymized            t_string;
   l_vc_viw_anonymized            t_string;

   FUNCTION fct_get_partition_db (p_vc_db_identifier VARCHAR2)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN    CHR (10)
             || ' PARTITION '
             || p#frm#stag_param.c_vc_prefix_partition
             || '_'
             || p_vc_db_identifier
             || ' VALUES ('''
             || p_vc_db_identifier
             || ''') NOLOGGING COMPRESS';
   END;

   FUNCTION fct_get_partition_expr
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN    ' CASE WHEN TRIM( TRANSLATE ('
             || g_vc_partition_expr
             || ',''0123456789'',''          '')) IS NULL THEN TO_NUMBER('
             || g_vc_partition_expr
             || ') ELSE 0 END';
   END;

   PROCEDURE prc_set_utl_columns (p_vc_code_string IN OUT CLOB)
   IS
      l_vc_prc_name   t_object_name := 'prc_set_utl_columns';
   BEGIN
      p#frm#ddls.prc_set_text_param (
         p_vc_code_string
       , 'validFromColumnName'
       , p#frm#stag_param.c_vc_column_valid_from
      );
      p#frm#ddls.prc_set_text_param (
         p_vc_code_string
       , 'validToColumnName'
       , p#frm#stag_param.c_vc_column_valid_to
      );
      p#frm#ddls.prc_set_text_param (
         p_vc_code_string
       , 'dmlOpColumnName'
       , p#frm#stag_param.c_vc_column_dml_op
      );
      p#frm#ddls.prc_set_text_param (
         p_vc_code_string
       , 'sourceDbColumnName'
       , p#frm#stag_param.c_vc_column_source_db
      );
      p#frm#ddls.prc_set_text_param (
         p_vc_code_string
       , 'partitionColumnName'
       , p#frm#stag_param.c_vc_column_partition
      );
   END prc_set_utl_columns;

   -- Procedure to set column definition list in order to add anonymized columns to the stage2 table
   /*PROCEDURE prc_set_anonymized_coldefs
   IS
   BEGIN
      FOR r_col IN (SELECT   table_name
                           , src_column_name
                           , trg_column_name
                           , stag_column_def
                           , data_type
                           , data_length
                           , ora_function_name
                        FROM all_tab_columns exi
                           , (SELECT col.stag_object_id
                                   , col.stag_object_name
                                   , col.stag_stg2_table_name
                                   , col.stag_column_pos
                                   , col.stag_column_def
                                   , msk.src_column_name
                                   , msk.trg_column_name
                                   , msk.ora_function_name
                                FROM (SELECT o.stag_object_id
                                           , o.stag_object_name
                                           , o.stag_stg2_table_name
                                           , c.stag_column_pos
                                           , c.stag_column_name
                                           , c.stag_column_def
                                        FROM stag_object_t o
                                           , stag_column_t c
                                       WHERE o.stag_object_id = c.stag_object_id) col
                                   , (SELECT atab.table_name
                                           , acol.src_column_name
                                           , acol.trg_column_name
                                           , meth.ora_function_name
                                        FROM dmaskadmin.da_schema_v asch
                                           , dmaskadmin.da_table_v atab
                                           , dmaskadmin.da_column_v acol
                                           , dmaskadmin.da_business_attribute_v attr
                                           , dmaskadmin.da_method_v meth
                                       WHERE asch.schema_id = atab.schema_id
                                         AND atab.table_id = acol.table_id
                                         AND acol.business_attribute_id = attr.attribute_id
                                         AND attr.anonym_method_id = meth.method_id) msk
                               WHERE col.stag_stg2_table_name = msk.table_name
                                 AND col.stag_column_name = msk.src_column_name) met
                       WHERE met.stag_stg2_table_name = exi.table_name(+)
                         AND met.trg_column_name = exi.column_name(+)
                         AND exi.owner(+) = g_vc_owner_stg
                         AND exi.owner IS NULL
                    ORDER BY stag_column_pos)
      LOOP
         l_vc_def_anonymized    := l_vc_def_anonymized || ',' || r_col.trg_column_name || ' ' || r_col.stag_column_def;
         l_vc_ini_anonymized    :=
               l_vc_ini_anonymized
            || ','
            || r_col.trg_column_name
            || ' = '
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN 'SUBSTR('
               END
            || r_col.ora_function_name
            || '('
            || r_col.src_column_name
            || ')'
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN ',1,' || r_col.data_length || ')'
               END
            || CHR (10);
      END LOOP;

      NULL;
   END;

   -- Procedure to set column lists for stage2 update and insert statements
   PROCEDURE prc_set_anonymized_columns
   IS
   BEGIN
      FOR r_col IN (SELECT   msk.table_name
                           , msk.src_column_name
                           , msk.trg_column_name
                           , col.stag_column_def
                           , data_type
                           , data_length
                           , msk.ora_function_name
                        FROM all_tab_columns exi
                           , (SELECT o.stag_object_id
                                   , o.stag_object_name
                                   , o.stag_stg2_table_name
                                   , c.stag_column_pos
                                   , c.stag_column_name
                                   , c.stag_column_def
                                FROM stag_object_t o
                                   , stag_column_t c
                               WHERE o.stag_object_id = c.stag_object_id) col
                           , (SELECT atab.table_name
                                   , acol.src_column_name
                                   , acol.trg_column_name
                                   , meth.ora_function_name
                                FROM dmaskadmin.da_schema_v asch
                                   , dmaskadmin.da_table_v atab
                                   , dmaskadmin.da_column_v acol
                                   , dmaskadmin.da_business_attribute_v attr
                                   , dmaskadmin.da_method_v meth
                               WHERE asch.schema_id = atab.schema_id
                                 AND atab.table_id = acol.table_id
                                 AND acol.business_attribute_id = attr.attribute_id
                                 AND attr.anonym_method_id = meth.method_id) msk
                       WHERE col.stag_stg2_table_name = exi.table_name
                         AND col.stag_column_name = exi.column_name
                         AND col.stag_stg2_table_name = msk.table_name
                         AND col.stag_column_name = msk.src_column_name
                         AND col.stag_object_id = g_n_object_id
                         AND exi.owner = g_vc_owner_stg
                    ORDER BY stag_column_pos)
      LOOP
         l_vc_col_anonymized    := l_vc_col_anonymized || ',' || r_col.trg_column_name || CHR (10);
         l_vc_set_anonymized    :=
               l_vc_set_anonymized
            || ',trg.'
            || r_col.trg_column_name
            || ' = CASE WHEN dmaskadmin.pkg_da_anonymization_lib.is_ano_required('''
            || g_vc_owner_stg
            || ''','''
            || r_col.table_name
            || ''','''
            || r_col.src_column_name
            || ''','
            || r_col.src_column_name
            || ') = ''Y'' THEN'
            || CHR (10)
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN 'SUBSTR('
               END
            || 'dmaskadmin.'
            || r_col.ora_function_name
            || '(src.'
            || r_col.src_column_name
            || ')'
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN ',1,' || r_col.data_length || ')'
               END
            || 'ELSE src.'
            || r_col.src_column_name
            || CHR (10)
            || 'END';
         l_vc_ins_anonymized    :=
               l_vc_ins_anonymized
            || ',CASE WHEN dmaskadmin.pkg_da_anonymization_lib.is_ano_required('''
            || g_vc_owner_stg
            || ''','''
            || r_col.table_name
            || ''','''
            || r_col.src_column_name
            || ''','
            || r_col.src_column_name
            || ') = ''Y'' THEN'
            || CHR (10)
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN 'SUBSTR('
               END
            || 'dmaskadmin.'
            || r_col.ora_function_name
            || '(src.'
            || r_col.src_column_name
            || ')'
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN ',1,' || r_col.data_length || ')'
               END
            || CHR (10)
            || 'ELSE src.'
            || r_col.src_column_name
            || CHR (10)
            || 'END';
         l_vc_fct_anonymized    :=
               l_vc_fct_anonymized
            || ',CASE WHEN dmaskadmin.pkg_da_anonymization_lib.is_ano_required('''
            || g_vc_owner_stg
            || ''','''
            || r_col.table_name
            || ''','''
            || r_col.src_column_name
            || ''','
            || r_col.src_column_name
            || ') = ''Y'' THEN'
            || CHR (10)
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN 'SUBSTR('
               END
            || 'dmaskadmin.'
            || r_col.ora_function_name
            || '('
            || r_col.src_column_name
            || ')'
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN ',1,' || r_col.data_length || ')'
               END
            || CHR (10)
            || 'ELSE '
            || r_col.src_column_name
            || CHR (10)
            || 'END';
      END LOOP;

      NULL;
   END;

   PROCEDURE prc_set_anonymized_viewcols
   IS
   BEGIN
      FOR r_col IN (SELECT   exi.table_name
                           , exi.column_name
                           , msk.trg_column_name
                        FROM all_tab_columns exi
                           , (SELECT atab.table_name
                                   , acol.src_column_name
                                   , acol.trg_column_name
                                   , meth.ora_function_name
                                FROM dmaskadmin.da_schema_v asch
                                   , dmaskadmin.da_table_v atab
                                   , dmaskadmin.da_column_v acol
                                   , dmaskadmin.da_business_attribute_v attr
                                   , dmaskadmin.da_method_v meth
                               WHERE asch.schema_id = atab.schema_id
                                 AND atab.table_id = acol.table_id
                                 AND acol.business_attribute_id = attr.attribute_id
                                 AND attr.anonym_method_id = meth.method_id) msk
                       WHERE exi.table_name = msk.table_name(+)
                         AND exi.column_name = msk.src_column_name(+)
                         AND exi.table_name = UPPER (g_vc_table_name_hist)
                         AND exi.owner = g_vc_owner_stg
                    ORDER BY exi.column_id)
      LOOP
         l_vc_viw_anonymized    :=
               l_vc_viw_anonymized
            || ','
            || CASE
                  WHEN pkg_param.c_vc_db_name_actual IN (pkg_param.c_vc_db_name_dev, pkg_param.c_vc_db_name_tst)
                  AND r_col.trg_column_name IS NOT NULL
                     THEN r_col.trg_column_name || ' AS ' || r_col.column_name
                  ELSE r_col.column_name
               END
            || CHR (10);
      END LOOP;
   END;*/
   PROCEDURE prc_store_ddl (
      p_vc_object_type    VARCHAR2
    , p_vc_object_name    VARCHAR2
    , p_vc_object_ddl     CLOB
   )
   IS
      l_vc_prc_name   t_object_name := 'prc_store_ddl';
   BEGIN
      MERGE INTO p#frm#stag_ddl_t trg
           USING (SELECT UPPER (p_vc_object_type) AS object_type
                       , UPPER (p_vc_object_name) AS object_name
                       , p_vc_object_ddl AS object_ddl
                    FROM DUAL) src
              ON (UPPER (trg.stag_ddl_type) = UPPER (src.object_type)
              AND UPPER (trg.stag_ddl_name) = UPPER (src.object_name))
      WHEN MATCHED THEN
         UPDATE SET trg.stag_ddl_code = src.object_ddl
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_ddl_type
                     , trg.stag_ddl_name
                     , trg.stag_ddl_code
                    )
             VALUES (
                       src.object_type
                     , src.object_name
                     , src.object_ddl
                    );

      COMMIT;
   END prc_store_ddl;

   PROCEDURE prc_create_stage_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name    t_object_name := 'prc_create_stage_table';
      l_vc_message     t_string
                          :=    'Stage Table '
                             || g_vc_table_name_stage;
      l_sql_create     CLOB;
      l_list_utl_col   t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      l_list_utl_col :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_coldef_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_coldef_partition
               || ','
         END;
      -- Build create table statement
      l_sql_create := p#frm#ddls.c_template_create_table;
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_stage
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColUtl'
       , l_list_utl_col
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColumns'
       , g_vc_col_def
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING COMPRESS '
         || CASE
               WHEN g_vc_tablespace_stage_data IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_stage_data
            END
      );

      -- Partitions
      IF g_l_distr_code.COUNT > 1 THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || ' PARTITION BY LIST (#sourceDbColumnName#) (';

         FOR i IN g_l_distr_code.FIRST .. g_l_distr_code.LAST LOOP
            IF i > 1 THEN
               l_sql_create :=
                     l_sql_create
                  || ',';
            END IF;

            l_sql_create :=
                  l_sql_create
               || fct_get_partition_db (g_l_distr_code (i));
         END LOOP;

         l_sql_create :=
               l_sql_create
            || CHR (10)
            || ')';
      ELSIF g_vc_partition_expr IS NOT NULL THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || c_token_partition;
      END IF;

      prc_set_utl_columns (l_sql_create);
      prc_store_ddl (
         'TABLE'
       , g_vc_table_name_stage
       , l_sql_create
      );

      BEGIN
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Creating table'
         );
         p#frm#ddls.prc_create_object (
            'TABLE'
          , g_vc_table_name_stage
          , l_sql_create
          , p_b_drop_flag
          , TRUE
         );
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Table created'
         );
      EXCEPTION
         WHEN OTHERS THEN
            p#frm#trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'Error creating'
            );
            RAISE;
      END;

      BEGIN
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Setting compression option...'
         );

         EXECUTE IMMEDIATE
               'ALTER TABLE '
            || g_vc_table_name_stage
            || ' COMPRESS FOR QUERY LOW';

         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Compression option set'
         );
      EXCEPTION
         WHEN OTHERS THEN
            p#frm#trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'FOR QUERY LOW option not available'
            );
      END;

      -- Build constraint statement
      /*l_sql_create          := c_token_create_pk;
      p#frm#ddls.prc_set_text_param (l_sql_create
                                    , 'tableName'
                                    , g_vc_table_name_stage
                                     );
      p#frm#ddls.prc_set_text_param (l_sql_create
                                    , 'pkName'
                                    , g_vc_nk_name_stage
                                     );
      p#frm#ddls.prc_set_text_param (l_sql_create
                                    , 'listColPk'
                                    , g_vc_col_pk
                                     );
      p#frm#ddls.prc_set_text_param (l_sql_create
                                    , 'storageClause'
                                    , 'NOLOGGING ' || CASE
                                         WHEN g_l_distr_code.COUNT > 1
                                            THEN 'LOCAL'
                                      END || CASE
                                         WHEN g_vc_tablespace_stage_indx IS NOT NULL
                                            THEN ' TABLESPACE ' || g_vc_tablespace_stage_indx
                                      END
                                     );
      prc_set_utl_columns (l_sql_create);
      prc_store_ddl ('CONSTRAINT'
                   , g_vc_nk_name_stage
                   , l_sql_create
                    );

      BEGIN
           p#frm#trac.log_sub_debug (l_vc_message, 'Creating NK...');
         p#frm#ddls.prc_create_object ('CONSTRAINT'
                                      , g_vc_nk_name_stage
                                      , l_sql_create
                                      , p_b_drop_flag
                                      , TRUE
                                       );
           p#frm#trac.log_sub_debug (l_vc_message, 'NK created');
      EXCEPTION
         WHEN OTHERS
         THEN
              p#frm#trac.log_sub_debug (SQLERRM
                           , 'NK not created'
                           , param.gc_log_warn
                            );
            RAISE;
      END;*/
      IF g_n_parallel_degree > 1 THEN
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Setting parallel option...'
         );

         EXECUTE IMMEDIATE
               'ALTER TABLE '
            || g_vc_table_name_stage
            || ' PARALLEL '
            || g_n_parallel_degree;

         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Parallel option set...'
         );
      END IF;

      -- Comments from source system
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Setting comments...'
      );

      EXECUTE IMMEDIATE
            'COMMENT ON TABLE '
         || g_vc_table_name_stage
         || ' IS '''
         || g_vc_table_comment
         || '''';

      FOR r_comm IN (SELECT c.stag_column_name
                          , c.stag_column_comment
                       FROM p#frm#stag_object_t o
                          , p#frm#stag_column_t c
                      WHERE o.stag_object_id = c.stag_object_id
                        AND o.stag_object_id = g_n_object_id) LOOP
         EXECUTE IMMEDIATE
               'COMMENT ON COLUMN '
            || g_vc_table_name_stage
            || '.'
            || r_comm.stag_column_name
            || ' IS '''
            || r_comm.stag_column_comment
            || '''';
      END LOOP;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Comments set...'
      );
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_sub_error (
            l_vc_prc_name
          , l_vc_message
          , 'Stage Table: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         END IF;
   END prc_create_stage_table;

   PROCEDURE prc_create_duplicate_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name    t_object_name := 'prc_create_duplicate_table';
      l_vc_message     t_string
                          :=    'Table duplicates '
                             || g_vc_table_name_dupl;
      l_sql_create     CLOB;
      l_list_utl_col   t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      l_list_utl_col :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_coldef_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_coldef_partition
               || ','
         END;
      -- Build create table statement
      l_sql_create := p#frm#ddls.c_template_create_table;
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_dupl
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColUtl'
       , l_list_utl_col
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColumns'
       , g_vc_col_def
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING'
         || CASE
               WHEN g_vc_tablespace_stage_data IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_stage_data
            END
      );

      -- Stage1 partitions
      IF g_l_distr_code.COUNT > 1 THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || ' PARTITION BY LIST (#sourceDbColumnName#) (';

         FOR i IN g_l_distr_code.FIRST .. g_l_distr_code.LAST LOOP
            IF i > 1 THEN
               l_sql_create :=
                     l_sql_create
                  || ',';
            END IF;

            l_sql_create :=
                  l_sql_create
               || fct_get_partition_db (g_l_distr_code (i));
         END LOOP;

         l_sql_create :=
               l_sql_create
            || CHR (10)
            || ')';
      ELSIF g_vc_partition_expr IS NOT NULL THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || c_token_partition;
      END IF;

      prc_set_utl_columns (l_sql_create);
      prc_store_ddl (
         'TABLE'
       , g_vc_table_name_dupl
       , l_sql_create
      );

      BEGIN
         p#frm#ddls.prc_create_object (
            'TABLE'
          , g_vc_table_name_dupl
          , l_sql_create
          , p_b_drop_flag
          , TRUE
         );
      EXCEPTION
         WHEN OTHERS THEN
            p#frm#trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'Duplicates Table: Warning'
            );
            RAISE;
      END;

      IF g_n_parallel_degree > 1 THEN
         l_sql_create :=
               'ALTER TABLE '
            || g_vc_table_name_dupl
            || ' PARALLEL '
            || g_n_parallel_degree;
         p#frm#ddls.prc_execute (l_sql_create);
      END IF;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Duplicates Table: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_sub_error (
            l_vc_prc_name
          , l_vc_message
          , 'Stage Table: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         END IF;
   END prc_create_duplicate_table;

   PROCEDURE prc_create_diff_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name            t_object_name := 'prc_create_diff_table';
      l_vc_message             t_string
                                  :=    'Table difference '
                                     || g_vc_table_name_diff;
      l_sql_create             CLOB;
      l_sql_subpart_template   t_string;
      l_list_utl_col           t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Difference table: Begin'
      );
      l_list_utl_col :=
            c_token_utl_coldef_hist
         || ','
         || CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     c_token_utl_coldef_source_db
                  || ','
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     c_token_utl_coldef_partition
                  || ','
            END;
      l_sql_create := p#frm#ddls.c_template_create_table;
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_diff
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColUtl'
       , l_list_utl_col
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColumns'
       , g_vc_col_def
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING '
         || CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_diff_subpartition
               ELSE
                  c_token_diff_partition
            END
         || CASE
               WHEN g_vc_tablespace_stage_data IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_stage_data
            END
      );
      prc_set_utl_columns (l_sql_create);
      prc_store_ddl (
         'TABLE'
       , g_vc_table_name_diff
       , l_sql_create
      );

      BEGIN
         p#frm#ddls.prc_create_object (
            'TABLE'
          , g_vc_table_name_diff
          , l_sql_create
          , p_b_drop_flag
          , TRUE
         );
      EXCEPTION
         WHEN OTHERS THEN
            p#frm#trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'Difference Table: Error'
            );
            RAISE;
      END;

      l_sql_create := p#frm#ddls.c_template_create_pk;
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_diff
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'pkName'
       , g_vc_nk_name_diff
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColPk'
       , g_vc_col_pk
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING'
         || CASE
               WHEN g_vc_tablespace_stage_indx IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_stage_indx
            END
      );
      prc_store_ddl (
         'CONSTRAINT'
       , g_vc_nk_name_diff
       , l_sql_create
      );

      BEGIN
         p#frm#ddls.prc_create_object (
            'CONSTRAINT'
          , g_vc_table_name_diff
          , l_sql_create
          , p_b_drop_flag
          , p_b_raise_flag
         );
      EXCEPTION
         WHEN OTHERS THEN
            p#frm#trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'Difference table: Warning'
            );
            RAISE;
      END;

      IF g_n_parallel_degree > 1 THEN
         l_sql_create :=
               'ALTER TABLE '
            || g_vc_table_name_diff
            || ' PARALLEL '
            || g_n_parallel_degree;
         p#frm#ddls.prc_execute (l_sql_create);
      END IF;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Difference table: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_sub_error (
            l_vc_prc_name
          , l_vc_message
          , 'Difference table: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         END IF;
   END prc_create_diff_table;

   PROCEDURE prc_create_hist_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name     t_object_name := 'prc_create_hist_table';
      l_vc_message      t_string
                           :=    'History Table '
                              || g_vc_table_name_hist;
      l_sql_create      t_string;
      l_list_utl_col    t_string;
      l_l_utl_columns   DBMS_SQL.varchar2s;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Diff Table: Begin'
      );
      -- Set anonymizad column lists
      l_vc_def_anonymized := '';
      l_vc_ini_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_coldefs;
      -- Generate table ddl
      l_list_utl_col :=
            c_token_utl_coldef_hist
         || ','
         || CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     c_token_utl_coldef_source_db
                  || ','
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     c_token_utl_coldef_partition
                  || ','
            END;
      l_sql_create := p#frm#ddls.c_template_create_table;
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_hist
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColUtl'
       , l_list_utl_col
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColumns'
       ,    g_vc_col_def
         || l_vc_def_anonymized
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING COMPRESS '
         || CASE
               WHEN g_vc_tablespace_hist_data IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_hist_data
            END
      );

      IF g_vc_partition_expr IS NOT NULL THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || c_token_partition;
      END IF;

      prc_set_utl_columns (l_sql_create);
      -- Execute table ddl
      prc_store_ddl (
         'TABLE'
       , g_vc_table_name_hist
       , l_sql_create
      );

      BEGIN
         -- Try to create table
         p#frm#ddls.prc_create_object (
            'TABLE'
          , g_vc_table_name_hist
          , l_sql_create
          , FALSE
          , TRUE
         );
      EXCEPTION
         WHEN OTHERS THEN
            p#frm#trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'History Table Create: Warning'
            );

            IF l_vc_def_anonymized IS NOT NULL THEN
               BEGIN
                  p#frm#trac.log_sub_debug (
                     'Add new anonymized columns'
                   , 'History Table Add Anonymized'
                  );

                  -- Try to add newly anonymized columns
                  EXECUTE IMMEDIATE
                        'ALTER TABLE '
                     || g_vc_table_name_hist
                     || ' ADD ('
                     || LTRIM (
                           l_vc_def_anonymized
                         , ','
                        )
                     || ')';
               EXCEPTION
                  WHEN OTHERS THEN
                     p#frm#trac.log_sub_warn (
                        l_vc_prc_name
                      , l_vc_message
                      , 'History Table Add Anonymized: Warning'
                     );

                     IF p_b_raise_flag THEN
                        RAISE;
                     END IF;
               END;
            END IF;

            IF l_vc_ini_anonymized IS NOT NULL THEN
               BEGIN
                  p#frm#trac.log_sub_debug (
                     l_vc_prc_name
                   , l_vc_message
                   , 'Fill new anonymized columns - History Table Upd Anonymized'
                  );

                  -- Try to fill newly added anonymized columns
                  EXECUTE IMMEDIATE
                        'UPDATE '
                     || g_vc_table_name_hist
                     || ' SET '
                     || LTRIM (
                           l_vc_ini_anonymized
                         , ','
                        );

                  COMMIT;
               EXCEPTION
                  WHEN OTHERS THEN
                     p#frm#trac.log_sub_warn (
                        l_vc_prc_name
                      , l_vc_message
                      , 'History Table Upd Anonymized: Warning'
                     );

                     IF p_b_raise_flag THEN
                        RAISE;
                     END IF;
               END;
            END IF;

            IF p_b_raise_flag THEN
               RAISE;
            END IF;
      END;

      IF g_n_parallel_degree > 1 THEN
         l_sql_create :=
               'ALTER TABLE '
            || g_vc_table_name_hist
            || ' PARALLEL '
            || g_n_parallel_degree;
         p#frm#ddls.prc_execute (l_sql_create);
      END IF;

      IF g_vc_fb_archive IS NOT NULL
     AND g_n_fbda_flag = 1 THEN
         BEGIN
            EXECUTE IMMEDIATE
                  'ALTER TABLE '
               || g_vc_table_name_hist
               || ' FLASHBACK ARCHIVE '
               || g_vc_fb_archive;
         EXCEPTION
            WHEN OTHERS THEN
               p#frm#trac.log_sub_debug (
                  l_vc_prc_name
                , l_vc_message
                , 'History Table: FLASHBACK'
               );
         END;
      END IF;

      BEGIN
         EXECUTE IMMEDIATE
               'ALTER TABLE '
            || g_vc_table_name_hist
            || ' COMPRESS FOR QUERY LOW';
      EXCEPTION
         WHEN OTHERS THEN
            p#frm#trac.log_sub_warn (
               l_vc_prc_name
             , l_vc_message
             , 'FOR QUERY LOW option not available'
            );
      END;

      -- Generate NK ddl
      l_sql_create := p#frm#ddls.c_template_create_pk;
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_hist
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'pkName'
       , g_vc_nk_name_hist
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'listColPk'
       ,    p#frm#stag_param.c_vc_column_valid_to
         || ','
         || g_vc_col_pk
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING '
         || CASE
               WHEN g_l_distr_code.COUNT > 1
                AND p#frm#dict.fct_check_part (
                       NULL
                     , g_vc_owner_stg
                     , g_vc_table_name_hist
                    ) THEN
                  'LOCAL'
            END
         || CASE
               WHEN g_vc_tablespace_hist_indx IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_hist_indx
            END
      );
      -- Execute NK ddl
      prc_store_ddl (
         'CONSTRAINT'
       , g_vc_nk_name_hist
       , l_sql_create
      );

      BEGIN
         p#frm#ddls.prc_create_object (
            'CONSTRAINT'
          , g_vc_nk_name_hist
          , l_sql_create
          , FALSE
          , TRUE
         );
      EXCEPTION
         WHEN OTHERS THEN
            p#frm#trac.log_sub_warn (
               l_vc_prc_name
             , l_vc_message
             , 'Hist table Natural Key: Warning'
            );

            IF p_b_raise_flag THEN
               RAISE;
            END IF;
      END;

      -- Create not null constraints
      l_l_utl_columns :=
         p#frm#type.fct_string_to_list (
            c_token_utl_column_hist
          , ','
         );

      FOR i IN l_l_utl_columns.FIRST .. l_l_utl_columns.LAST LOOP
         l_sql_create := p#frm#ddls.c_template_create_notnull;
         p#frm#ddls.prc_set_text_param (
            l_sql_create
          , 'tableName'
          , g_vc_table_name_hist
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_create
          , 'columnName'
          , l_l_utl_columns (i)
         );
         -- Execute Check ddl
         prc_set_utl_columns (l_sql_create);
         prc_store_ddl (
            'CONSTRAINT'
          ,    SUBSTR (
                  g_vc_nk_name_hist
                , 1
                , 25
               )
            || '_NN'
            || TO_CHAR (
                  i
                , '00'
               )
          , l_sql_create
         );

         BEGIN
            p#frm#ddls.prc_create_object (
               'CONSTRAINT'
             ,    SUBSTR (
                     g_vc_nk_name_hist
                   , 1
                   , 25
                  )
               || '_NN'
               || TO_CHAR (
                     i
                   , '00'
                  )
             , l_sql_create
             , FALSE
             , TRUE
            );
         EXCEPTION
            WHEN OTHERS THEN
               p#frm#trac.log_warn (
                  SQLERRM
                , 'Hist Natural Key: Warning'
               );

               IF p_b_raise_flag THEN
                  RAISE;
               END IF;
         END;
      END LOOP;

      /*EXECUTE IMMEDIATE
            'GRANT SELECT ON '
         || g_vc_table_name_hist
         || ' TO '
         || p#frm#stag_param.c_vc_list_grantee;*/
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'History Table: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_sub_warn (
            l_vc_prc_name
          , l_vc_message
          , 'History Table: Warning'
         );

         IF p_b_raise_flag THEN
            RAISE;
         END IF;
   END prc_create_hist_table;

   PROCEDURE prc_create_hist_view (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name   t_object_name := 'prc_create_hist_view';
      l_vc_message    t_string
                         :=    'View Hist '
                            || g_vc_view_name_hist;
      l_sql_create    t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist View: Begin'
      );
      l_vc_viw_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_viewcols;
      --
      l_sql_create :=
            'CREATE OR REPLACE FORCE VIEW '
         || g_vc_view_name_hist
         || ' AS SELECT '
         || NVL (
               LTRIM (
                  l_vc_viw_anonymized
                , ','
               )
             , '*'
            )
         || ' FROM '
         || g_vc_table_name_hist;
      prc_store_ddl (
         'VIEW'
       , g_vc_view_name_hist
       , l_sql_create
      );

      EXECUTE IMMEDIATE l_sql_create;

      EXECUTE IMMEDIATE
            'GRANT SELECT ON '
         || g_vc_view_name_hist
         || ' TO '
         || p#frm#stag_param.c_vc_list_grantee;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist View: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Hist View: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         ELSE
            NULL;
         END IF;
   END;

   PROCEDURE prc_create_hist_synonym (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name   t_object_name := 'prc_create_hist_synonym';
      l_vc_message    t_string
                         :=    'Synonym Hist '
                            || g_vc_view_name_hist;
      l_sql_create    t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist Synonym: Begin'
      );
      l_vc_viw_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_viewcols;
      --
      l_sql_create :=
            'CREATE OR REPLACE SYNONYM '
         || g_vc_view_name_hist
         || ' FOR '
         || g_vc_table_name_hist;
      prc_store_ddl (
         'SYNONYM'
       , g_vc_view_name_hist
       , l_sql_create
      );

      EXECUTE IMMEDIATE l_sql_create;

      EXECUTE IMMEDIATE
            'GRANT SELECT ON '
         || g_vc_view_name_hist
         || ' TO '
         || p#frm#stag_param.c_vc_list_grantee;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist Synonym: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_sub_warn (
            l_vc_prc_name
          , l_vc_message
          , 'Hist Synonym: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         ELSE
            NULL;
         END IF;
   END;

   PROCEDURE prc_create_fbda_view (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name   t_object_name := 'prc_create_fbda_view';
      l_vc_message    t_string
                         :=    'View Hist '
                            || g_vc_view_name_hist;
      l_sql_create    t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist View: Begin'
      );
      l_vc_viw_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_viewcols;
      --
      l_sql_create :=
            'CREATE OR REPLACE FORCE VIEW '
         || g_vc_view_name_fbda
         || ' AS SELECT versions_starttime
     , versions_startscn
     , versions_endtime
     , versions_endscn
     , versions_xid
     , versions_operation
     '
         || l_vc_viw_anonymized
         || ' FROM '
         || g_vc_table_name_hist
         || ' VERSIONS BETWEEN TIMESTAMP MINVALUE AND MAXVALUE';
      prc_store_ddl (
         'VIEW'
       , g_vc_view_name_fbda
       , l_sql_create
      );

      EXECUTE IMMEDIATE l_sql_create;

      EXECUTE IMMEDIATE
            'GRANT SELECT ON '
         || g_vc_view_name_fbda
         || ' TO '
         || p#frm#stag_param.c_vc_list_grantee;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist View: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         p#frm#trac.log_sub_warn (
            l_vc_prc_name
          , l_vc_message
          , 'Hist View: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         ELSE
            NULL;
         END IF;
   END;

   PROCEDURE prc_create_prc_trunc_stage (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_trunc_stage';
      l_vc_message       t_string
                            :=    'Procedure trunc stage '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- HEAD
      --
      l_sql_prc := p#frm#ddls.c_template_prc_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_trunc_stage
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      l_sql_prc_token := p#frm#stmt.c_token_truncate_table;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_stage
      );
      l_sql_prc_buffer := l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         l_sql_prc_token := p#frm#stmt.c_token_truncate_table;
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Put body in the generic prc template
      l_sql_prc := p#frm#ddls.c_template_prc_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_trunc_stage
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_trunc_stage;

   PROCEDURE prc_create_prc_trunc_diff (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_trunc_diff';
      l_vc_message       t_string
                            :=    'Procedure trunc diff '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- HEAD
      --
      l_sql_prc := p#frm#ddls.c_template_prc_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_trunc_diff
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      l_sql_prc_buffer := p#frm#stmt.c_token_truncate_table;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'tableName'
       , g_vc_table_name_diff
      );
      -- Put body in the generic prc template
      l_sql_prc := p#frm#ddls.c_template_prc_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_trunc_diff
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_trunc_diff;

   PROCEDURE prc_create_prc_init (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name         t_object_name := 'prc_create_prc_init';
      l_vc_message          t_string
                               :=    'Procedure load init '
                                  || g_vc_package_main;
      l_sql_prc             CLOB;
      l_sql_prc_token       CLOB;
      l_sql_prc_buffer      CLOB;
      -- List of columns
      l_vc_col_all          t_string;
      l_list_utl_col        t_string;
      l_list_utl_val        t_string;
      l_list_utl_col_dupl   t_string;
      l_list_utl_val_dupl   t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      l_vc_col_anonymized := '';
      l_vc_fct_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_columns;
      --
      -- Set utl columns strings
      l_list_utl_col_dupl :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_column_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_column_partition
               || ','
         END;
      prc_set_utl_columns (l_list_utl_col_dupl);
      l_list_utl_col :=
            c_token_utl_column_hist
         || ','
         || l_list_utl_col_dupl;
      prc_set_utl_columns (l_list_utl_col);
      --
      -- Get lists of columns
      l_vc_col_all :=
         p#frm#dict.fct_get_column_subset (
            g_vc_dblink
          , g_vc_owner_src
          , g_vc_table_name_source
          , g_vc_owner_stg
          , g_vc_table_name_hist
          , 'COMMON_ALL'
          , 'LIST_SIMPLE'
          , p_vc_exclude_list   => l_list_utl_col
         );
      --
      -- HEAD
      --
      l_sql_prc := p#frm#ddls.c_template_prc_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_init
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      -- Add token to check if hist table is empty
      l_sql_prc_token :=
            p#frm#stmt.c_token_enable_parallel_dml
         || CHR (10)
         || c_token_check_table_isempty;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_hist
      );
      l_sql_prc_buffer := l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         -- Truncate duplicates table
         l_sql_prc_token := p#frm#stmt.c_token_truncate_table;
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Fill stage hist for each source db
      FOR i IN g_l_distr_code.FIRST .. g_l_distr_code.LAST LOOP
         l_sql_prc_token := c_token_stage_insert;
         --
         -- Values for the utility columns
         l_list_utl_val_dupl :=
            CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     ''''
                  || g_l_distr_code (i)
                  || ''', '
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     fct_get_partition_expr
                  || ','
            END;

         IF g_n_source_nk_flag = 0
        AND g_vc_col_pk_src IS NOT NULL THEN
            l_vc_col_pk_notnull :=
               p#frm#stag_meta.fct_get_column_list (
                  g_n_object_id
                , 'PK'
                , 'AND_NOTNULL'
               );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , p#frm#stmt.c_sql_insert_dedupl
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'duplIdentifier'
             , g_vc_table_name_dupl
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'pkColumnList'
             , g_vc_col_pk_src
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'deduplRankClause'
             , g_vc_dedupl_rank_clause
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlColumnListForDupl'
             , l_list_utl_col_dupl
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlValueListForDupl'
             , l_list_utl_val_dupl
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'notNullClause'
             , l_vc_col_pk_notnull
            );
         ELSE
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , p#frm#stmt.c_sql_insert_copy
            );
         END IF;

         l_list_utl_val :=
               c_token_utl_colval_hist
            || ','
            || l_list_utl_val_dupl;
         -- There is no optional incremental retrieval (this is an init procedure)
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'computeIncrementBound'
          , NULL
         );
         --
         --
         p#frm#stmt.prc_set_text_param (
            l_sql_prc_token
          , 'targetIdentifier'
          , g_vc_table_name_hist
         );
         p#frm#stmt.prc_set_text_param (
            l_sql_prc_token
          , 'sourceIdentifier'
          , g_vc_source_identifier
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'sourceColumnList'
          , l_vc_col_all
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetColumnList'
          , l_vc_col_all
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlColumnList'
          , l_list_utl_col
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlValueList'
          , l_list_utl_val
         );
         --
         --
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'filterClause'
          , CASE
               WHEN g_vc_filter_clause IS NOT NULL THEN
                     ' WHERE '
                  || g_vc_filter_clause
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , NULL
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END LOOP;

      l_sql_prc_token := c_token_analyze;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'statisticsType'
       , 'HSAN'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_hist
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'stgOwner'
       , g_vc_owner_stg
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'partition'
       , NULL
      );
      l_sql_prc_buffer :=
            l_sql_prc_buffer
         || CHR (10)
         || l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         -- Truncate duplicates table
         l_sql_prc_token := c_token_analyze;
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'statisticsType'
          , 'DUAN'
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'stgOwner'
          , g_vc_owner_stg
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , NULL
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Put body in the generic prc template
      l_sql_prc := p#frm#ddls.c_template_prc_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'sourceCode'
       , g_vc_source_code
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'objectName'
       , g_vc_object_name
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'sourceTable'
       , g_vc_table_name_source
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_init
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_init;

   PROCEDURE prc_create_prc_load_stage (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_load_stage';
      l_vc_message       t_string
                            :=    'Procedure load stage '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
      l_list_utl_col     t_string;
      l_list_utl_val     t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- Set utl columns strings
      l_list_utl_col :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_column_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_column_partition
               || ','
         END;
      prc_set_utl_columns (l_list_utl_col);
      --
      -- HEAD
      --
      l_sql_prc := p#frm#ddls.c_template_prc_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_stage
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      -- Truncate stage table
      l_sql_prc_token :=
            p#frm#stmt.c_token_enable_parallel_dml
         || CHR (10)
         || p#frm#stmt.c_token_truncate_table;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_stage
      );
      l_sql_prc_buffer := l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         -- Truncate duplicates table
         l_sql_prc_token := p#frm#stmt.c_token_truncate_table;
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Fill stage table for each source db
      -- Fill stage for each source db
      FOR i IN g_l_distr_code.FIRST .. g_l_distr_code.LAST LOOP
         l_sql_prc_token := c_token_stage_insert;
         --
         -- Values for the utility columns
         l_list_utl_val :=
            CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     ''''
                  || g_l_distr_code (i)
                  || ''', '
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     fct_get_partition_expr
                  || ', '
            END;

         IF g_n_source_nk_flag = 0
        AND g_vc_col_pk_src IS NOT NULL THEN
            l_vc_col_pk_notnull :=
               p#frm#stag_meta.fct_get_column_list (
                  g_n_object_id
                , 'PK'
                , 'AND_NOTNULL'
               );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , p#frm#stmt.c_sql_insert_dedupl
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'duplIdentifier'
             , g_vc_table_name_dupl
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'pkColumnList'
             , g_vc_col_pk_src
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'deduplRankClause'
             , g_vc_dedupl_rank_clause
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlColumnListForDupl'
             , l_list_utl_col
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlValueListForDupl'
             , l_list_utl_val
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'notNullClause'
             , l_vc_col_pk_notnull
            );
         ELSE
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , p#frm#stmt.c_sql_insert_copy
            );
         END IF;

         -- Add optional increment retrieval statement
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'computeIncrementBound'
          , CASE
               WHEN g_vc_increment_column IS NOT NULL THEN
                  c_token_stage_get_incr_bound
            END
         );
         --
         --
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'insertStatement'
          , p#frm#stmt.c_sql_insert_copy
         );
         p#frm#stmt.prc_set_text_param (
            l_sql_prc_token
          , 'targetIdentifier'
          , g_vc_table_name_stage
         );
         p#frm#stmt.prc_set_text_param (
            l_sql_prc_token
          , 'sourceIdentifier'
          , g_vc_source_identifier
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'sourceColumnList'
          , g_vc_col_all
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetColumnList'
          , g_vc_col_all
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlColumnList'
          , l_list_utl_col
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlValueList'
          , l_list_utl_val
         );
         --
         --
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'incrementColumn'
          , g_vc_increment_column
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'histTableName'
          , g_vc_table_name_hist
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'filterClause'
          ,    CASE
                  WHEN g_vc_filter_clause IS NOT NULL THEN
                        'WHERE '
                     || g_vc_filter_clause
               END
            || CASE
                  WHEN g_vc_increment_column IS NOT NULL THEN
                        CASE
                           WHEN g_vc_filter_clause IS NULL THEN
                              ' WHERE '
                           ELSE
                              ' AND '
                        END
                     || g_vc_increment_column
                     || ' > l_t_increment_bound - '
                     || NVL (g_n_increment_buffer, 0)
               END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || '_'
                  || g_l_distr_code (i)
                  || ')'
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END LOOP;

      -- Put body in the generic prc template
      l_sql_prc := p#frm#ddls.c_template_prc_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , CASE
            WHEN g_vc_increment_column IS NOT NULL THEN
                  'l_t_increment_bound '
               || g_vc_increment_coldef
               || ';'
         END
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'sourceCode'
       , g_vc_source_code
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'objectName'
       , g_vc_object_name
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'sourceTable'
       , g_vc_table_name_source
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_stage
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_load_stage;

   PROCEDURE prc_create_prc_load_stage_p (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_load_stage_p';
      l_vc_message       t_string
                            :=    'Procedure load stage partition '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
      l_n_iter_begin     NUMBER;
      l_n_iter_end       NUMBER;
      l_list_utl_col     t_string;
      l_list_utl_val     t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- Set utl columns strings
      l_list_utl_col :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_column_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_column_partition
               || ','
         END;
      prc_set_utl_columns (l_list_utl_col);

      --
      -- HEAD
      --
      IF g_l_distr_code.COUNT > 1 THEN
         FOR i IN g_l_dblink.FIRST .. g_l_dblink.LAST LOOP
            -- Stage1 procedure head
            l_sql_prc := p#frm#ddls.c_template_prc_head;
            p#frm#ddls.prc_set_text_param (
               l_sql_prc
             , 'prcName'
             ,    p#frm#stag_param.c_vc_procedure_load_stage_p
               || '_'
               || g_l_distr_code (i)
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc
             , 'prcParameters'
             , c_token_prc_param
            );
            l_buffer_pkg_head :=
                  l_buffer_pkg_head
               || CHR (10)
               || l_sql_prc;
         END LOOP;
      ELSIF g_vc_partition_expr IS NOT NULL THEN
         FOR i IN 0 .. 9 LOOP
            -- Stage1 procedure head
            l_sql_prc := p#frm#ddls.c_template_prc_head;
            p#frm#ddls.prc_set_text_param (
               l_sql_prc
             , 'prcName'
             ,    p#frm#stag_param.c_vc_procedure_load_stage_p
               || '_p'
               || i
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc
             , 'prcParameters'
             , c_token_prc_param
            );
            l_buffer_pkg_head :=
                  l_buffer_pkg_head
               || CHR (10)
               || l_sql_prc;
         END LOOP;
      END IF;

      --
      -- BODY
      --
      IF g_l_distr_code.COUNT > 1 THEN
         l_n_iter_begin := g_l_dblink.FIRST;
         l_n_iter_end := g_l_dblink.LAST;
      ELSIF g_vc_partition_expr IS NOT NULL THEN
         l_n_iter_begin := 0;
         l_n_iter_end := 9;
      END IF;

      FOR i IN l_n_iter_begin .. l_n_iter_end LOOP
         l_sql_prc_token := p#frm#stmt.c_token_truncate_partition;
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_stage
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || '_'
                  || g_l_distr_code (i)
                  || ')'
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         -- Fill stage table for each source db
         l_sql_prc_token :=
               l_sql_prc_token
            || CHR (10)
            || c_token_stage_insert;
         --
         -- Values for the utility columns
         l_list_utl_val :=
            CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     ''''
                  || g_l_distr_code (i)
                  || ''', '
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     fct_get_partition_expr
                  || ', '
            END;

         IF g_n_source_nk_flag = 0
        AND g_vc_col_pk_src IS NOT NULL THEN
            l_vc_col_pk_notnull :=
               p#frm#stag_meta.fct_get_column_list (
                  g_n_object_id
                , 'PK'
                , 'AND_NOTNULL'
               );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , p#frm#stmt.c_sql_insert_dedupl
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'duplIdentifier'
             , g_vc_table_name_dupl
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'pkColumnList'
             , g_vc_col_pk_src
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'deduplRankClause'
             , g_vc_dedupl_rank_clause
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlColumnListForDupl'
             , l_list_utl_col
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlValueListForDupl'
             , l_list_utl_val
            );
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'notNullClause'
             , l_vc_col_pk_notnull
            );
         ELSE
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , p#frm#stmt.c_sql_insert_copy
            );
         END IF;

         -- Add optional increment retrieval statement
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'computeIncrementBound'
          , CASE
               WHEN g_vc_increment_column IS NOT NULL THEN
                  c_token_stage_get_incr_bound
            END
         );
         --
         --
         g_vc_source_identifier :=
            CASE
               WHEN g_l_dblink.COUNT = 1 THEN
                  CASE
                     WHEN g_l_dblink (1) IS NULL
                      AND g_l_owner_src (1) = g_vc_owner_stg THEN
                        g_vc_table_name_source
                     ELSE
                           CASE
                              WHEN g_l_owner_src (1) IS NOT NULL THEN
                                    g_l_owner_src (1)
                                 || '.'
                           END
                        || g_vc_table_name_source
                        || CASE
                              WHEN g_l_dblink (1) IS NOT NULL THEN
                                    '@'
                                 || g_l_dblink (1)
                           END
                  END
               ELSE
                  CASE
                     WHEN g_l_dblink (i) IS NULL
                      AND g_l_owner_src (i) = g_vc_owner_stg THEN
                        g_vc_table_name_source
                     ELSE
                        CASE
                           WHEN g_l_owner_src (i) IS NOT NULL THEN
                                 g_l_owner_src (i)
                              || '.'
                              || g_vc_table_name_source
                              || CASE
                                    WHEN g_l_dblink (i) IS NOT NULL THEN
                                          '@'
                                       || g_l_dblink (i)
                                 END
                        END
                  END
            END;
         --
         --
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'insertStatement'
          , p#frm#stmt.c_sql_insert_copy
         );
         p#frm#stmt.prc_set_text_param (
            l_sql_prc_token
          , 'targetIdentifier'
          , g_vc_table_name_stage
         );
         p#frm#stmt.prc_set_text_param (
            l_sql_prc_token
          , 'sourceIdentifier'
          , g_vc_source_identifier
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'sourceColumnList'
          , g_vc_col_all
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetColumnList'
          , g_vc_col_all
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlColumnList'
          , l_list_utl_col
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlValueList'
          , l_list_utl_val
         );
         --
         --
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'incrementColumn'
          , g_vc_increment_column
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'filterClause'
          ,    CASE
                  WHEN g_vc_partition_expr IS NOT NULL THEN
                        ' WHERE '
                     || fct_get_partition_expr
                     || ' = '
                     || i
               END
            || CASE
                  WHEN g_vc_filter_clause IS NOT NULL THEN
                        CASE
                           WHEN g_vc_partition_expr IS NULL THEN
                              ' WHERE '
                           ELSE
                              ' AND '
                        END
                     || g_vc_filter_clause
               END
            || CASE
                  WHEN g_vc_increment_column IS NOT NULL THEN
                        CASE
                           WHEN g_vc_partition_expr IS NULL
                            AND g_vc_filter_clause IS NULL THEN
                              ' WHERE '
                           ELSE
                              ' AND '
                        END
                     || g_vc_increment_column
                     || ' > l_t_increment_bound'
               END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || '_'
                  || g_l_distr_code (i)
                  || ')'
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_l_distr_code.COUNT > 1
                 OR g_vc_partition_expr IS NOT NULL THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         -- Put body in the generic prc template
         l_sql_prc := p#frm#ddls.c_template_prc_body;
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'prcParameters'
          , c_token_prc_param
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'varList'
          , CASE
               WHEN g_vc_increment_column IS NOT NULL THEN
                     'l_t_increment_bound '
                  || g_vc_increment_coldef
                  || ';'
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'prcInitialize'
          , c_token_prc_initialize
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'prcFinalize'
          , c_token_prc_finalize
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'exceptionHandling'
          , c_token_prc_exception
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'prcBody'
          , l_sql_prc_token
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'sourceCode'
          , g_vc_source_code
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'objectName'
          , g_vc_object_name
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'sourceTable'
          , g_vc_table_name_source
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc
          , 'prcName'
          ,    p#frm#stag_param.c_vc_procedure_load_stage_p
            || '_'
            || CASE
                  WHEN g_l_distr_code.COUNT > 1 THEN
                     g_l_distr_code (i)
                  ELSE
                        'p'
                     || i
               END
         );
         l_buffer_pkg_body :=
               l_buffer_pkg_body
            || CHR (10)
            || l_sql_prc;
      END LOOP;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_load_stage_p;

   PROCEDURE prc_create_prc_load_diff (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name         t_object_name := 'prc_create_prc_load_diff';
      l_vc_message          t_string
                               :=    'Procedure load diff '
                                  || g_vc_package_main;
      l_sql_prc             CLOB;
      l_sql_prc_token       CLOB;
      l_sql_prc_buffer      CLOB;
      --
      l_n_iter_begin        NUMBER;
      l_n_iter_end          NUMBER;
      -- List of columns
      l_vc_col_list         t_string;
      l_vc_col_pk_hist      t_string;
      l_vc_clause_on        t_string;
      l_vc_upd_clause_set   t_string;
      l_vc_clause_history   t_string;
      l_vc_clause_update    t_string;
      l_vc_col_nvl2         t_string;
      -- Utl columns
      l_list_utl_col        t_string;
      l_list_utl_val        t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- Set utl columns strings
      l_list_utl_col := c_token_utl_column_hist;
      -- Get list of pk columns of the History Table
      p#frm#trac.log_sub_trace (
         l_vc_prc_name
       , l_vc_message
       , 'Get list of pk columns of the History Table'
      );
      l_vc_col_pk_hist :=
         p#frm#dict.fct_get_column_list (
            NULL
          , g_vc_owner_stg
          , g_vc_table_name_hist
          , 'PK'
          , 'LIST_SIMPLE'
          , p_vc_exclude_list   => p#frm#stag_param.c_vc_column_valid_to
         );
      p#frm#trac.log_sub_trace (
         l_vc_prc_name
       , l_vc_message
       , 'Got columns'
      );
      --
      -- HEAD
      --
      l_sql_prc := p#frm#ddls.c_template_prc_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_diff
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      -- Hist incremental procedure head
      l_sql_prc := p#frm#ddls.c_template_prc_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_diff_incr
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      -- Get list of all columns
      p#frm#trac.log_sub_trace (
         l_vc_prc_name
       , l_vc_message
       , 'Get list of all columns in common within stage and hist tables'
      );
      l_vc_col_list :=
         p#frm#dict.fct_get_column_subset (
            NULL
          , g_vc_owner_stg
          , g_vc_table_name_stage
          , g_vc_owner_stg
          , g_vc_table_name_hist
          , 'COMMON_ALL'
          , 'LIST_SIMPLE'
         );
      p#frm#trac.log_sub_trace (
         l_vc_prc_name
       , l_vc_message
       , 'Got columns'
      );                                                                                                                                                                   -- In case the pk of stage 1 and History Tables is not the same, write a warning log

      IF g_vc_col_pk = l_vc_col_pk_hist
      OR (g_vc_col_pk IS NULL
      AND l_vc_col_pk_hist IS NULL) THEN
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          ,    'Source '
            || g_vc_source_code
            || ', Object '
            || g_vc_table_name_source
            || ' : Stage and hist table have the same Natural Keys'
         );
      ELSE
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          ,    'Source '
            || g_vc_source_code
            || ', Object '
            || g_vc_table_name_source
            || ' : Stage and hist table have different Natural Keys'
         );
      END IF;

      -- analyze stage table
      l_sql_prc_token := c_token_analyze;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'statisticsType'
       , 'STAN'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'stgOwner'
       , g_vc_owner_stg
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_stage
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'partition'
       , NULL
      );
      l_sql_prc_buffer := l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         -- Analyse duplicates table
         l_sql_prc_token := c_token_analyze;
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'statisticsType'
          , 'DUAN'
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'stgOwner'
          , g_vc_owner_stg
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , NULL
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Check hist/stage nk differences and truncate diff table
      l_sql_prc_buffer :=
            l_sql_prc_buffer
         || CHR (10)
         || c_token_diff_check;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'stgOwner'
       , g_vc_owner_stg
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'stageTableName'
       , g_vc_table_name_stage
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'diffTableName'
       , g_vc_table_name_diff
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'histTableName'
       , g_vc_table_name_hist
      );

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NULL THEN
         -- If there is no natural key (tecnical PK) then use the alternate difference method
         l_vc_clause_on :=
            p#frm#dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_ALL'
             , 'AND_ALIAS'
             , 'trg'
             , 'src'
            );
      ELSE
         -- If there is a natural key (tecnical PK) and the full outer join method is specified,
         -- then use the merge template
         -- Get list of conditions for the on clause of the merge
         l_vc_clause_on :=
            p#frm#dict.fct_get_column_list (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'PK'
             , 'AND_ALIAS'
             , 'trg'
             , 'src'
             , p_vc_exclude_list   => p#frm#stag_param.c_vc_column_valid_to
            );
         l_vc_col_nvl2 :=
            p#frm#dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_ALL'
             , 'LIST_NVL2'
             , 'src'
             , 'trg'
            );
         l_vc_clause_history :=
            p#frm#dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_NPK'
             , 'OR_DECODE'
             , 'trg'
             , 'src'
             , p_vc_exclude_list   => g_vc_col_update
            );
         l_vc_clause_update :=
            p#frm#dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_NPK'
             , 'OR_DECODE'
             , 'trg'
             , 'src'
             , p_vc_exclude_list   => g_vc_col_hist
            );
      END IF;

      l_n_iter_begin := 0;

      IF g_vc_partition_expr IS NOT NULL THEN
         l_n_iter_end := 9;
      ELSE
         l_n_iter_end := 0;
      END IF;

      l_sql_prc_token := '';

      FOR i IN l_n_iter_begin .. l_n_iter_end LOOP
         l_sql_prc_token := c_token_diff_insert;

         IF g_n_source_nk_flag = 0
        AND g_vc_col_pk_src IS NULL THEN
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , p#frm#stmt.c_sql_insert_diff_without_nk
            );
         ELSE
            p#frm#ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , p#frm#stmt.c_sql_insert_diff_with_nk
            );
         END IF;

         p#frm#dict.prc_set_text_param (
            l_sql_prc_token
          , 'enableParallelDML'
          , CASE
               WHEN l_vc_set_anonymized IS NOT NULL THEN
                  p#frm#stmt.c_token_enable_parallel_dml
               ELSE
                  p#frm#stmt.c_token_disable_parallel_dml
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'diffPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'sourcePartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END LOOP;

      -- Set object identifiers
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'diffIdentifier'
       , g_vc_table_name_diff
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'sourceIdentifier'
       , g_vc_table_name_stage
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'targetIdentifier'
       , g_vc_table_name_hist
      );
      -- Set list of columns
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'nvl2ColumnList'
       , l_vc_col_nvl2
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'targetColumnList'
       , l_vc_col_list
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'utlColumnList'
       , l_list_utl_col
      );
      -- Set clauses
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'historyClause'
       , NVL (l_vc_clause_history, '1=0')
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'updateClause'
       , NVL (l_vc_clause_update, '1=0')
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'joinClause'
       , l_vc_clause_on
      );
      prc_set_utl_columns (l_sql_prc_buffer);
      -- Ad analyze token
      l_sql_prc_token := c_token_analyze;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'statisticsType'
       , 'DFAN'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'stgOwner'
       , g_vc_owner_stg
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_diff
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'partition'
       , NULL
      );
      l_sql_prc_buffer :=
            l_sql_prc_buffer
         || CHR (10)
         || l_sql_prc_token;
      -- Put all other code parameters
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'sourceCode'
       , g_vc_source_code
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'objectName'
       , g_vc_object_name
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'sourceTable'
       , g_vc_table_name_source
      );
      --
      -- Put body in the generic prc template
      l_sql_prc := p#frm#ddls.c_template_prc_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'joinType'
       , 'FULL'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_diff
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      --
      -- Load Hist without deletes
      --
      -- Put body in the generic prc template
      l_sql_prc := p#frm#ddls.c_template_prc_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'joinType'
       , 'LEFT'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_diff_incr
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_load_diff;

   PROCEDURE prc_create_prc_load_hist (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name         t_object_name := 'prc_create_prc_load_hist';
      l_vc_message          t_string
                               :=    'Procedure load hist '
                                  || g_vc_package_main;
      l_sql_prc             CLOB;
      l_sql_prc_token       CLOB;
      l_sql_prc_buffer      CLOB;
      --
      l_n_iter_begin        NUMBER;
      l_n_iter_end          NUMBER;
      -- List of columns
      l_vc_col_simple       t_string;
      l_vc_clause_on        t_string;
      l_vc_upd_clause_set   t_string;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      -- Set anonymizad column lists
      l_vc_set_anonymized := '';
      l_vc_col_anonymized := '';
      l_vc_fct_anonymized := '';
      l_vc_ins_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_columns;
      --
      -- HEAD
      --
      l_sql_prc := p#frm#ddls.c_template_prc_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_hist
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      -- Get list of all columns
      l_vc_col_simple :=
         p#frm#dict.fct_get_column_subset (
            NULL
          , g_vc_owner_stg
          , g_vc_table_name_stage
          , g_vc_owner_stg
          , g_vc_table_name_hist
          , 'COMMON_ALL'
          , 'LIST_SIMPLE'
         );

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NULL THEN
         -- If there is no natural key (tecnical PK) then use the alternate difference method
         l_vc_clause_on :=
            p#frm#dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_ALL'
             , 'AND_ALIAS'
             , 'trg'
             , 'src'
            );
      ELSE
         -- If there is a natural key (tecnical PK) and the full outer join method is specified,
         -- then use the merge template
         -- Get list of conditions for the on clause of the merge
         l_vc_clause_on :=
            p#frm#dict.fct_get_column_list (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'PK'
             , 'AND_ALIAS'
             , 'trg'
             , 'src'
             , p_vc_exclude_list   => p#frm#stag_param.c_vc_column_valid_to
            );
         l_vc_upd_clause_set :=
            p#frm#dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_NPK'
             , 'SET_ALIAS'
             , 'trg'
             , 'src'
            );
      END IF;

      l_n_iter_begin := 0;

      IF g_vc_partition_expr IS NOT NULL THEN
         l_n_iter_end := 9;
      ELSE
         l_n_iter_end := 0;
      END IF;

      l_sql_prc_token := '';

      FOR i IN l_n_iter_begin .. l_n_iter_end LOOP
         l_sql_prc_token := c_token_hist_reconcile;
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'closeStatement'
          , p#frm#stmt.c_sql_reconcile_close
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'updateStatement'
          , p#frm#stmt.c_sql_reconcile_update
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'insertStatement'
          , p#frm#stmt.c_sql_reconcile_insert
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'enableParallelDML'
          , CASE
               WHEN l_vc_set_anonymized IS NOT NULL THEN
                  p#frm#stmt.c_token_enable_parallel_dml
               ELSE
                  p#frm#stmt.c_token_disable_parallel_dml
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'diffPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'diffPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || p#frm#stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END LOOP;

      -- Set object identifiers
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'diffIdentifier'
       , g_vc_table_name_diff
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'targetIdentifier'
       , g_vc_table_name_hist
      );
      -- Set list of columns
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'diffColumnList'
       ,    l_vc_col_simple
         || CHR (10)
         || l_vc_ins_anonymized
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'targetColumnList'
       ,    l_vc_col_simple
         || CHR (10)
         || l_vc_col_anonymized
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'utlColumnList'
       , c_token_utl_column_hist
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'utlValueList'
       , c_token_utl_colval_hist
      );
      -- Set clauses
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'joinClause'
       , l_vc_clause_on
      );
      -- Set the matched clause of the merge statement. This exists only if there are non-NK columns to set
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'matchedClause'
       , CASE
            WHEN l_vc_upd_clause_set IS NOT NULL THEN
                  l_vc_upd_clause_set
               || CHR (10)
               || l_vc_set_anonymized
               || ', '
         END
      );
      prc_set_utl_columns (l_sql_prc_buffer);
      -- Analyze token
      l_sql_prc_token := c_token_analyze;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'statisticsType'
       , 'HSAN'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'stgOwner'
       , g_vc_owner_stg
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_hist
      );
      l_sql_prc_buffer :=
            l_sql_prc_buffer
         || CHR (10)
         || l_sql_prc_token;                                                                                                                                                                                                   -- Put all other code parameters
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'sourceCode'
       , g_vc_source_code
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'objectName'
       , g_vc_object_name
      );
      --
      -- Load Hist with table comparison
      --
      -- Put body in the generic prc template
      l_sql_prc := p#frm#ddls.c_template_prc_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_load_hist
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_load_hist;

   PROCEDURE prc_create_prc_wrapper (
      p_b_tc_only_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag      BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_wrapper';
      l_vc_message       t_string
                            :=    'Procedure wrapper '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- HEAD for FULL load
      --
      l_sql_prc := p#frm#ddls.c_template_prc_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_wrapper
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY for FULL load
      --
      l_sql_prc_buffer := c_token_prc_wrapper;

      IF p_b_tc_only_flag THEN
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_buffer
          , 'prcLoadStage'
          , NULL
         );
      ELSE
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_buffer
          , 'prcLoadStage'
          ,    p#frm#stag_param.c_vc_procedure_load_stage
            || ';'
         );
      END IF;

      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcLoadDiff'
       ,    p#frm#stag_param.c_vc_procedure_load_diff
         || ';'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcLoadHist'
       ,    p#frm#stag_param.c_vc_procedure_load_hist
         || ';'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcTruncStage'
       ,    p#frm#stag_param.c_vc_procedure_trunc_stage
         || ';'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcTruncDiff'
       ,    p#frm#stag_param.c_vc_procedure_trunc_diff
         || ';'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'tableName'
       , g_vc_table_name_hist
      );
      -- Put body in the generic prc template
      l_sql_prc := p#frm#ddls.c_template_prc_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_wrapper
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      --
      -- HEAD for INCREMENTAL load
      --
      l_sql_prc := p#frm#ddls.c_template_prc_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_wrapper_incr
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY for DELTA load
      --
      l_sql_prc_buffer := c_token_prc_wrapper;

      IF p_b_tc_only_flag THEN
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_buffer
          , 'prcLoadStage'
          , NULL
         );
      ELSE
         p#frm#ddls.prc_set_text_param (
            l_sql_prc_buffer
          , 'prcLoadStage'
          ,    p#frm#stag_param.c_vc_procedure_load_stage
            || ';'
         );
      END IF;

      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcLoadDiff'
       ,    p#frm#stag_param.c_vc_procedure_load_diff
         || ';'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcLoadHist'
       ,    p#frm#stag_param.c_vc_procedure_load_diff_incr
         || ';'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcTruncStage'
       ,    p#frm#stag_param.c_vc_procedure_trunc_stage
         || ';'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcTruncDiff'
       ,    p#frm#stag_param.c_vc_procedure_trunc_diff
         || ';'
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'tableName'
       , g_vc_table_name_hist
      );
      -- Put body in the generic prc template
      l_sql_prc := p#frm#ddls.c_template_prc_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , NULL
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , p#frm#stag_param.c_vc_procedure_wrapper_incr
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_wrapper;

   PROCEDURE prc_compile_package_main (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name   t_object_name := 'prc_compile_package_main';
      l_vc_message    t_string
                         :=    'Package compile '
                            || g_vc_package_main;
      l_sql_create    CLOB;
   BEGIN
      -- Package head
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Package head: Begin'
      );
      l_sql_create := p#frm#ddls.c_template_pkg_head;
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'pkgName'
       , g_vc_package_main
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'varList'
       , ''
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'prcList'
       , l_buffer_pkg_head
      );
      -- Execute ddl for package head
      prc_store_ddl (
         'PACKAGE'
       , g_vc_package_main
       , l_sql_create
      );
      p#frm#ddls.prc_create_object (
         'PACKAGE'
       , g_vc_package_main
       , l_sql_create
       , FALSE
       , p_b_raise_flag
      );
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Package head: End'
      );
      -- Package body
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Package body: Begin'
      );
      l_sql_create := p#frm#ddls.c_template_pkg_body;
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'varList'
       , ''
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'prcList'
       , l_buffer_pkg_body
      );
      p#frm#ddls.prc_set_text_param (
         l_sql_create
       , 'pkgName'
       , g_vc_package_main
      );
      -- Execute ddl for package body
      prc_store_ddl (
         'PACKAGE BODY'
       , g_vc_package_main
       , l_sql_create
      );
      p#frm#ddls.prc_create_object (
         'PACKAGE BODY'
       , g_vc_package_main
       , l_sql_create
       , FALSE
       , p_b_raise_flag
      );
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Package body: End'
      );
   END prc_compile_package_main;

   PROCEDURE prc_create_package_main (
      p_b_hist_only_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag        BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name   t_object_name := 'prc_create_package_main';
      l_vc_message    t_string
                         :=    'Package create '
                            || g_vc_package_main;
      l_sql_create    CLOB;
   BEGIN
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      l_buffer_pkg_head := '';
      l_buffer_pkg_body := '';

      IF NOT p_b_hist_only_flag THEN
         -- Get list of columns for the stage 1 and init procedures
         l_vc_col_src :=
            p#frm#dict.fct_get_column_list (
               g_vc_dblink
             , g_vc_owner_src
             , g_vc_table_name_source
             , 'ALL'
             , 'LIST_SIMPLE'
            );
         l_vc_col_dupl :=
            p#frm#dict.fct_get_column_subset (
               g_vc_dblink
             , g_vc_owner_src
             , g_vc_table_name_source
             , g_vc_owner_stg
             , g_vc_table_name_dupl
             , 'COMMON_ALL'
             , 'LIST_SIMPLE'
            );
      END IF;

      --
      -- Fill buffers with single procedures
      --
      -- Trunc Stage Table
      prc_create_prc_trunc_stage (p_b_raise_flag);
      --
      -- Trunc Diff table
      prc_create_prc_trunc_diff (p_b_raise_flag);

      IF NOT p_b_hist_only_flag THEN
         --
         -- Initial load
         prc_create_prc_init (p_b_raise_flag);
         --
         -- Stage 1 load
         prc_create_prc_load_stage (p_b_raise_flag);

         IF g_l_dblink.COUNT > 1
         OR g_vc_partition_expr IS NOT NULL THEN
            --
            -- Stage 1 load - single partitions
            prc_create_prc_load_stage_p (p_b_raise_flag);
         END IF;
      END IF;

      --
      -- Hist load
      prc_create_prc_load_diff (p_b_raise_flag);
      prc_create_prc_load_hist (p_b_raise_flag);
      --
      -- Wrapper
      prc_create_prc_wrapper (
         p_b_hist_only_flag
       , p_b_raise_flag
      );
      --
      -- Compile package
      prc_compile_package_main (p_b_raise_flag);
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_package_main;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END p#frm#stag_ddl;
2014-11-20 16:37:53.808 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE BODY dwhutl_stag_ddl
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Templates for standard code tokens
   **/
   --
   c_token_utl_column_hist        t_string := '#validFromColumnName#, #validToColumnName#, #dmlOpColumnName#';
   c_token_utl_coldef_hist        t_string := '#validFromColumnName# DATE, #validToColumnName# DATE, #dmlOpColumnName# VARCHAR2(10)';
   c_token_utl_colval_hist        t_string := 'SYSDATE, TO_DATE(''99991231'',''yyyymmdd''), ''I''';
   c_token_utl_column_source_db   t_string := '#sourceDbColumnName#';
   c_token_utl_coldef_source_db   t_string := '#sourceDbColumnName# VARCHAR(100)';
   c_token_utl_column_partition   t_string := '#partitionColumnName#';
   c_token_utl_coldef_partition   t_string := '#partitionColumnName# NUMBER(1)';
   --
   c_token_diff_partition         CLOB
                                     :=    'PARTITION BY LIST ('
                                        || dwhutl_stag_param.c_vc_column_dml_op
                                        || ')
    (  
	  PARTITION PI VALUES (''I'') NOLOGGING NOCOMPRESS
    , PARTITION PH VALUES (''H'') NOLOGGING NOCOMPRESS
    , PARTITION PU VALUES (''U'') NOLOGGING NOCOMPRESS
    , PARTITION PD VALUES (''D'') NOLOGGING NOCOMPRESS
    , PARTITION PR VALUES (''R'') NOLOGGING NOCOMPRESS
	)';
   c_token_diff_subpartition      CLOB
                                     :=    'PARTITION BY LIST (#partitionColumnName#)
    SUBPARTITION BY LIST ('
                                        || dwhutl_stag_param.c_vc_column_dml_op
                                        || ')
    SUBPARTITION TEMPLATE 
    (  
        SUBPARTITION PI VALUES (''I''),
        SUBPARTITION PH VALUES (''H''),
        SUBPARTITION PU VALUES (''U''),
        SUBPARTITION PD VALUES (''D''),
        SUBPARTITION PR VALUES (''R'')
    )
    (
        PARTITION p0 VALUES (0) NOLOGGING NOCOMPRESS,
        PARTITION p1 VALUES (1) NOLOGGING NOCOMPRESS,
        PARTITION p2 VALUES (2) NOLOGGING NOCOMPRESS,
        PARTITION p3 VALUES (3) NOLOGGING NOCOMPRESS,
        PARTITION p4 VALUES (4) NOLOGGING NOCOMPRESS,
        PARTITION p5 VALUES (5) NOLOGGING NOCOMPRESS,
        PARTITION p6 VALUES (6) NOLOGGING NOCOMPRESS,
        PARTITION p7 VALUES (7) NOLOGGING NOCOMPRESS,
        PARTITION p8 VALUES (8) NOLOGGING NOCOMPRESS,
        PARTITION p9 VALUES (9) NOLOGGING NOCOMPRESS
    )';
   c_token_partition              CLOB := 'PARTITION BY LIST (#partitionColumnName#)
    (
        PARTITION p0 VALUES (0) NOLOGGING NOCOMPRESS,
        PARTITION p1 VALUES (1) NOLOGGING NOCOMPRESS,
        PARTITION p2 VALUES (2) NOLOGGING NOCOMPRESS,
        PARTITION p3 VALUES (3) NOLOGGING NOCOMPRESS,
        PARTITION p4 VALUES (4) NOLOGGING NOCOMPRESS,
        PARTITION p5 VALUES (5) NOLOGGING NOCOMPRESS,
        PARTITION p6 VALUES (6) NOLOGGING NOCOMPRESS,
        PARTITION p7 VALUES (7) NOLOGGING NOCOMPRESS,
        PARTITION p8 VALUES (8) NOLOGGING NOCOMPRESS,
        PARTITION p9 VALUES (9) NOLOGGING NOCOMPRESS
    )';
   -- Template to initialize run time statistics in a procedure
   -- Set the step number and the workflow
   c_token_prc_initialize         CLOB := '';
   -- Template to finalize run time statistics in a procedure
   -- Set the final step number and finalize job statistics
   c_token_prc_finalize           CLOB := '';
   -- Exception handler
   c_token_prc_exception          CLOB := 'dwhutl_stag_stat.prc_stat_end(l_n_stat_id, 0, 1);';
   -- Standard parameters for a generated procedure
   c_token_prc_param              CLOB := 'p_n_stream NUMBER DEFAULT NULL';
   -- Code body for the wrapper procedure
   c_token_prc_wrapper            CLOB := '
        dwhutl_trac.log_sub_debug (l_vc_prc_name, ''Staging Begin'', ''Start extracting from #tableName#'');

		#prcLoadStage#

        #prcLoadDiff#

		#prcLoadHist#

		#prcTruncStage#

		#prcTruncDiff#

        dwhutl_trac.log_sub_debug (l_vc_prc_name, ''Staging End'', ''Stage completed for #tableName#'');';
   -- Statistics token
   c_token_analyze                CLOB := '
        l_n_stat_id := dwhutl_stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', NULL, ''#statisticsType#'');
        
        DBMS_STATS.UNLOCK_TABLE_STATS (''#stgOwner#'', ''#tableName#'') ;
        DBMS_STATS.GATHER_TABLE_STATS (''#stgOwner#'', ''#tableName#'', NULL, 1);
        dwhutl_stag_stat.prc_size_store(''#sourceCode#'', ''#objectName#'', ''#tableName#'');

        dwhutl_stag_stat.prc_stat_end(l_n_stat_id, 0);

        dwhutl_trac.log_sub_debug (l_vc_prc_name, ''STAT END'', ''#tableName# : Statistics gathered'');
        ';
   -- Check token of the init procedure
   c_token_check_table_isempty    CLOB := '
		  dwhutl_trac.log_sub_debug (l_vc_prc_name, ''CHECK'', ''Check table #tableName# '');
        SELECT COUNT (*)
          INTO l_n_result
          FROM #tableName#
         WHERE rownum = 1;
         
        IF l_n_result = 0 THEN
              dwhutl_trac.log_sub_debug (l_vc_prc_name, ''CHECK'', ''Table #tableName# is empty'');
        ELSE
            dwhutl_trac.log_sub_error (l_vc_prc_name, ''CHECK'', ''Table #tableName# is not empty'');
            raise_application_error (-20000, ''Cannot init load non-empty table'');        
        END IF;';
   -- Insert token of the staging 1 procedure
   c_token_stage_get_incr_bound   CLOB := '
   
          dwhutl_trac.log_sub_debug (l_vc_prc_name, ''INCR BOUND'', ''#tableName# #partition# : get last #incrementColumn#'');
   
        SELECT MAX(#incrementColumn#)
          INTO l_t_increment_bound
          FROM #histTableName# #partition#;
          
          dwhutl_trac.log_sub_debug (l_vc_prc_name, ''INCR BOUND'', ''#tableName# #partition# : last #incrementColumn# = '' || l_t_increment_bound);
        
        ';
   -- Insert token of the staging procedure
   c_token_stage_insert           CLOB := '
        l_n_stat_id := dwhutl_stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''STIN'');

        #computeIncrementBound#
                   
        #insertStatement#

		l_n_result := SQL%ROWCOUNT;

		dwhutl_stag_stat.prc_stat_end(l_n_stat_id, l_n_result);

        COMMIT;

        dwhutl_trac.log_sub_debug (l_vc_prc_name, ''INSERT END'', ''#targetIdentifier# #partition# : '' || l_n_result || '' rows inserted'', NULL, l_n_result);
		';
   -- Check token of the historicizing procedure
   c_token_diff_check             CLOB := '
        l_b_ok := dwhutl_dict.fct_check_pk (
			NULL, ''#stgOwner#'', ''#stageTableName#'', ''#stgOwner#'', ''#histTableName#''
		);
		IF l_b_ok THEN
			  dwhutl_trac.log_sub_debug (l_vc_prc_name, ''CHECK NK'', ''#stageTableName# and #histTableName# have the same NK'');
		ELSE
			  dwhutl_trac.log_sub_warn (l_vc_prc_name, ''CHECK NK'', ''#stageTableName# and #histTableName# have not the same NK'');		
		END IF;
        
        SELECT COUNT(*) INTO l_n_result FROM #stageTableName#;
        
        IF l_n_result = 0 THEN
            dwhutl_trac.log_sub_error (l_vc_prc_name, ''CHECK'', ''Table #stageTableName# is empty'');
            raise_application_error (-20000, ''Stage table is empty.'');        
        END IF;
        
        EXECUTE IMMEDIATE ''ALTER SESSION ENABLE PARALLEL DML'';
		
		-- Truncate Diff table
		 dwhutl_trac.log_sub_debug (l_vc_prc_name, ''DIFF TRUNCATE'', ''Truncate #diffIdentifier#'');		
		EXECUTE IMMEDIATE ''TRUNCATE TABLE #diffIdentifier# DROP STORAGE'';
		 dwhutl_trac.log_sub_debug (l_vc_prc_name, ''DIFF TRUNCATE'', ''#diffIdentifier# truncated'');
		';
   -- Diff token of the historicizing procedure - with nk
   c_token_diff_insert            CLOB := '
		dwhutl_trac.log_sub_debug (l_vc_prc_name, ''DIFF BEGIN'', ''Insert into #diffIdentifier#'');

		l_n_stat_id := dwhutl_stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''DFIN'');
      
        #insertStatement#
        
		l_n_result := SQL%ROWCOUNT;

      COMMIT;

	  dwhutl_stag_stat.prc_stat_end(l_n_stat_id, l_n_result);
		
      dwhutl_trac.log_sub_debug (l_vc_prc_name, ''DIFF INSERTED'', ''#diffIdentifier# : '' || l_n_result || '' rows inserted'');
';
   -- Merge token of the historicizing procedure - 2 separate statement
   c_token_hist_reconcile         CLOB := '
        #enableParallelDML#
		
        -- Close old and deleted records in hist table
        
        dwhutl_trac.log_sub_debug (l_vc_prc_name, ''HIST CLOSE'', ''Update #targetIdentifier#'');
        l_n_stat_id := dwhutl_stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''HSCL'');

        #closeStatement#

        l_n_result := SQL%ROWCOUNT;

        dwhutl_stag_stat.prc_stat_end(l_n_stat_id, l_n_result);

        COMMIT;
        
        dwhutl_trac.log_sub_debug (l_vc_prc_name, ''HIST CLOSED'', ''#targetIdentifier# : '' || l_n_result || '' rows updated'');
        
    	-- Update Hist table
		
		dwhutl_trac.log_sub_debug (l_vc_prc_name, ''HIST UPDATE'', ''Update #targetIdentifier#'');
		l_n_stat_id := dwhutl_stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''HSUP'');

        #updateStatement#

		l_n_result := SQL%ROWCOUNT;

		dwhutl_stag_stat.prc_stat_end(l_n_stat_id, l_n_result);

        COMMIT;
		
        dwhutl_trac.log_sub_debug (l_vc_prc_name, ''HIST UPDATED'', ''#targetIdentifier# : '' || l_n_result || '' rows updated'');
		
		-- Insert into Hist table
		
        dwhutl_trac.log_sub_debug (l_vc_prc_name, ''HIST INSERT'', ''#targetIdentifier# : Insert'');

	    l_n_stat_id := dwhutl_stag_stat.prc_stat_begin(''#sourceCode#'', ''#objectName#'', #partitionId#, ''HSIN'');
        
        #insertStatement#

        l_n_result := SQL%ROWCOUNT;

        dwhutl_stag_stat.prc_stat_end(l_n_stat_id, l_n_result);

	    COMMIT;

        dwhutl_trac.log_sub_debug (l_vc_prc_name, ''HIST END'', ''#targetIdentifier# : '' || l_n_result || '' rows inserted'');';
   -- Buffers
   l_buffer_pkg_head              CLOB;
   l_buffer_pkg_body              CLOB;
   l_vc_col_src                   t_string;
   l_vc_col_dupl                  t_string;
   l_vc_col_pk_notnull            t_string;
   -- Anonymization
   l_vc_def_anonymized            t_string;
   l_vc_col_anonymized            t_string;
   l_vc_set_anonymized            t_string;
   l_vc_ins_anonymized            t_string;
   l_vc_fct_anonymized            t_string;
   l_vc_ini_anonymized            t_string;
   l_vc_viw_anonymized            t_string;

   FUNCTION fct_get_partition_db (p_vc_db_identifier VARCHAR2)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN    CHR (10)
             || ' PARTITION '
             || dwhutl_stag_param.c_vc_prefix_partition
             || '_'
             || p_vc_db_identifier
             || ' VALUES ('''
             || p_vc_db_identifier
             || ''') NOLOGGING COMPRESS';
   END;

   FUNCTION fct_get_partition_expr
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN    ' CASE WHEN TRIM( TRANSLATE ('
             || g_vc_partition_expr
             || ',''0123456789'',''          '')) IS NULL THEN TO_NUMBER('
             || g_vc_partition_expr
             || ') ELSE 0 END';
   END;

   PROCEDURE prc_set_utl_columns (p_vc_code_string IN OUT CLOB)
   IS
      l_vc_prc_name   t_object_name := 'prc_set_utl_columns';
   BEGIN
      dwhutl_ddls.prc_set_text_param (
         p_vc_code_string
       , 'validFromColumnName'
       , dwhutl_stag_param.c_vc_column_valid_from
      );
      dwhutl_ddls.prc_set_text_param (
         p_vc_code_string
       , 'validToColumnName'
       , dwhutl_stag_param.c_vc_column_valid_to
      );
      dwhutl_ddls.prc_set_text_param (
         p_vc_code_string
       , 'dmlOpColumnName'
       , dwhutl_stag_param.c_vc_column_dml_op
      );
      dwhutl_ddls.prc_set_text_param (
         p_vc_code_string
       , 'sourceDbColumnName'
       , dwhutl_stag_param.c_vc_column_source_db
      );
      dwhutl_ddls.prc_set_text_param (
         p_vc_code_string
       , 'partitionColumnName'
       , dwhutl_stag_param.c_vc_column_partition
      );
   END prc_set_utl_columns;

   -- Procedure to set column definition list in order to add anonymized columns to the stage2 table
   /*PROCEDURE prc_set_anonymized_coldefs
   IS
   BEGIN
      FOR r_col IN (SELECT   table_name
                           , src_column_name
                           , trg_column_name
                           , stag_column_def
                           , data_type
                           , data_length
                           , ora_function_name
                        FROM all_tab_columns exi
                           , (SELECT col.stag_object_id
                                   , col.stag_object_name
                                   , col.stag_stg2_table_name
                                   , col.stag_column_pos
                                   , col.stag_column_def
                                   , msk.src_column_name
                                   , msk.trg_column_name
                                   , msk.ora_function_name
                                FROM (SELECT o.stag_object_id
                                           , o.stag_object_name
                                           , o.stag_stg2_table_name
                                           , c.stag_column_pos
                                           , c.stag_column_name
                                           , c.stag_column_def
                                        FROM stag_object_t o
                                           , stag_column_t c
                                       WHERE o.stag_object_id = c.stag_object_id) col
                                   , (SELECT atab.table_name
                                           , acol.src_column_name
                                           , acol.trg_column_name
                                           , meth.ora_function_name
                                        FROM dmaskadmin.da_schema_v asch
                                           , dmaskadmin.da_table_v atab
                                           , dmaskadmin.da_column_v acol
                                           , dmaskadmin.da_business_attribute_v attr
                                           , dmaskadmin.da_method_v meth
                                       WHERE asch.schema_id = atab.schema_id
                                         AND atab.table_id = acol.table_id
                                         AND acol.business_attribute_id = attr.attribute_id
                                         AND attr.anonym_method_id = meth.method_id) msk
                               WHERE col.stag_stg2_table_name = msk.table_name
                                 AND col.stag_column_name = msk.src_column_name) met
                       WHERE met.stag_stg2_table_name = exi.table_name(+)
                         AND met.trg_column_name = exi.column_name(+)
                         AND exi.owner(+) = g_vc_owner_stg
                         AND exi.owner IS NULL
                    ORDER BY stag_column_pos)
      LOOP
         l_vc_def_anonymized    := l_vc_def_anonymized || ',' || r_col.trg_column_name || ' ' || r_col.stag_column_def;
         l_vc_ini_anonymized    :=
               l_vc_ini_anonymized
            || ','
            || r_col.trg_column_name
            || ' = '
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN 'SUBSTR('
               END
            || r_col.ora_function_name
            || '('
            || r_col.src_column_name
            || ')'
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN ',1,' || r_col.data_length || ')'
               END
            || CHR (10);
      END LOOP;

      NULL;
   END;

   -- Procedure to set column lists for stage2 update and insert statements
   PROCEDURE prc_set_anonymized_columns
   IS
   BEGIN
      FOR r_col IN (SELECT   msk.table_name
                           , msk.src_column_name
                           , msk.trg_column_name
                           , col.stag_column_def
                           , data_type
                           , data_length
                           , msk.ora_function_name
                        FROM all_tab_columns exi
                           , (SELECT o.stag_object_id
                                   , o.stag_object_name
                                   , o.stag_stg2_table_name
                                   , c.stag_column_pos
                                   , c.stag_column_name
                                   , c.stag_column_def
                                FROM stag_object_t o
                                   , stag_column_t c
                               WHERE o.stag_object_id = c.stag_object_id) col
                           , (SELECT atab.table_name
                                   , acol.src_column_name
                                   , acol.trg_column_name
                                   , meth.ora_function_name
                                FROM dmaskadmin.da_schema_v asch
                                   , dmaskadmin.da_table_v atab
                                   , dmaskadmin.da_column_v acol
                                   , dmaskadmin.da_business_attribute_v attr
                                   , dmaskadmin.da_method_v meth
                               WHERE asch.schema_id = atab.schema_id
                                 AND atab.table_id = acol.table_id
                                 AND acol.business_attribute_id = attr.attribute_id
                                 AND attr.anonym_method_id = meth.method_id) msk
                       WHERE col.stag_stg2_table_name = exi.table_name
                         AND col.stag_column_name = exi.column_name
                         AND col.stag_stg2_table_name = msk.table_name
                         AND col.stag_column_name = msk.src_column_name
                         AND col.stag_object_id = g_n_object_id
                         AND exi.owner = g_vc_owner_stg
                    ORDER BY stag_column_pos)
      LOOP
         l_vc_col_anonymized    := l_vc_col_anonymized || ',' || r_col.trg_column_name || CHR (10);
         l_vc_set_anonymized    :=
               l_vc_set_anonymized
            || ',trg.'
            || r_col.trg_column_name
            || ' = CASE WHEN dmaskadmin.pkg_da_anonymization_lib.is_ano_required('''
            || g_vc_owner_stg
            || ''','''
            || r_col.table_name
            || ''','''
            || r_col.src_column_name
            || ''','
            || r_col.src_column_name
            || ') = ''Y'' THEN'
            || CHR (10)
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN 'SUBSTR('
               END
            || 'dmaskadmin.'
            || r_col.ora_function_name
            || '(src.'
            || r_col.src_column_name
            || ')'
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN ',1,' || r_col.data_length || ')'
               END
            || 'ELSE src.'
            || r_col.src_column_name
            || CHR (10)
            || 'END';
         l_vc_ins_anonymized    :=
               l_vc_ins_anonymized
            || ',CASE WHEN dmaskadmin.pkg_da_anonymization_lib.is_ano_required('''
            || g_vc_owner_stg
            || ''','''
            || r_col.table_name
            || ''','''
            || r_col.src_column_name
            || ''','
            || r_col.src_column_name
            || ') = ''Y'' THEN'
            || CHR (10)
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN 'SUBSTR('
               END
            || 'dmaskadmin.'
            || r_col.ora_function_name
            || '(src.'
            || r_col.src_column_name
            || ')'
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN ',1,' || r_col.data_length || ')'
               END
            || CHR (10)
            || 'ELSE src.'
            || r_col.src_column_name
            || CHR (10)
            || 'END';
         l_vc_fct_anonymized    :=
               l_vc_fct_anonymized
            || ',CASE WHEN dmaskadmin.pkg_da_anonymization_lib.is_ano_required('''
            || g_vc_owner_stg
            || ''','''
            || r_col.table_name
            || ''','''
            || r_col.src_column_name
            || ''','
            || r_col.src_column_name
            || ') = ''Y'' THEN'
            || CHR (10)
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN 'SUBSTR('
               END
            || 'dmaskadmin.'
            || r_col.ora_function_name
            || '('
            || r_col.src_column_name
            || ')'
            || CASE
                  WHEN r_col.data_type LIKE '%CHAR%'
                     THEN ',1,' || r_col.data_length || ')'
               END
            || CHR (10)
            || 'ELSE '
            || r_col.src_column_name
            || CHR (10)
            || 'END';
      END LOOP;

      NULL;
   END;

   PROCEDURE prc_set_anonymized_viewcols
   IS
   BEGIN
      FOR r_col IN (SELECT   exi.table_name
                           , exi.column_name
                           , msk.trg_column_name
                        FROM all_tab_columns exi
                           , (SELECT atab.table_name
                                   , acol.src_column_name
                                   , acol.trg_column_name
                                   , meth.ora_function_name
                                FROM dmaskadmin.da_schema_v asch
                                   , dmaskadmin.da_table_v atab
                                   , dmaskadmin.da_column_v acol
                                   , dmaskadmin.da_business_attribute_v attr
                                   , dmaskadmin.da_method_v meth
                               WHERE asch.schema_id = atab.schema_id
                                 AND atab.table_id = acol.table_id
                                 AND acol.business_attribute_id = attr.attribute_id
                                 AND attr.anonym_method_id = meth.method_id) msk
                       WHERE exi.table_name = msk.table_name(+)
                         AND exi.column_name = msk.src_column_name(+)
                         AND exi.table_name = UPPER (g_vc_table_name_hist)
                         AND exi.owner = g_vc_owner_stg
                    ORDER BY exi.column_id)
      LOOP
         l_vc_viw_anonymized    :=
               l_vc_viw_anonymized
            || ','
            || CASE
                  WHEN pkg_param.c_vc_db_name_actual IN (pkg_param.c_vc_db_name_dev, pkg_param.c_vc_db_name_tst)
                  AND r_col.trg_column_name IS NOT NULL
                     THEN r_col.trg_column_name || ' AS ' || r_col.column_name
                  ELSE r_col.column_name
               END
            || CHR (10);
      END LOOP;
   END;*/
   PROCEDURE prc_store_ddl (
      p_vc_object_type    VARCHAR2
    , p_vc_object_name    VARCHAR2
    , p_vc_object_ddl     CLOB
   )
   IS
      l_vc_prc_name   t_object_name := 'prc_store_ddl';
   BEGIN
      MERGE INTO dwhutl_stag_ddl_t trg
           USING (SELECT UPPER (p_vc_object_type) AS object_type
                       , UPPER (p_vc_object_name) AS object_name
                       , p_vc_object_ddl AS object_ddl
                    FROM DUAL) src
              ON (UPPER (trg.stag_ddl_type) = UPPER (src.object_type)
              AND UPPER (trg.stag_ddl_name) = UPPER (src.object_name))
      WHEN MATCHED THEN
         UPDATE SET trg.stag_ddl_code = src.object_ddl
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_ddl_type
                     , trg.stag_ddl_name
                     , trg.stag_ddl_code
                    )
             VALUES (
                       src.object_type
                     , src.object_name
                     , src.object_ddl
                    );

      COMMIT;
   END prc_store_ddl;

   PROCEDURE prc_create_stage_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name    t_object_name := 'prc_create_stage_table';
      l_vc_message     t_string
                          :=    'Stage Table '
                             || g_vc_table_name_stage;
      l_sql_create     CLOB;
      l_list_utl_col   t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      l_list_utl_col :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_coldef_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_coldef_partition
               || ','
         END;
      -- Build create table statement
      l_sql_create := dwhutl_ddls.c_template_create_table;
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_stage
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColUtl'
       , l_list_utl_col
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColumns'
       , g_vc_col_def
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING COMPRESS '
         || CASE
               WHEN g_vc_tablespace_stage_data IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_stage_data
            END
      );

      -- Partitions
      IF g_l_distr_code.COUNT > 1 THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || ' PARTITION BY LIST (#sourceDbColumnName#) (';

         FOR i IN g_l_distr_code.FIRST .. g_l_distr_code.LAST LOOP
            IF i > 1 THEN
               l_sql_create :=
                     l_sql_create
                  || ',';
            END IF;

            l_sql_create :=
                  l_sql_create
               || fct_get_partition_db (g_l_distr_code (i));
         END LOOP;

         l_sql_create :=
               l_sql_create
            || CHR (10)
            || ')';
      ELSIF g_vc_partition_expr IS NOT NULL THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || c_token_partition;
      END IF;

      prc_set_utl_columns (l_sql_create);
      prc_store_ddl (
         'TABLE'
       , g_vc_table_name_stage
       , l_sql_create
      );

      BEGIN
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Creating table'
         );
         dwhutl_ddls.prc_create_object (
            'TABLE'
          , g_vc_table_name_stage
          , l_sql_create
          , p_b_drop_flag
          , TRUE
         );
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Table created'
         );
      EXCEPTION
         WHEN OTHERS THEN
            dwhutl_trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'Error creating'
            );
            RAISE;
      END;

      BEGIN
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Setting compression option...'
         );

         EXECUTE IMMEDIATE
               'ALTER TABLE '
            || g_vc_table_name_stage
            || ' COMPRESS FOR QUERY LOW';

         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Compression option set'
         );
      EXCEPTION
         WHEN OTHERS THEN
            dwhutl_trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'FOR QUERY LOW option not available'
            );
      END;

      -- Build constraint statement
      /*l_sql_create          := c_token_create_pk;
      dwhutl_ddls.prc_set_text_param (l_sql_create
                                    , 'tableName'
                                    , g_vc_table_name_stage
                                     );
      dwhutl_ddls.prc_set_text_param (l_sql_create
                                    , 'pkName'
                                    , g_vc_nk_name_stage
                                     );
      dwhutl_ddls.prc_set_text_param (l_sql_create
                                    , 'listColPk'
                                    , g_vc_col_pk
                                     );
      dwhutl_ddls.prc_set_text_param (l_sql_create
                                    , 'storageClause'
                                    , 'NOLOGGING ' || CASE
                                         WHEN g_l_distr_code.COUNT > 1
                                            THEN 'LOCAL'
                                      END || CASE
                                         WHEN g_vc_tablespace_stage_indx IS NOT NULL
                                            THEN ' TABLESPACE ' || g_vc_tablespace_stage_indx
                                      END
                                     );
      prc_set_utl_columns (l_sql_create);
      prc_store_ddl ('CONSTRAINT'
                   , g_vc_nk_name_stage
                   , l_sql_create
                    );

      BEGIN
           dwhutl_trac.log_sub_debug (l_vc_message, 'Creating NK...');
         dwhutl_ddls.prc_create_object ('CONSTRAINT'
                                      , g_vc_nk_name_stage
                                      , l_sql_create
                                      , p_b_drop_flag
                                      , TRUE
                                       );
           dwhutl_trac.log_sub_debug (l_vc_message, 'NK created');
      EXCEPTION
         WHEN OTHERS
         THEN
              dwhutl_trac.log_sub_debug (SQLERRM
                           , 'NK not created'
                           , param.gc_log_warn
                            );
            RAISE;
      END;*/
      IF g_n_parallel_degree > 1 THEN
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Setting parallel option...'
         );

         EXECUTE IMMEDIATE
               'ALTER TABLE '
            || g_vc_table_name_stage
            || ' PARALLEL '
            || g_n_parallel_degree;

         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Parallel option set...'
         );
      END IF;

      -- Comments from source system
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Setting comments...'
      );

      EXECUTE IMMEDIATE
            'COMMENT ON TABLE '
         || g_vc_table_name_stage
         || ' IS '''
         || g_vc_table_comment
         || '''';

      FOR r_comm IN (SELECT c.stag_column_name
                          , c.stag_column_comment
                       FROM dwhutl_stag_object_t o
                          , dwhutl_stag_column_t c
                      WHERE o.stag_object_id = c.stag_object_id
                        AND o.stag_object_id = g_n_object_id) LOOP
         EXECUTE IMMEDIATE
               'COMMENT ON COLUMN '
            || g_vc_table_name_stage
            || '.'
            || r_comm.stag_column_name
            || ' IS '''
            || r_comm.stag_column_comment
            || '''';
      END LOOP;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Comments set...'
      );
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         dwhutl_trac.log_sub_error (
            l_vc_prc_name
          , l_vc_message
          , 'Stage Table: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         END IF;
   END prc_create_stage_table;

   PROCEDURE prc_create_duplicate_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name    t_object_name := 'prc_create_duplicate_table';
      l_vc_message     t_string
                          :=    'Table duplicates '
                             || g_vc_table_name_dupl;
      l_sql_create     CLOB;
      l_list_utl_col   t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      l_list_utl_col :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_coldef_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_coldef_partition
               || ','
         END;
      -- Build create table statement
      l_sql_create := dwhutl_ddls.c_template_create_table;
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_dupl
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColUtl'
       , l_list_utl_col
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColumns'
       , g_vc_col_def
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING'
         || CASE
               WHEN g_vc_tablespace_stage_data IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_stage_data
            END
      );

      -- Stage1 partitions
      IF g_l_distr_code.COUNT > 1 THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || ' PARTITION BY LIST (#sourceDbColumnName#) (';

         FOR i IN g_l_distr_code.FIRST .. g_l_distr_code.LAST LOOP
            IF i > 1 THEN
               l_sql_create :=
                     l_sql_create
                  || ',';
            END IF;

            l_sql_create :=
                  l_sql_create
               || fct_get_partition_db (g_l_distr_code (i));
         END LOOP;

         l_sql_create :=
               l_sql_create
            || CHR (10)
            || ')';
      ELSIF g_vc_partition_expr IS NOT NULL THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || c_token_partition;
      END IF;

      prc_set_utl_columns (l_sql_create);
      prc_store_ddl (
         'TABLE'
       , g_vc_table_name_dupl
       , l_sql_create
      );

      BEGIN
         dwhutl_ddls.prc_create_object (
            'TABLE'
          , g_vc_table_name_dupl
          , l_sql_create
          , p_b_drop_flag
          , TRUE
         );
      EXCEPTION
         WHEN OTHERS THEN
            dwhutl_trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'Duplicates Table: Warning'
            );
            RAISE;
      END;

      IF g_n_parallel_degree > 1 THEN
         l_sql_create :=
               'ALTER TABLE '
            || g_vc_table_name_dupl
            || ' PARALLEL '
            || g_n_parallel_degree;
         dwhutl_ddls.prc_execute (l_sql_create);
      END IF;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Duplicates Table: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         dwhutl_trac.log_sub_error (
            l_vc_prc_name
          , l_vc_message
          , 'Stage Table: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         END IF;
   END prc_create_duplicate_table;

   PROCEDURE prc_create_diff_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name            t_object_name := 'prc_create_diff_table';
      l_vc_message             t_string
                                  :=    'Table difference '
                                     || g_vc_table_name_diff;
      l_sql_create             CLOB;
      l_sql_subpart_template   t_string;
      l_list_utl_col           t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Difference table: Begin'
      );
      l_list_utl_col :=
            c_token_utl_coldef_hist
         || ','
         || CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     c_token_utl_coldef_source_db
                  || ','
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     c_token_utl_coldef_partition
                  || ','
            END;
      l_sql_create := dwhutl_ddls.c_template_create_table;
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_diff
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColUtl'
       , l_list_utl_col
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColumns'
       , g_vc_col_def
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING '
         || CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_diff_subpartition
               ELSE
                  c_token_diff_partition
            END
         || CASE
               WHEN g_vc_tablespace_stage_data IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_stage_data
            END
      );
      prc_set_utl_columns (l_sql_create);
      prc_store_ddl (
         'TABLE'
       , g_vc_table_name_diff
       , l_sql_create
      );

      BEGIN
         dwhutl_ddls.prc_create_object (
            'TABLE'
          , g_vc_table_name_diff
          , l_sql_create
          , p_b_drop_flag
          , TRUE
         );
      EXCEPTION
         WHEN OTHERS THEN
            dwhutl_trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'Difference Table: Error'
            );
            RAISE;
      END;

      l_sql_create := dwhutl_ddls.c_template_create_pk;
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_diff
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'pkName'
       , g_vc_nk_name_diff
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColPk'
       , g_vc_col_pk
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING'
         || CASE
               WHEN g_vc_tablespace_stage_indx IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_stage_indx
            END
      );
      prc_store_ddl (
         'CONSTRAINT'
       , g_vc_nk_name_diff
       , l_sql_create
      );

      BEGIN
         dwhutl_ddls.prc_create_object (
            'CONSTRAINT'
          , g_vc_table_name_diff
          , l_sql_create
          , p_b_drop_flag
          , p_b_raise_flag
         );
      EXCEPTION
         WHEN OTHERS THEN
            dwhutl_trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'Difference table: Warning'
            );
            RAISE;
      END;

      IF g_n_parallel_degree > 1 THEN
         l_sql_create :=
               'ALTER TABLE '
            || g_vc_table_name_diff
            || ' PARALLEL '
            || g_n_parallel_degree;
         dwhutl_ddls.prc_execute (l_sql_create);
      END IF;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Difference table: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         dwhutl_trac.log_sub_error (
            l_vc_prc_name
          , l_vc_message
          , 'Difference table: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         END IF;
   END prc_create_diff_table;

   PROCEDURE prc_create_hist_table (
      p_b_drop_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag    BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name     t_object_name := 'prc_create_hist_table';
      l_vc_message      t_string
                           :=    'History Table '
                              || g_vc_table_name_hist;
      l_sql_create      t_string;
      l_list_utl_col    t_string;
      l_l_utl_columns   DBMS_SQL.varchar2s;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Diff Table: Begin'
      );
      -- Set anonymizad column lists
      l_vc_def_anonymized := '';
      l_vc_ini_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_coldefs;
      -- Generate table ddl
      l_list_utl_col :=
            c_token_utl_coldef_hist
         || ','
         || CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     c_token_utl_coldef_source_db
                  || ','
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     c_token_utl_coldef_partition
                  || ','
            END;
      l_sql_create := dwhutl_ddls.c_template_create_table;
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_hist
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColUtl'
       , l_list_utl_col
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColumns'
       ,    g_vc_col_def
         || l_vc_def_anonymized
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING COMPRESS '
         || CASE
               WHEN g_vc_tablespace_hist_data IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_hist_data
            END
      );

      IF g_vc_partition_expr IS NOT NULL THEN
         l_sql_create :=
               l_sql_create
            || CHR (10)
            || c_token_partition;
      END IF;

      prc_set_utl_columns (l_sql_create);
      -- Execute table ddl
      prc_store_ddl (
         'TABLE'
       , g_vc_table_name_hist
       , l_sql_create
      );

      BEGIN
         -- Try to create table
         dwhutl_ddls.prc_create_object (
            'TABLE'
          , g_vc_table_name_hist
          , l_sql_create
          , FALSE
          , TRUE
         );
      EXCEPTION
         WHEN OTHERS THEN
            dwhutl_trac.log_sub_error (
               l_vc_prc_name
             , l_vc_message
             , 'History Table Create: Warning'
            );

            IF l_vc_def_anonymized IS NOT NULL THEN
               BEGIN
                  dwhutl_trac.log_sub_debug (
                     'Add new anonymized columns'
                   , 'History Table Add Anonymized'
                  );

                  -- Try to add newly anonymized columns
                  EXECUTE IMMEDIATE
                        'ALTER TABLE '
                     || g_vc_table_name_hist
                     || ' ADD ('
                     || LTRIM (
                           l_vc_def_anonymized
                         , ','
                        )
                     || ')';
               EXCEPTION
                  WHEN OTHERS THEN
                     dwhutl_trac.log_sub_warn (
                        l_vc_prc_name
                      , l_vc_message
                      , 'History Table Add Anonymized: Warning'
                     );

                     IF p_b_raise_flag THEN
                        RAISE;
                     END IF;
               END;
            END IF;

            IF l_vc_ini_anonymized IS NOT NULL THEN
               BEGIN
                  dwhutl_trac.log_sub_debug (
                     l_vc_prc_name
                   , l_vc_message
                   , 'Fill new anonymized columns - History Table Upd Anonymized'
                  );

                  -- Try to fill newly added anonymized columns
                  EXECUTE IMMEDIATE
                        'UPDATE '
                     || g_vc_table_name_hist
                     || ' SET '
                     || LTRIM (
                           l_vc_ini_anonymized
                         , ','
                        );

                  COMMIT;
               EXCEPTION
                  WHEN OTHERS THEN
                     dwhutl_trac.log_sub_warn (
                        l_vc_prc_name
                      , l_vc_message
                      , 'History Table Upd Anonymized: Warning'
                     );

                     IF p_b_raise_flag THEN
                        RAISE;
                     END IF;
               END;
            END IF;

            IF p_b_raise_flag THEN
               RAISE;
            END IF;
      END;

      IF g_n_parallel_degree > 1 THEN
         l_sql_create :=
               'ALTER TABLE '
            || g_vc_table_name_hist
            || ' PARALLEL '
            || g_n_parallel_degree;
         dwhutl_ddls.prc_execute (l_sql_create);
      END IF;

      IF g_vc_fb_archive IS NOT NULL
     AND g_n_fbda_flag = 1 THEN
         BEGIN
            EXECUTE IMMEDIATE
                  'ALTER TABLE '
               || g_vc_table_name_hist
               || ' FLASHBACK ARCHIVE '
               || g_vc_fb_archive;
         EXCEPTION
            WHEN OTHERS THEN
               dwhutl_trac.log_sub_debug (
                  l_vc_prc_name
                , l_vc_message
                , 'History Table: FLASHBACK'
               );
         END;
      END IF;

      BEGIN
         EXECUTE IMMEDIATE
               'ALTER TABLE '
            || g_vc_table_name_hist
            || ' COMPRESS FOR QUERY LOW';
      EXCEPTION
         WHEN OTHERS THEN
            dwhutl_trac.log_sub_warn (
               l_vc_prc_name
             , l_vc_message
             , 'FOR QUERY LOW option not available'
            );
      END;

      -- Generate NK ddl
      l_sql_create := dwhutl_ddls.c_template_create_pk;
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'tableName'
       , g_vc_table_name_hist
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'pkName'
       , g_vc_nk_name_hist
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'listColPk'
       ,    dwhutl_stag_param.c_vc_column_valid_to
         || ','
         || g_vc_col_pk
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'storageClause'
       ,    'NOLOGGING '
         || CASE
               WHEN g_l_distr_code.COUNT > 1
                AND dwhutl_dict.fct_check_part (
                       NULL
                     , g_vc_owner_stg
                     , g_vc_table_name_hist
                    ) THEN
                  'LOCAL'
            END
         || CASE
               WHEN g_vc_tablespace_hist_indx IS NOT NULL THEN
                     ' TABLESPACE '
                  || g_vc_tablespace_hist_indx
            END
      );
      -- Execute NK ddl
      prc_store_ddl (
         'CONSTRAINT'
       , g_vc_nk_name_hist
       , l_sql_create
      );

      BEGIN
         dwhutl_ddls.prc_create_object (
            'CONSTRAINT'
          , g_vc_nk_name_hist
          , l_sql_create
          , FALSE
          , TRUE
         );
      EXCEPTION
         WHEN OTHERS THEN
            dwhutl_trac.log_sub_warn (
               l_vc_prc_name
             , l_vc_message
             , 'Hist table Natural Key: Warning'
            );

            IF p_b_raise_flag THEN
               RAISE;
            END IF;
      END;

      -- Create not null constraints
      l_l_utl_columns :=
         dwhutl_type.fct_string_to_list (
            c_token_utl_column_hist
          , ','
         );

      FOR i IN l_l_utl_columns.FIRST .. l_l_utl_columns.LAST LOOP
         l_sql_create := dwhutl_ddls.c_template_create_notnull;
         dwhutl_ddls.prc_set_text_param (
            l_sql_create
          , 'tableName'
          , g_vc_table_name_hist
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_create
          , 'columnName'
          , l_l_utl_columns (i)
         );
         -- Execute Check ddl
         prc_set_utl_columns (l_sql_create);
         prc_store_ddl (
            'CONSTRAINT'
          ,    SUBSTR (
                  g_vc_nk_name_hist
                , 1
                , 25
               )
            || '_NN'
            || TO_CHAR (
                  i
                , '00'
               )
          , l_sql_create
         );

         BEGIN
            dwhutl_ddls.prc_create_object (
               'CONSTRAINT'
             ,    SUBSTR (
                     g_vc_nk_name_hist
                   , 1
                   , 25
                  )
               || '_NN'
               || TO_CHAR (
                     i
                   , '00'
                  )
             , l_sql_create
             , FALSE
             , TRUE
            );
         EXCEPTION
            WHEN OTHERS THEN
               dwhutl_trac.log_warn (
                  SQLERRM
                , 'Hist Natural Key: Warning'
               );

               IF p_b_raise_flag THEN
                  RAISE;
               END IF;
         END;
      END LOOP;

      /*EXECUTE IMMEDIATE
            'GRANT SELECT ON '
         || g_vc_table_name_hist
         || ' TO '
         || dwhutl_stag_param.c_vc_list_grantee;*/
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'History Table: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         dwhutl_trac.log_sub_warn (
            l_vc_prc_name
          , l_vc_message
          , 'History Table: Warning'
         );

         IF p_b_raise_flag THEN
            RAISE;
         END IF;
   END prc_create_hist_table;

   PROCEDURE prc_create_hist_view (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name   t_object_name := 'prc_create_hist_view';
      l_vc_message    t_string
                         :=    'View Hist '
                            || g_vc_view_name_hist;
      l_sql_create    t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist View: Begin'
      );
      l_vc_viw_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_viewcols;
      --
      l_sql_create :=
            'CREATE OR REPLACE FORCE VIEW '
         || g_vc_view_name_hist
         || ' AS SELECT '
         || NVL (
               LTRIM (
                  l_vc_viw_anonymized
                , ','
               )
             , '*'
            )
         || ' FROM '
         || g_vc_table_name_hist;
      prc_store_ddl (
         'VIEW'
       , g_vc_view_name_hist
       , l_sql_create
      );

      EXECUTE IMMEDIATE l_sql_create;

      EXECUTE IMMEDIATE
            'GRANT SELECT ON '
         || g_vc_view_name_hist
         || ' TO '
         || dwhutl_stag_param.c_vc_list_grantee;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist View: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          , 'Hist View: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         ELSE
            NULL;
         END IF;
   END;

   PROCEDURE prc_create_hist_synonym (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name   t_object_name := 'prc_create_hist_synonym';
      l_vc_message    t_string
                         :=    'Synonym Hist '
                            || g_vc_view_name_hist;
      l_sql_create    t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist Synonym: Begin'
      );
      l_vc_viw_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_viewcols;
      --
      l_sql_create :=
            'CREATE OR REPLACE SYNONYM '
         || g_vc_view_name_hist
         || ' FOR '
         || g_vc_table_name_hist;
      prc_store_ddl (
         'SYNONYM'
       , g_vc_view_name_hist
       , l_sql_create
      );

      EXECUTE IMMEDIATE l_sql_create;

      EXECUTE IMMEDIATE
            'GRANT SELECT ON '
         || g_vc_view_name_hist
         || ' TO '
         || dwhutl_stag_param.c_vc_list_grantee;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist Synonym: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         dwhutl_trac.log_sub_warn (
            l_vc_prc_name
          , l_vc_message
          , 'Hist Synonym: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         ELSE
            NULL;
         END IF;
   END;

   PROCEDURE prc_create_fbda_view (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name   t_object_name := 'prc_create_fbda_view';
      l_vc_message    t_string
                         :=    'View Hist '
                            || g_vc_view_name_hist;
      l_sql_create    t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist View: Begin'
      );
      l_vc_viw_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_viewcols;
      --
      l_sql_create :=
            'CREATE OR REPLACE FORCE VIEW '
         || g_vc_view_name_fbda
         || ' AS SELECT versions_starttime
     , versions_startscn
     , versions_endtime
     , versions_endscn
     , versions_xid
     , versions_operation
     '
         || l_vc_viw_anonymized
         || ' FROM '
         || g_vc_table_name_hist
         || ' VERSIONS BETWEEN TIMESTAMP MINVALUE AND MAXVALUE';
      prc_store_ddl (
         'VIEW'
       , g_vc_view_name_fbda
       , l_sql_create
      );

      EXECUTE IMMEDIATE l_sql_create;

      EXECUTE IMMEDIATE
            'GRANT SELECT ON '
         || g_vc_view_name_fbda
         || ' TO '
         || dwhutl_stag_param.c_vc_list_grantee;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Hist View: End'
      );
   EXCEPTION
      WHEN OTHERS THEN
         dwhutl_trac.log_sub_warn (
            l_vc_prc_name
          , l_vc_message
          , 'Hist View: Error'
         );

         IF p_b_raise_flag THEN
            RAISE;
         ELSE
            NULL;
         END IF;
   END;

   PROCEDURE prc_create_prc_trunc_stage (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_trunc_stage';
      l_vc_message       t_string
                            :=    'Procedure trunc stage '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- HEAD
      --
      l_sql_prc := dwhutl_ddls.c_template_prc_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_trunc_stage
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      l_sql_prc_token := dwhutl_stmt.c_token_truncate_table;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_stage
      );
      l_sql_prc_buffer := l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         l_sql_prc_token := dwhutl_stmt.c_token_truncate_table;
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Put body in the generic prc template
      l_sql_prc := dwhutl_ddls.c_template_prc_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_trunc_stage
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_trunc_stage;

   PROCEDURE prc_create_prc_trunc_diff (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_trunc_diff';
      l_vc_message       t_string
                            :=    'Procedure trunc diff '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- HEAD
      --
      l_sql_prc := dwhutl_ddls.c_template_prc_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_trunc_diff
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      l_sql_prc_buffer := dwhutl_stmt.c_token_truncate_table;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'tableName'
       , g_vc_table_name_diff
      );
      -- Put body in the generic prc template
      l_sql_prc := dwhutl_ddls.c_template_prc_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_trunc_diff
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_trunc_diff;

   PROCEDURE prc_create_prc_init (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name         t_object_name := 'prc_create_prc_init';
      l_vc_message          t_string
                               :=    'Procedure load init '
                                  || g_vc_package_main;
      l_sql_prc             CLOB;
      l_sql_prc_token       CLOB;
      l_sql_prc_buffer      CLOB;
      -- List of columns
      l_vc_col_all          t_string;
      l_list_utl_col        t_string;
      l_list_utl_val        t_string;
      l_list_utl_col_dupl   t_string;
      l_list_utl_val_dupl   t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      l_vc_col_anonymized := '';
      l_vc_fct_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_columns;
      --
      -- Set utl columns strings
      l_list_utl_col_dupl :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_column_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_column_partition
               || ','
         END;
      prc_set_utl_columns (l_list_utl_col_dupl);
      l_list_utl_col :=
            c_token_utl_column_hist
         || ','
         || l_list_utl_col_dupl;
      prc_set_utl_columns (l_list_utl_col);
      --
      -- Get lists of columns
      l_vc_col_all :=
         dwhutl_dict.fct_get_column_subset (
            g_vc_dblink
          , g_vc_owner_src
          , g_vc_table_name_source
          , g_vc_owner_stg
          , g_vc_table_name_hist
          , 'COMMON_ALL'
          , 'LIST_SIMPLE'
          , p_vc_exclude_list   => l_list_utl_col
         );
      --
      -- HEAD
      --
      l_sql_prc := dwhutl_ddls.c_template_prc_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_init
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      -- Add token to check if hist table is empty
      l_sql_prc_token :=
            dwhutl_stmt.c_token_enable_parallel_dml
         || CHR (10)
         || c_token_check_table_isempty;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_hist
      );
      l_sql_prc_buffer := l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         -- Truncate duplicates table
         l_sql_prc_token := dwhutl_stmt.c_token_truncate_table;
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Fill stage hist for each source db
      FOR i IN g_l_distr_code.FIRST .. g_l_distr_code.LAST LOOP
         l_sql_prc_token := c_token_stage_insert;
         --
         -- Values for the utility columns
         l_list_utl_val_dupl :=
            CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     ''''
                  || g_l_distr_code (i)
                  || ''', '
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     fct_get_partition_expr
                  || ','
            END;

         IF g_n_source_nk_flag = 0
        AND g_vc_col_pk_src IS NOT NULL THEN
            l_vc_col_pk_notnull :=
               dwhutl_stag_meta.fct_get_column_list (
                  g_n_object_id
                , 'PK'
                , 'AND_NOTNULL'
               );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , dwhutl_stmt.c_sql_insert_dedupl
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'duplIdentifier'
             , g_vc_table_name_dupl
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'pkColumnList'
             , g_vc_col_pk_src
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'deduplRankClause'
             , g_vc_dedupl_rank_clause
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlColumnListForDupl'
             , l_list_utl_col_dupl
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlValueListForDupl'
             , l_list_utl_val_dupl
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'notNullClause'
             , l_vc_col_pk_notnull
            );
         ELSE
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , dwhutl_stmt.c_sql_insert_copy
            );
         END IF;

         l_list_utl_val :=
               c_token_utl_colval_hist
            || ','
            || l_list_utl_val_dupl;
         -- There is no optional incremental retrieval (this is an init procedure)
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'computeIncrementBound'
          , NULL
         );
         --
         --
         dwhutl_stmt.prc_set_text_param (
            l_sql_prc_token
          , 'targetIdentifier'
          , g_vc_table_name_hist
         );
         dwhutl_stmt.prc_set_text_param (
            l_sql_prc_token
          , 'sourceIdentifier'
          , g_vc_source_identifier
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'sourceColumnList'
          , l_vc_col_all
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetColumnList'
          , l_vc_col_all
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlColumnList'
          , l_list_utl_col
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlValueList'
          , l_list_utl_val
         );
         --
         --
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'filterClause'
          , CASE
               WHEN g_vc_filter_clause IS NOT NULL THEN
                     ' WHERE '
                  || g_vc_filter_clause
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , NULL
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END LOOP;

      l_sql_prc_token := c_token_analyze;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'statisticsType'
       , 'HSAN'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_hist
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'stgOwner'
       , g_vc_owner_stg
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'partition'
       , NULL
      );
      l_sql_prc_buffer :=
            l_sql_prc_buffer
         || CHR (10)
         || l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         -- Truncate duplicates table
         l_sql_prc_token := c_token_analyze;
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'statisticsType'
          , 'DUAN'
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'stgOwner'
          , g_vc_owner_stg
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , NULL
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Put body in the generic prc template
      l_sql_prc := dwhutl_ddls.c_template_prc_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'sourceCode'
       , g_vc_source_code
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'objectName'
       , g_vc_object_name
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'sourceTable'
       , g_vc_table_name_source
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_init
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_init;

   PROCEDURE prc_create_prc_load_stage (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_load_stage';
      l_vc_message       t_string
                            :=    'Procedure load stage '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
      l_list_utl_col     t_string;
      l_list_utl_val     t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- Set utl columns strings
      l_list_utl_col :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_column_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_column_partition
               || ','
         END;
      prc_set_utl_columns (l_list_utl_col);
      --
      -- HEAD
      --
      l_sql_prc := dwhutl_ddls.c_template_prc_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_stage
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      -- Truncate stage table
      l_sql_prc_token :=
            dwhutl_stmt.c_token_enable_parallel_dml
         || CHR (10)
         || dwhutl_stmt.c_token_truncate_table;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_stage
      );
      l_sql_prc_buffer := l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         -- Truncate duplicates table
         l_sql_prc_token := dwhutl_stmt.c_token_truncate_table;
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Fill stage table for each source db
      -- Fill stage for each source db
      FOR i IN g_l_distr_code.FIRST .. g_l_distr_code.LAST LOOP
         l_sql_prc_token := c_token_stage_insert;
         --
         -- Values for the utility columns
         l_list_utl_val :=
            CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     ''''
                  || g_l_distr_code (i)
                  || ''', '
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     fct_get_partition_expr
                  || ', '
            END;

         IF g_n_source_nk_flag = 0
        AND g_vc_col_pk_src IS NOT NULL THEN
            l_vc_col_pk_notnull :=
               dwhutl_stag_meta.fct_get_column_list (
                  g_n_object_id
                , 'PK'
                , 'AND_NOTNULL'
               );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , dwhutl_stmt.c_sql_insert_dedupl
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'duplIdentifier'
             , g_vc_table_name_dupl
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'pkColumnList'
             , g_vc_col_pk_src
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'deduplRankClause'
             , g_vc_dedupl_rank_clause
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlColumnListForDupl'
             , l_list_utl_col
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlValueListForDupl'
             , l_list_utl_val
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'notNullClause'
             , l_vc_col_pk_notnull
            );
         ELSE
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , dwhutl_stmt.c_sql_insert_copy
            );
         END IF;

         -- Add optional increment retrieval statement
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'computeIncrementBound'
          , CASE
               WHEN g_vc_increment_column IS NOT NULL THEN
                  c_token_stage_get_incr_bound
            END
         );
         --
         --
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'insertStatement'
          , dwhutl_stmt.c_sql_insert_copy
         );
         dwhutl_stmt.prc_set_text_param (
            l_sql_prc_token
          , 'targetIdentifier'
          , g_vc_table_name_stage
         );
         dwhutl_stmt.prc_set_text_param (
            l_sql_prc_token
          , 'sourceIdentifier'
          , g_vc_source_identifier
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'sourceColumnList'
          , g_vc_col_all
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetColumnList'
          , g_vc_col_all
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlColumnList'
          , l_list_utl_col
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlValueList'
          , l_list_utl_val
         );
         --
         --
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'incrementColumn'
          , g_vc_increment_column
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'histTableName'
          , g_vc_table_name_hist
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'filterClause'
          ,    CASE
                  WHEN g_vc_filter_clause IS NOT NULL THEN
                        'WHERE '
                     || g_vc_filter_clause
               END
            || CASE
                  WHEN g_vc_increment_column IS NOT NULL THEN
                        CASE
                           WHEN g_vc_filter_clause IS NULL THEN
                              ' WHERE '
                           ELSE
                              ' AND '
                        END
                     || g_vc_increment_column
                     || ' > l_t_increment_bound - '
                     || NVL (g_n_increment_buffer, 0)
               END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || '_'
                  || g_l_distr_code (i)
                  || ')'
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END LOOP;

      -- Put body in the generic prc template
      l_sql_prc := dwhutl_ddls.c_template_prc_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , CASE
            WHEN g_vc_increment_column IS NOT NULL THEN
                  'l_t_increment_bound '
               || g_vc_increment_coldef
               || ';'
         END
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'sourceCode'
       , g_vc_source_code
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'objectName'
       , g_vc_object_name
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'sourceTable'
       , g_vc_table_name_source
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_stage
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_load_stage;

   PROCEDURE prc_create_prc_load_stage_p (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_load_stage_p';
      l_vc_message       t_string
                            :=    'Procedure load stage partition '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
      l_n_iter_begin     NUMBER;
      l_n_iter_end       NUMBER;
      l_list_utl_col     t_string;
      l_list_utl_val     t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- Set utl columns strings
      l_list_utl_col :=
         CASE
            WHEN g_l_distr_code.COUNT > 1 THEN
                  c_token_utl_column_source_db
               || ','
            WHEN g_vc_partition_expr IS NOT NULL THEN
                  c_token_utl_column_partition
               || ','
         END;
      prc_set_utl_columns (l_list_utl_col);

      --
      -- HEAD
      --
      IF g_l_distr_code.COUNT > 1 THEN
         FOR i IN g_l_dblink.FIRST .. g_l_dblink.LAST LOOP
            -- Stage1 procedure head
            l_sql_prc := dwhutl_ddls.c_template_prc_head;
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc
             , 'prcName'
             ,    dwhutl_stag_param.c_vc_procedure_load_stage_p
               || '_'
               || g_l_distr_code (i)
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc
             , 'prcParameters'
             , c_token_prc_param
            );
            l_buffer_pkg_head :=
                  l_buffer_pkg_head
               || CHR (10)
               || l_sql_prc;
         END LOOP;
      ELSIF g_vc_partition_expr IS NOT NULL THEN
         FOR i IN 0 .. 9 LOOP
            -- Stage1 procedure head
            l_sql_prc := dwhutl_ddls.c_template_prc_head;
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc
             , 'prcName'
             ,    dwhutl_stag_param.c_vc_procedure_load_stage_p
               || '_p'
               || i
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc
             , 'prcParameters'
             , c_token_prc_param
            );
            l_buffer_pkg_head :=
                  l_buffer_pkg_head
               || CHR (10)
               || l_sql_prc;
         END LOOP;
      END IF;

      --
      -- BODY
      --
      IF g_l_distr_code.COUNT > 1 THEN
         l_n_iter_begin := g_l_dblink.FIRST;
         l_n_iter_end := g_l_dblink.LAST;
      ELSIF g_vc_partition_expr IS NOT NULL THEN
         l_n_iter_begin := 0;
         l_n_iter_end := 9;
      END IF;

      FOR i IN l_n_iter_begin .. l_n_iter_end LOOP
         l_sql_prc_token := dwhutl_stmt.c_token_truncate_partition;
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_stage
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || '_'
                  || g_l_distr_code (i)
                  || ')'
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         -- Fill stage table for each source db
         l_sql_prc_token :=
               l_sql_prc_token
            || CHR (10)
            || c_token_stage_insert;
         --
         -- Values for the utility columns
         l_list_utl_val :=
            CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     ''''
                  || g_l_distr_code (i)
                  || ''', '
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     fct_get_partition_expr
                  || ', '
            END;

         IF g_n_source_nk_flag = 0
        AND g_vc_col_pk_src IS NOT NULL THEN
            l_vc_col_pk_notnull :=
               dwhutl_stag_meta.fct_get_column_list (
                  g_n_object_id
                , 'PK'
                , 'AND_NOTNULL'
               );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , dwhutl_stmt.c_sql_insert_dedupl
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'duplIdentifier'
             , g_vc_table_name_dupl
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'pkColumnList'
             , g_vc_col_pk_src
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'deduplRankClause'
             , g_vc_dedupl_rank_clause
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlColumnListForDupl'
             , l_list_utl_col
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'utlValueListForDupl'
             , l_list_utl_val
            );
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'notNullClause'
             , l_vc_col_pk_notnull
            );
         ELSE
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , dwhutl_stmt.c_sql_insert_copy
            );
         END IF;

         -- Add optional increment retrieval statement
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'computeIncrementBound'
          , CASE
               WHEN g_vc_increment_column IS NOT NULL THEN
                  c_token_stage_get_incr_bound
            END
         );
         --
         --
         g_vc_source_identifier :=
            CASE
               WHEN g_l_dblink.COUNT = 1 THEN
                  CASE
                     WHEN g_l_dblink (1) IS NULL
                      AND g_l_owner_src (1) = g_vc_owner_stg THEN
                        g_vc_table_name_source
                     ELSE
                           CASE
                              WHEN g_l_owner_src (1) IS NOT NULL THEN
                                    g_l_owner_src (1)
                                 || '.'
                           END
                        || g_vc_table_name_source
                        || CASE
                              WHEN g_l_dblink (1) IS NOT NULL THEN
                                    '@'
                                 || g_l_dblink (1)
                           END
                  END
               ELSE
                  CASE
                     WHEN g_l_dblink (i) IS NULL
                      AND g_l_owner_src (i) = g_vc_owner_stg THEN
                        g_vc_table_name_source
                     ELSE
                        CASE
                           WHEN g_l_owner_src (i) IS NOT NULL THEN
                                 g_l_owner_src (i)
                              || '.'
                              || g_vc_table_name_source
                              || CASE
                                    WHEN g_l_dblink (i) IS NOT NULL THEN
                                          '@'
                                       || g_l_dblink (i)
                                 END
                        END
                  END
            END;
         --
         --
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'insertStatement'
          , dwhutl_stmt.c_sql_insert_copy
         );
         dwhutl_stmt.prc_set_text_param (
            l_sql_prc_token
          , 'targetIdentifier'
          , g_vc_table_name_stage
         );
         dwhutl_stmt.prc_set_text_param (
            l_sql_prc_token
          , 'sourceIdentifier'
          , g_vc_source_identifier
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'sourceColumnList'
          , g_vc_col_all
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetColumnList'
          , g_vc_col_all
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlColumnList'
          , l_list_utl_col
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'utlValueList'
          , l_list_utl_val
         );
         --
         --
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'incrementColumn'
          , g_vc_increment_column
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'filterClause'
          ,    CASE
                  WHEN g_vc_partition_expr IS NOT NULL THEN
                        ' WHERE '
                     || fct_get_partition_expr
                     || ' = '
                     || i
               END
            || CASE
                  WHEN g_vc_filter_clause IS NOT NULL THEN
                        CASE
                           WHEN g_vc_partition_expr IS NULL THEN
                              ' WHERE '
                           ELSE
                              ' AND '
                        END
                     || g_vc_filter_clause
               END
            || CASE
                  WHEN g_vc_increment_column IS NOT NULL THEN
                        CASE
                           WHEN g_vc_partition_expr IS NULL
                            AND g_vc_filter_clause IS NULL THEN
                              ' WHERE '
                           ELSE
                              ' AND '
                        END
                     || g_vc_increment_column
                     || ' > l_t_increment_bound'
               END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , CASE
               WHEN g_l_distr_code.COUNT > 1 THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || '_'
                  || g_l_distr_code (i)
                  || ')'
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_l_distr_code.COUNT > 1
                 OR g_vc_partition_expr IS NOT NULL THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         -- Put body in the generic prc template
         l_sql_prc := dwhutl_ddls.c_template_prc_body;
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'prcParameters'
          , c_token_prc_param
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'varList'
          , CASE
               WHEN g_vc_increment_column IS NOT NULL THEN
                     'l_t_increment_bound '
                  || g_vc_increment_coldef
                  || ';'
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'prcInitialize'
          , c_token_prc_initialize
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'prcFinalize'
          , c_token_prc_finalize
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'exceptionHandling'
          , c_token_prc_exception
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'prcBody'
          , l_sql_prc_token
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'sourceCode'
          , g_vc_source_code
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'objectName'
          , g_vc_object_name
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'sourceTable'
          , g_vc_table_name_source
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc
          , 'prcName'
          ,    dwhutl_stag_param.c_vc_procedure_load_stage_p
            || '_'
            || CASE
                  WHEN g_l_distr_code.COUNT > 1 THEN
                     g_l_distr_code (i)
                  ELSE
                        'p'
                     || i
               END
         );
         l_buffer_pkg_body :=
               l_buffer_pkg_body
            || CHR (10)
            || l_sql_prc;
      END LOOP;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_load_stage_p;

   PROCEDURE prc_create_prc_load_diff (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name         t_object_name := 'prc_create_prc_load_diff';
      l_vc_message          t_string
                               :=    'Procedure load diff '
                                  || g_vc_package_main;
      l_sql_prc             CLOB;
      l_sql_prc_token       CLOB;
      l_sql_prc_buffer      CLOB;
      --
      l_n_iter_begin        NUMBER;
      l_n_iter_end          NUMBER;
      -- List of columns
      l_vc_col_list         t_string;
      l_vc_col_pk_hist      t_string;
      l_vc_clause_on        t_string;
      l_vc_upd_clause_set   t_string;
      l_vc_clause_history   t_string;
      l_vc_clause_update    t_string;
      l_vc_col_nvl2         t_string;
      -- Utl columns
      l_list_utl_col        t_string;
      l_list_utl_val        t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- Set utl columns strings
      l_list_utl_col := c_token_utl_column_hist;
      -- Get list of pk columns of the History Table
      dwhutl_trac.log_sub_trace (
         l_vc_prc_name
       , l_vc_message
       , 'Get list of pk columns of the History Table'
      );
      l_vc_col_pk_hist :=
         dwhutl_dict.fct_get_column_list (
            NULL
          , g_vc_owner_stg
          , g_vc_table_name_hist
          , 'PK'
          , 'LIST_SIMPLE'
          , p_vc_exclude_list   => dwhutl_stag_param.c_vc_column_valid_to
         );
      dwhutl_trac.log_sub_trace (
         l_vc_prc_name
       , l_vc_message
       , 'Got columns'
      );
      --
      -- HEAD
      --
      l_sql_prc := dwhutl_ddls.c_template_prc_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_diff
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      -- Hist incremental procedure head
      l_sql_prc := dwhutl_ddls.c_template_prc_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_diff_incr
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      -- Get list of all columns
      dwhutl_trac.log_sub_trace (
         l_vc_prc_name
       , l_vc_message
       , 'Get list of all columns in common within stage and hist tables'
      );
      l_vc_col_list :=
         dwhutl_dict.fct_get_column_subset (
            NULL
          , g_vc_owner_stg
          , g_vc_table_name_stage
          , g_vc_owner_stg
          , g_vc_table_name_hist
          , 'COMMON_ALL'
          , 'LIST_SIMPLE'
         );
      dwhutl_trac.log_sub_trace (
         l_vc_prc_name
       , l_vc_message
       , 'Got columns'
      );                                                                                                                                                                   -- In case the pk of stage 1 and History Tables is not the same, write a warning log

      IF g_vc_col_pk = l_vc_col_pk_hist
      OR (g_vc_col_pk IS NULL
      AND l_vc_col_pk_hist IS NULL) THEN
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          ,    'Source '
            || g_vc_source_code
            || ', Object '
            || g_vc_table_name_source
            || ' : Stage and hist table have the same Natural Keys'
         );
      ELSE
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , l_vc_message
          ,    'Source '
            || g_vc_source_code
            || ', Object '
            || g_vc_table_name_source
            || ' : Stage and hist table have different Natural Keys'
         );
      END IF;

      -- analyze stage table
      l_sql_prc_token := c_token_analyze;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'statisticsType'
       , 'STAN'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'stgOwner'
       , g_vc_owner_stg
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_stage
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'partition'
       , NULL
      );
      l_sql_prc_buffer := l_sql_prc_token;

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NOT NULL THEN
         -- Analyse duplicates table
         l_sql_prc_token := c_token_analyze;
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'statisticsType'
          , 'DUAN'
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'stgOwner'
          , g_vc_owner_stg
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'tableName'
          , g_vc_table_name_dupl
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partition'
          , NULL
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END IF;

      -- Check hist/stage nk differences and truncate diff table
      l_sql_prc_buffer :=
            l_sql_prc_buffer
         || CHR (10)
         || c_token_diff_check;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'stgOwner'
       , g_vc_owner_stg
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'stageTableName'
       , g_vc_table_name_stage
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'diffTableName'
       , g_vc_table_name_diff
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'histTableName'
       , g_vc_table_name_hist
      );

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NULL THEN
         -- If there is no natural key (tecnical PK) then use the alternate difference method
         l_vc_clause_on :=
            dwhutl_dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_ALL'
             , 'AND_ALIAS'
             , 'trg'
             , 'src'
            );
      ELSE
         -- If there is a natural key (tecnical PK) and the full outer join method is specified,
         -- then use the merge template
         -- Get list of conditions for the on clause of the merge
         l_vc_clause_on :=
            dwhutl_dict.fct_get_column_list (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'PK'
             , 'AND_ALIAS'
             , 'trg'
             , 'src'
             , p_vc_exclude_list   => dwhutl_stag_param.c_vc_column_valid_to
            );
         l_vc_col_nvl2 :=
            dwhutl_dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_ALL'
             , 'LIST_NVL2'
             , 'src'
             , 'trg'
            );
         l_vc_clause_history :=
            dwhutl_dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_NPK'
             , 'OR_DECODE'
             , 'trg'
             , 'src'
             , p_vc_exclude_list   => g_vc_col_update
            );
         l_vc_clause_update :=
            dwhutl_dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_NPK'
             , 'OR_DECODE'
             , 'trg'
             , 'src'
             , p_vc_exclude_list   => g_vc_col_hist
            );
      END IF;

      l_n_iter_begin := 0;

      IF g_vc_partition_expr IS NOT NULL THEN
         l_n_iter_end := 9;
      ELSE
         l_n_iter_end := 0;
      END IF;

      l_sql_prc_token := '';

      FOR i IN l_n_iter_begin .. l_n_iter_end LOOP
         l_sql_prc_token := c_token_diff_insert;

         IF g_n_source_nk_flag = 0
        AND g_vc_col_pk_src IS NULL THEN
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , dwhutl_stmt.c_sql_insert_diff_without_nk
            );
         ELSE
            dwhutl_ddls.prc_set_text_param (
               l_sql_prc_token
             , 'insertStatement'
             , dwhutl_stmt.c_sql_insert_diff_with_nk
            );
         END IF;

         dwhutl_dict.prc_set_text_param (
            l_sql_prc_token
          , 'enableParallelDML'
          , CASE
               WHEN l_vc_set_anonymized IS NOT NULL THEN
                  dwhutl_stmt.c_token_enable_parallel_dml
               ELSE
                  dwhutl_stmt.c_token_disable_parallel_dml
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'diffPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'sourcePartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END LOOP;

      -- Set object identifiers
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'diffIdentifier'
       , g_vc_table_name_diff
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'sourceIdentifier'
       , g_vc_table_name_stage
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'targetIdentifier'
       , g_vc_table_name_hist
      );
      -- Set list of columns
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'nvl2ColumnList'
       , l_vc_col_nvl2
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'targetColumnList'
       , l_vc_col_list
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'utlColumnList'
       , l_list_utl_col
      );
      -- Set clauses
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'historyClause'
       , NVL (l_vc_clause_history, '1=0')
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'updateClause'
       , NVL (l_vc_clause_update, '1=0')
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'joinClause'
       , l_vc_clause_on
      );
      prc_set_utl_columns (l_sql_prc_buffer);
      -- Ad analyze token
      l_sql_prc_token := c_token_analyze;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'statisticsType'
       , 'DFAN'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'stgOwner'
       , g_vc_owner_stg
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_diff
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'partition'
       , NULL
      );
      l_sql_prc_buffer :=
            l_sql_prc_buffer
         || CHR (10)
         || l_sql_prc_token;
      -- Put all other code parameters
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'sourceCode'
       , g_vc_source_code
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'objectName'
       , g_vc_object_name
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'sourceTable'
       , g_vc_table_name_source
      );
      --
      -- Put body in the generic prc template
      l_sql_prc := dwhutl_ddls.c_template_prc_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'joinType'
       , 'FULL'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_diff
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      --
      -- Load Hist without deletes
      --
      -- Put body in the generic prc template
      l_sql_prc := dwhutl_ddls.c_template_prc_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'joinType'
       , 'LEFT'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_diff_incr
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_load_diff;

   PROCEDURE prc_create_prc_load_hist (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name         t_object_name := 'prc_create_prc_load_hist';
      l_vc_message          t_string
                               :=    'Procedure load hist '
                                  || g_vc_package_main;
      l_sql_prc             CLOB;
      l_sql_prc_token       CLOB;
      l_sql_prc_buffer      CLOB;
      --
      l_n_iter_begin        NUMBER;
      l_n_iter_end          NUMBER;
      -- List of columns
      l_vc_col_simple       t_string;
      l_vc_clause_on        t_string;
      l_vc_upd_clause_set   t_string;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      -- Set anonymizad column lists
      l_vc_set_anonymized := '';
      l_vc_col_anonymized := '';
      l_vc_fct_anonymized := '';
      l_vc_ins_anonymized := '';
      -- ANONYMIZATION prc_set_anonymized_columns;
      --
      -- HEAD
      --
      l_sql_prc := dwhutl_ddls.c_template_prc_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_hist
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY
      --
      -- Get list of all columns
      l_vc_col_simple :=
         dwhutl_dict.fct_get_column_subset (
            NULL
          , g_vc_owner_stg
          , g_vc_table_name_stage
          , g_vc_owner_stg
          , g_vc_table_name_hist
          , 'COMMON_ALL'
          , 'LIST_SIMPLE'
         );

      IF g_n_source_nk_flag = 0
     AND g_vc_col_pk_src IS NULL THEN
         -- If there is no natural key (tecnical PK) then use the alternate difference method
         l_vc_clause_on :=
            dwhutl_dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_ALL'
             , 'AND_ALIAS'
             , 'trg'
             , 'src'
            );
      ELSE
         -- If there is a natural key (tecnical PK) and the full outer join method is specified,
         -- then use the merge template
         -- Get list of conditions for the on clause of the merge
         l_vc_clause_on :=
            dwhutl_dict.fct_get_column_list (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'PK'
             , 'AND_ALIAS'
             , 'trg'
             , 'src'
             , p_vc_exclude_list   => dwhutl_stag_param.c_vc_column_valid_to
            );
         l_vc_upd_clause_set :=
            dwhutl_dict.fct_get_column_subset (
               NULL
             , g_vc_owner_stg
             , g_vc_table_name_stage
             , g_vc_owner_stg
             , g_vc_table_name_hist
             , 'COMMON_NPK'
             , 'SET_ALIAS'
             , 'trg'
             , 'src'
            );
      END IF;

      l_n_iter_begin := 0;

      IF g_vc_partition_expr IS NOT NULL THEN
         l_n_iter_end := 9;
      ELSE
         l_n_iter_end := 0;
      END IF;

      l_sql_prc_token := '';

      FOR i IN l_n_iter_begin .. l_n_iter_end LOOP
         l_sql_prc_token := c_token_hist_reconcile;
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'closeStatement'
          , dwhutl_stmt.c_sql_reconcile_close
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'updateStatement'
          , dwhutl_stmt.c_sql_reconcile_update
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'insertStatement'
          , dwhutl_stmt.c_sql_reconcile_insert
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'enableParallelDML'
          , CASE
               WHEN l_vc_set_anonymized IS NOT NULL THEN
                  dwhutl_stmt.c_token_enable_parallel_dml
               ELSE
                  dwhutl_stmt.c_token_disable_parallel_dml
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'diffPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'diffPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'targetPartition'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                     'PARTITION ('
                  || dwhutl_stag_param.c_vc_prefix_partition
                  || TO_CHAR (i)
                  || ')'
            END
         );
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_token
          , 'partitionId'
          , CASE
               WHEN g_vc_partition_expr IS NOT NULL THEN
                  TRIM (TO_CHAR (i))
               ELSE
                  'NULL'
            END
         );
         l_sql_prc_buffer :=
               l_sql_prc_buffer
            || CHR (10)
            || l_sql_prc_token;
      END LOOP;

      -- Set object identifiers
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'diffIdentifier'
       , g_vc_table_name_diff
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'targetIdentifier'
       , g_vc_table_name_hist
      );
      -- Set list of columns
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'diffColumnList'
       ,    l_vc_col_simple
         || CHR (10)
         || l_vc_ins_anonymized
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'targetColumnList'
       ,    l_vc_col_simple
         || CHR (10)
         || l_vc_col_anonymized
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'utlColumnList'
       , c_token_utl_column_hist
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'utlValueList'
       , c_token_utl_colval_hist
      );
      -- Set clauses
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'joinClause'
       , l_vc_clause_on
      );
      -- Set the matched clause of the merge statement. This exists only if there are non-NK columns to set
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'matchedClause'
       , CASE
            WHEN l_vc_upd_clause_set IS NOT NULL THEN
                  l_vc_upd_clause_set
               || CHR (10)
               || l_vc_set_anonymized
               || ', '
         END
      );
      prc_set_utl_columns (l_sql_prc_buffer);
      -- Analyze token
      l_sql_prc_token := c_token_analyze;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'statisticsType'
       , 'HSAN'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'stgOwner'
       , g_vc_owner_stg
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_token
       , 'tableName'
       , g_vc_table_name_hist
      );
      l_sql_prc_buffer :=
            l_sql_prc_buffer
         || CHR (10)
         || l_sql_prc_token;                                                                                                                                                                                                   -- Put all other code parameters
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'sourceCode'
       , g_vc_source_code
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'objectName'
       , g_vc_object_name
      );
      --
      -- Load Hist with table comparison
      --
      -- Put body in the generic prc template
      l_sql_prc := dwhutl_ddls.c_template_prc_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , c_token_prc_initialize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , c_token_prc_finalize
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , c_token_prc_exception
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_load_hist
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_load_hist;

   PROCEDURE prc_create_prc_wrapper (
      p_b_tc_only_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag      BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name      t_object_name := 'prc_create_prc_wrapper';
      l_vc_message       t_string
                            :=    'Procedure wrapper '
                               || g_vc_package_main;
      l_sql_prc          CLOB;
      l_sql_prc_token    CLOB;
      l_sql_prc_buffer   CLOB;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      --
      -- HEAD for FULL load
      --
      l_sql_prc := dwhutl_ddls.c_template_prc_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_wrapper
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY for FULL load
      --
      l_sql_prc_buffer := c_token_prc_wrapper;

      IF p_b_tc_only_flag THEN
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_buffer
          , 'prcLoadStage'
          , NULL
         );
      ELSE
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_buffer
          , 'prcLoadStage'
          ,    dwhutl_stag_param.c_vc_procedure_load_stage
            || ';'
         );
      END IF;

      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcLoadDiff'
       ,    dwhutl_stag_param.c_vc_procedure_load_diff
         || ';'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcLoadHist'
       ,    dwhutl_stag_param.c_vc_procedure_load_hist
         || ';'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcTruncStage'
       ,    dwhutl_stag_param.c_vc_procedure_trunc_stage
         || ';'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcTruncDiff'
       ,    dwhutl_stag_param.c_vc_procedure_trunc_diff
         || ';'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'tableName'
       , g_vc_table_name_hist
      );
      -- Put body in the generic prc template
      l_sql_prc := dwhutl_ddls.c_template_prc_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_wrapper
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      --
      -- HEAD for INCREMENTAL load
      --
      l_sql_prc := dwhutl_ddls.c_template_prc_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_wrapper_incr
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      l_buffer_pkg_head :=
            l_buffer_pkg_head
         || CHR (10)
         || l_sql_prc;
      --
      -- BODY for DELTA load
      --
      l_sql_prc_buffer := c_token_prc_wrapper;

      IF p_b_tc_only_flag THEN
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_buffer
          , 'prcLoadStage'
          , NULL
         );
      ELSE
         dwhutl_ddls.prc_set_text_param (
            l_sql_prc_buffer
          , 'prcLoadStage'
          ,    dwhutl_stag_param.c_vc_procedure_load_stage
            || ';'
         );
      END IF;

      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcLoadDiff'
       ,    dwhutl_stag_param.c_vc_procedure_load_diff
         || ';'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcLoadHist'
       ,    dwhutl_stag_param.c_vc_procedure_load_diff_incr
         || ';'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcTruncStage'
       ,    dwhutl_stag_param.c_vc_procedure_trunc_stage
         || ';'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'prcTruncDiff'
       ,    dwhutl_stag_param.c_vc_procedure_trunc_diff
         || ';'
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc_buffer
       , 'tableName'
       , g_vc_table_name_hist
      );
      -- Put body in the generic prc template
      l_sql_prc := dwhutl_ddls.c_template_prc_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcParameters'
       , c_token_prc_param
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'varList'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcInitialize'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcFinalize'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'exceptionHandling'
       , NULL
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcBody'
       , l_sql_prc_buffer
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_prc
       , 'prcName'
       , dwhutl_stag_param.c_vc_procedure_wrapper_incr
      );
      l_buffer_pkg_body :=
            l_buffer_pkg_body
         || CHR (10)
         || l_sql_prc;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_prc_wrapper;

   PROCEDURE prc_compile_package_main (p_b_raise_flag BOOLEAN DEFAULT FALSE)
   IS
      l_vc_prc_name   t_object_name := 'prc_compile_package_main';
      l_vc_message    t_string
                         :=    'Package compile '
                            || g_vc_package_main;
      l_sql_create    CLOB;
   BEGIN
      -- Package head
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Package head: Begin'
      );
      l_sql_create := dwhutl_ddls.c_template_pkg_head;
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'pkgName'
       , g_vc_package_main
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'varList'
       , ''
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'prcList'
       , l_buffer_pkg_head
      );
      -- Execute ddl for package head
      prc_store_ddl (
         'PACKAGE'
       , g_vc_package_main
       , l_sql_create
      );
      dwhutl_ddls.prc_create_object (
         'PACKAGE'
       , g_vc_package_main
       , l_sql_create
       , FALSE
       , p_b_raise_flag
      );
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Package head: End'
      );
      -- Package body
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Package body: Begin'
      );
      l_sql_create := dwhutl_ddls.c_template_pkg_body;
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'varList'
       , ''
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'prcList'
       , l_buffer_pkg_body
      );
      dwhutl_ddls.prc_set_text_param (
         l_sql_create
       , 'pkgName'
       , g_vc_package_main
      );
      -- Execute ddl for package body
      prc_store_ddl (
         'PACKAGE BODY'
       , g_vc_package_main
       , l_sql_create
      );
      dwhutl_ddls.prc_create_object (
         'PACKAGE BODY'
       , g_vc_package_main
       , l_sql_create
       , FALSE
       , p_b_raise_flag
      );
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Package body: End'
      );
   END prc_compile_package_main;

   PROCEDURE prc_create_package_main (
      p_b_hist_only_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag        BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name   t_object_name := 'prc_create_package_main';
      l_vc_message    t_string
                         :=    'Package create '
                            || g_vc_package_main;
      l_sql_create    CLOB;
   BEGIN
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'Begin'
      );
      l_buffer_pkg_head := '';
      l_buffer_pkg_body := '';

      IF NOT p_b_hist_only_flag THEN
         -- Get list of columns for the stage 1 and init procedures
         l_vc_col_src :=
            dwhutl_dict.fct_get_column_list (
               g_vc_dblink
             , g_vc_owner_src
             , g_vc_table_name_source
             , 'ALL'
             , 'LIST_SIMPLE'
            );
         l_vc_col_dupl :=
            dwhutl_dict.fct_get_column_subset (
               g_vc_dblink
             , g_vc_owner_src
             , g_vc_table_name_source
             , g_vc_owner_stg
             , g_vc_table_name_dupl
             , 'COMMON_ALL'
             , 'LIST_SIMPLE'
            );
      END IF;

      --
      -- Fill buffers with single procedures
      --
      -- Trunc Stage Table
      prc_create_prc_trunc_stage (p_b_raise_flag);
      --
      -- Trunc Diff table
      prc_create_prc_trunc_diff (p_b_raise_flag);

      IF NOT p_b_hist_only_flag THEN
         --
         -- Initial load
         prc_create_prc_init (p_b_raise_flag);
         --
         -- Stage 1 load
         prc_create_prc_load_stage (p_b_raise_flag);

         IF g_l_dblink.COUNT > 1
         OR g_vc_partition_expr IS NOT NULL THEN
            --
            -- Stage 1 load - single partitions
            prc_create_prc_load_stage_p (p_b_raise_flag);
         END IF;
      END IF;

      --
      -- Hist load
      prc_create_prc_load_diff (p_b_raise_flag);
      prc_create_prc_load_hist (p_b_raise_flag);
      --
      -- Wrapper
      prc_create_prc_wrapper (
         p_b_hist_only_flag
       , p_b_raise_flag
      );
      --
      -- Compile package
      prc_compile_package_main (p_b_raise_flag);
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , l_vc_message
       , 'End'
      );
   END prc_create_package_main;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END dwhutl_stag_ddl;
2014-11-20 16:37:54.477 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_ddl/stag_ddl-impl.sql executed
2014-11-20 16:37:54.478 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_build/stag_build-def.sql delimiter 
2014-11-20 16:37:54.479 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE p#frm#stag_build
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   /**
    * Build stage target objects
    */
   PROCEDURE prc_build_all (
      p_vc_source_code     VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name     VARCHAR2 DEFAULT 'ALL'
    , p_b_index_flag    BOOLEAN DEFAULT FALSE
    , p_b_drop_stage_flag    BOOLEAN DEFAULT TRUE
    , p_b_drop_hist_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag       BOOLEAN DEFAULT FALSE
   );

   /**
    * Build hist target objects
    */
   PROCEDURE prc_build_hist (
      p_vc_source_code     VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name     VARCHAR2 DEFAULT 'ALL'
    , p_b_drop_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag       BOOLEAN DEFAULT FALSE
   );

   /**
    * Upgrade hist table
    */
   PROCEDURE prc_upgrade_hist (
      p_vc_source_code    VARCHAR2
    , p_vc_object_name    VARCHAR2
   );
END p#frm#stag_build;
2014-11-20 16:37:54.479 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE dwhutl_stag_build
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   /**
    * Build stage target objects
    */
   PROCEDURE prc_build_all (
      p_vc_source_code     VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name     VARCHAR2 DEFAULT 'ALL'
    , p_b_index_flag    BOOLEAN DEFAULT FALSE
    , p_b_drop_stage_flag    BOOLEAN DEFAULT TRUE
    , p_b_drop_hist_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag       BOOLEAN DEFAULT FALSE
   );

   /**
    * Build hist target objects
    */
   PROCEDURE prc_build_hist (
      p_vc_source_code     VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name     VARCHAR2 DEFAULT 'ALL'
    , p_b_drop_flag    BOOLEAN DEFAULT FALSE
    , p_b_raise_flag       BOOLEAN DEFAULT FALSE
   );

   /**
    * Upgrade hist table
    */
   PROCEDURE prc_upgrade_hist (
      p_vc_source_code    VARCHAR2
    , p_vc_object_name    VARCHAR2
   );
END dwhutl_stag_build;
2014-11-20 16:37:54.488 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_build/stag_build-def.sql executed
2014-11-20 16:37:54.488 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_build/stag_build-impl.sql delimiter 
2014-11-20 16:37:54.489 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE BODY p#frm#stag_build
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * String type
   */
   SUBTYPE t_string IS VARCHAR2 (32767);

   PROCEDURE prc_build_all (
      p_vc_source_code       VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name       VARCHAR2 DEFAULT 'ALL'
    , p_b_index_flag         BOOLEAN DEFAULT FALSE
    , p_b_drop_stage_flag    BOOLEAN DEFAULT TRUE
    , p_b_drop_hist_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag         BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name           t_object_name := 'prc_build_all';
      l_vc_stage_db_list      t_string;
      l_vc_stage_owner_list   t_string;
      l_vc_distr_code_list    t_string;
      l_vc_col_def            t_string;
      l_vc_col_all            t_string;
      l_vc_col_pk             t_string;
      l_vc_col_comm           t_string;
      --
      l_vc_col_hst            t_string;
      l_vc_col_upd            t_string;
   BEGIN
      --p#frm#trac.set_console_logging (FALSE);
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Start'
       , 'Build all db objects needed for a stage data flow'
      );
      p#frm#stag_meta.prc_set_object_properties;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , 'Object properties'
       , 'Set names of db objects to be built'
      );
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Start building db objects'
      );

      -- Select all objects
      FOR r_obj IN (  SELECT s.stag_source_id
                           , s.stag_source_code
                           , s.stag_source_prefix
                           , d.stag_source_db_link
                           , d.stag_source_owner
                           , s.stag_owner
                           , s.stag_ts_stage_data
                           , s.stag_ts_stage_indx
                           , s.stag_ts_hist_data
                           , s.stag_ts_hist_indx
                           , s.stag_fb_archive
                           , o.stag_object_id
                           , o.stag_parallel_degree
                           , o.stag_source_nk_flag
                           , o.stag_object_name
                           , o.stag_object_comment
                           , o.stag_object_root
                           , o.stag_src_table_name
                           , o.stag_dupl_table_name
                           , o.stag_diff_table_name
                           , o.stag_diff_nk_name
                           , o.stag_stage_table_name
                           , o.stag_hist_table_name
                           , o.stag_hist_nk_name
                           , o.stag_hist_view_name
                           , o.stag_hist_fbda_name
                           , o.stag_package_name
                           , o.stag_filter_clause
                           , o.stag_partition_clause
                           , o.stag_hist_flag
                           , o.stag_fbda_flag
                           , o.stag_increment_buffer
                           , c.stag_increment_column
                           , c.stag_increment_coldef
                        FROM p#frm#stag_source_t s
                           , (SELECT stag_source_id
                                   , stag_source_db_link
                                   , stag_source_owner
                                FROM (SELECT stag_source_id
                                           , stag_source_db_link
                                           , stag_source_owner
                                           , ROW_NUMBER () OVER (PARTITION BY stag_source_id ORDER BY stag_source_db_id) AS source_db_order
                                        FROM p#frm#stag_source_db_t)
                               WHERE source_db_order = 1) d
                           , p#frm#stag_object_t o
                           , (SELECT stag_object_id
                                   , stag_column_name AS stag_increment_column
                                   , stag_column_def AS stag_increment_coldef
                                FROM (SELECT stag_object_id
                                           , stag_column_name
                                           , stag_column_def
                                           , ROW_NUMBER () OVER (PARTITION BY stag_object_id ORDER BY stag_column_pos) AS column_order
                                        FROM p#frm#stag_column_t
                                       WHERE stag_column_incr_flag > 0
                                         AND (stag_column_def LIKE 'DATE%'
                                           OR stag_column_def LIKE 'NUMBER%'))
                               WHERE column_order = 1) c
                       WHERE s.stag_source_id = d.stag_source_id
                         AND s.stag_source_id = o.stag_source_id
                         AND o.stag_object_id = c.stag_object_id(+)
                         AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                         AND p_vc_object_name IN (o.stag_object_name, 'ALL')
                    ORDER BY stag_object_id) LOOP
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Start building objects'
         );
         -- Reset list strings
         l_vc_stage_db_list := '';
         l_vc_stage_owner_list := '';
         l_vc_distr_code_list := '';
         l_vc_col_def := '';
         l_vc_col_all := '';
         l_vc_col_pk := '';
         l_vc_col_hst := '';
         l_vc_col_upd := '';

         -- Build list of values for objects with multiple sources
         FOR r_db IN (SELECT stag_source_db_link
                           , stag_source_owner
                           , stag_distribution_code
                        FROM p#frm#stag_source_db_t
                       WHERE stag_source_id = r_obj.stag_source_id) LOOP
            l_vc_stage_db_list :=
                  l_vc_stage_db_list
               || r_db.stag_source_db_link
               || ',';
            l_vc_stage_owner_list :=
                  l_vc_stage_owner_list
               || r_db.stag_source_owner
               || ',';
            l_vc_distr_code_list :=
                  l_vc_distr_code_list
               || r_db.stag_distribution_code
               || ',';
         END LOOP;

         l_vc_stage_db_list :=
            RTRIM (
               l_vc_stage_db_list
             , ','
            );
         l_vc_stage_owner_list :=
            RTRIM (
               l_vc_stage_owner_list
             , ','
            );
         l_vc_distr_code_list :=
            RTRIM (
               l_vc_distr_code_list
             , ','
            );

         -- Build list of columns
         FOR r_col IN (  SELECT NVL (stag_column_name_map, stag_column_name) AS stag_column_name
                              , stag_column_def
                              , stag_column_nk_pos
                              , stag_column_hist_flag
                           FROM p#frm#stag_column_t
                          WHERE stag_object_id = r_obj.stag_object_id
                            AND stag_column_edwh_flag = 1
                       ORDER BY stag_column_pos) LOOP
            l_vc_col_def :=
                  l_vc_col_def
               || CHR (10)
               || r_col.stag_column_name
               || ' '
               || r_col.stag_column_def
               || ',';
            l_vc_col_all :=
                  l_vc_col_all
               || CHR (10)
               || r_col.stag_column_name
               || ',';

            IF r_col.stag_column_nk_pos >= 0 THEN
               l_vc_col_pk :=
                     l_vc_col_pk
                  || CHR (10)
                  || r_col.stag_column_name
                  || ',';
            END IF;

            IF r_col.stag_column_hist_flag = 1
           AND r_obj.stag_hist_flag = 1 THEN
               l_vc_col_hst :=
                     l_vc_col_hst
                  || r_col.stag_column_name
                  || ',';
            ELSE
               l_vc_col_upd :=
                     l_vc_col_upd
                  || r_col.stag_column_name
                  || ',';
            END IF;
         END LOOP;

         l_vc_col_def :=
            RTRIM (
               l_vc_col_def
             , ','
            );
         l_vc_col_all :=
            RTRIM (
               l_vc_col_all
             , ','
            );
         l_vc_col_pk :=
            RTRIM (
               l_vc_col_pk
             , ','
            );
         l_vc_col_hst :=
            RTRIM (
               l_vc_col_hst
             , ','
            );
         l_vc_col_upd :=
            RTRIM (
               l_vc_col_upd
             , ','
            );
         --
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , 'List of column definitions'
          , l_vc_col_def
         );
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , 'List of columns'
          , l_vc_col_all
         );
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , 'List of pk columns'
          , l_vc_col_pk
         );
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , 'List of columns to historicize'
          , l_vc_col_hst
         );
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          , 'List of columns to update'
          , l_vc_col_upd
         );
         -- Set main properties for the given object
         p#frm#stag_ddl.g_n_object_id := r_obj.stag_object_id;
         p#frm#stag_ddl.g_n_parallel_degree := r_obj.stag_parallel_degree;
         p#frm#stag_ddl.g_n_source_nk_flag := r_obj.stag_source_nk_flag;
         p#frm#stag_ddl.g_n_fbda_flag := r_obj.stag_fbda_flag;
         p#frm#stag_ddl.g_vc_object_name := r_obj.stag_object_name;
         p#frm#stag_ddl.g_vc_table_comment := r_obj.stag_object_comment;
         p#frm#stag_ddl.g_vc_source_code := r_obj.stag_source_code;
         p#frm#stag_ddl.g_vc_prefix_src := r_obj.stag_source_prefix;
         p#frm#stag_ddl.g_vc_dblink := r_obj.stag_source_db_link;
         p#frm#stag_ddl.g_vc_owner_src := r_obj.stag_source_owner;
         p#frm#stag_ddl.g_vc_owner_stg := USER;
         p#frm#stag_ddl.g_vc_table_name_source :=
            CASE
               WHEN r_obj.stag_source_db_link IS NULL
                AND r_obj.stag_source_owner = r_obj.stag_owner THEN
                  r_obj.stag_src_table_name
               ELSE
                  r_obj.stag_object_name
            END;
         p#frm#stag_ddl.g_vc_source_identifier :=
            CASE
               WHEN r_obj.stag_source_db_link IS NULL
                AND r_obj.stag_source_owner = r_obj.stag_owner THEN
                  r_obj.stag_src_table_name
               ELSE
                     CASE
                        WHEN r_obj.stag_source_owner IS NOT NULL THEN
                              r_obj.stag_source_owner
                           || '.'
                     END
                  || r_obj.stag_object_name
                  || CASE
                        WHEN r_obj.stag_source_db_link IS NOT NULL THEN
                              '@'
                           || r_obj.stag_source_db_link
                     END
            END;
         --
         p#frm#stag_ddl.g_vc_dedupl_rank_clause :=
            CASE
               WHEN r_obj.stag_source_db_link IS NULL
                AND r_obj.stag_source_owner = r_obj.stag_owner THEN
                  'ORDER BY 1'
               ELSE
                  'ORDER BY rowid DESC'
            END;
         p#frm#stag_ddl.g_vc_filter_clause := r_obj.stag_filter_clause;
         p#frm#stag_ddl.g_vc_partition_expr := r_obj.stag_partition_clause;
         p#frm#stag_ddl.g_vc_increment_column := r_obj.stag_increment_column;
         p#frm#stag_ddl.g_vc_increment_coldef := r_obj.stag_increment_coldef;
         p#frm#stag_ddl.g_n_increment_buffer := r_obj.stag_increment_buffer;
         p#frm#stag_ddl.g_vc_table_name_dupl := r_obj.stag_dupl_table_name;
         p#frm#stag_ddl.g_vc_table_name_diff := r_obj.stag_diff_table_name;
         p#frm#stag_ddl.g_vc_table_name_stage := r_obj.stag_stage_table_name;
         p#frm#stag_ddl.g_vc_table_name_hist := r_obj.stag_hist_table_name;
         p#frm#stag_ddl.g_vc_nk_name_diff := r_obj.stag_diff_nk_name;
         p#frm#stag_ddl.g_vc_nk_name_hist := r_obj.stag_hist_nk_name;
         p#frm#stag_ddl.g_vc_view_name_hist := r_obj.stag_hist_view_name;
         p#frm#stag_ddl.g_vc_view_name_fbda := r_obj.stag_hist_fbda_name;
         p#frm#stag_ddl.g_vc_package_main := r_obj.stag_package_name;
         --
         p#frm#stag_ddl.g_vc_col_def := l_vc_col_def;
         p#frm#stag_ddl.g_vc_col_all := l_vc_col_all;
         p#frm#stag_ddl.g_vc_col_pk_src := l_vc_col_pk;
         --
         p#frm#stag_ddl.g_vc_col_hist := l_vc_col_hst;
         p#frm#stag_ddl.g_vc_col_update := l_vc_col_upd;
         --
         p#frm#stag_ddl.g_vc_tablespace_stage_data := r_obj.stag_ts_stage_data;
         p#frm#stag_ddl.g_vc_tablespace_stage_indx := r_obj.stag_ts_stage_indx;
         p#frm#stag_ddl.g_vc_tablespace_hist_data := r_obj.stag_ts_hist_data;
         p#frm#stag_ddl.g_vc_tablespace_hist_indx := r_obj.stag_ts_hist_indx;
         p#frm#stag_ddl.g_vc_fb_archive := r_obj.stag_fb_archive;
         --
         p#frm#stag_ddl.g_l_dblink :=
            p#frm#type.fct_string_to_list (
               l_vc_stage_db_list
             , ','
            );
         p#frm#stag_ddl.g_l_owner_src :=
            p#frm#type.fct_string_to_list (
               l_vc_stage_owner_list
             , ','
            );
         p#frm#stag_ddl.g_l_distr_code :=
            p#frm#type.fct_string_to_list (
               l_vc_distr_code_list
             , ','
            );
         p#frm#stag_ddl.g_vc_col_pk :=
               CASE
                  WHEN l_vc_col_pk IS NOT NULL
                   AND p#frm#stag_ddl.g_l_dblink.COUNT > 1 THEN
                        ' '
                     || p#frm#stag_param.c_vc_column_source_db
                     || ',  '
               END
            || l_vc_col_pk;
         -- Create target objects
         p#frm#stag_ddl.prc_create_stage_table (
            p_b_drop_stage_flag
          , p_b_raise_flag
         );
         p#frm#stag_ddl.prc_create_hist_table (
            p_b_drop_hist_flag
          , p_b_raise_flag
         );

         -- Create view or synonym (depending on the environment)
         /*IF param.c_vc_db_name_actual IN (param.c_vc_db_name_dev, param.c_vc_db_name_tst)
         THEN
            p#frm#stag_ddl.prc_create_stage2_view (p_b_raise_flag);
         ELSE
            p#frm#stag_ddl.prc_create_stage2_synonym (p_b_raise_flag);
         END IF;*/
         IF p#frm#stag_ddl.g_vc_fb_archive IS NOT NULL
        AND p#frm#stag_ddl.g_n_fbda_flag = 1 THEN
            p#frm#stag_ddl.prc_create_fbda_view (p_b_raise_flag);
         END IF;

         IF l_vc_col_pk IS NOT NULL
        AND r_obj.stag_source_nk_flag = 0 THEN
            p#frm#stag_ddl.prc_create_duplicate_table (
               TRUE
             , p_b_raise_flag
            );
         END IF;

         p#frm#stag_ddl.prc_create_diff_table (
            TRUE
          , p_b_raise_flag
         );
         p#frm#stag_ddl.prc_create_package_main (
            FALSE
          , TRUE
         );
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Finish building db objects'
         );
      END LOOP;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Finished building db objects'
      );
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Finish'
       , 'Build complete'
      );
   END prc_build_all;

   PROCEDURE prc_build_hist (
      p_vc_source_code    VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name    VARCHAR2 DEFAULT 'ALL'
    , p_b_drop_flag       BOOLEAN DEFAULT FALSE
    , p_b_raise_flag      BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name           t_object_name := 'prc_build_hist';
      l_vc_stage_db_list      t_string;
      l_vc_stage_owner_list   t_string;
      l_vc_distr_code_list    t_string;
      --
      l_vc_col_def            t_string;
      l_vc_col_all            t_string;
      l_vc_col_pk             t_string;
      l_vc_col_comm           t_string;
      --
      l_vc_col_hst            t_string;
      l_vc_col_upd            t_string;
   BEGIN
      --p#frm#trac.set_console_logging (FALSE);
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Start'
       , 'Build db objects needed for the hist part of a stage data flow'
      );
      p#frm#stag_meta.prc_set_object_properties;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , 'Object properties'
       , 'Set names of db objects to be built'
      );
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Start building db objects'
      );

      -- Select all objects
      FOR r_obj IN (  SELECT s.stag_source_id
                           , s.stag_source_code
                           , s.stag_source_prefix
                           , d.stag_source_db_link
                           , d.stag_source_owner
                           , s.stag_owner
                           , s.stag_ts_stage_data
                           , s.stag_ts_stage_indx
                           , s.stag_ts_hist_data
                           , s.stag_ts_hist_indx
                           , s.stag_fb_archive
                           , o.stag_object_id
                           , o.stag_parallel_degree
                           , o.stag_source_nk_flag
                           , o.stag_object_name
                           , o.stag_object_comment
                           , o.stag_object_root
                           , o.stag_src_table_name
                           , o.stag_dupl_table_name
                           , o.stag_diff_table_name
                           , o.stag_diff_nk_name
                           , o.stag_stage_table_name
                           , o.stag_hist_table_name
                           , o.stag_hist_nk_name
                           , o.stag_hist_view_name
                           , o.stag_hist_fbda_name
                           , o.stag_package_name
                           , o.stag_filter_clause
                           , o.stag_partition_clause
                           , o.stag_fbda_flag
                        FROM p#frm#stag_source_t s
                           , (SELECT stag_source_id
                                   , stag_source_db_link
                                   , stag_source_owner
                                FROM (SELECT stag_source_id
                                           , stag_source_db_link
                                           , stag_source_owner
                                           , ROW_NUMBER () OVER (PARTITION BY stag_source_id ORDER BY stag_source_db_id) AS source_db_order
                                        FROM p#frm#stag_source_db_t)
                               WHERE source_db_order = 1) d
                           , p#frm#stag_object_t o
                       WHERE s.stag_source_id = d.stag_source_id(+)
                         AND s.stag_source_id = o.stag_source_id
                         AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                         AND p_vc_object_name IN (o.stag_object_name, 'ALL')
                    ORDER BY stag_object_id) LOOP
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Start building objects'
         );
         -- Reset list strings
         l_vc_col_def := '';
         l_vc_col_all := '';
         l_vc_col_pk := '';

         -- Build list of columns
         FOR r_col IN (  SELECT NVL (stag_column_name_map, stag_column_name) AS stag_column_name
                              , stag_column_def
                              , stag_column_nk_pos
                              , stag_column_hist_flag
                           FROM p#frm#stag_column_t
                          WHERE stag_object_id = r_obj.stag_object_id
                            AND stag_column_edwh_flag = 1
                       ORDER BY stag_column_pos) LOOP
            l_vc_col_def :=
                  l_vc_col_def
               || CHR (10)
               || r_col.stag_column_name
               || ' '
               || r_col.stag_column_def
               || ',';
            l_vc_col_all :=
                  l_vc_col_all
               || CHR (10)
               || r_col.stag_column_name
               || ',';

            IF r_col.stag_column_nk_pos >= 0 THEN
               l_vc_col_pk :=
                     l_vc_col_pk
                  || CHR (10)
                  || r_col.stag_column_name
                  || ',';
            END IF;

            IF r_col.stag_column_hist_flag = 1 THEN
               l_vc_col_hst :=
                     l_vc_col_hst
                  || r_col.stag_column_name
                  || ',';
            ELSE
               l_vc_col_upd :=
                     l_vc_col_upd
                  || r_col.stag_column_name
                  || ',';
            END IF;
         END LOOP;

         l_vc_col_def :=
            RTRIM (
               l_vc_col_def
             , ','
            );
         l_vc_col_all :=
            RTRIM (
               l_vc_col_all
             , ','
            );
         l_vc_col_pk :=
            RTRIM (
               l_vc_col_pk
             , ','
            );
         l_vc_col_hst :=
            RTRIM (
               l_vc_col_hst
             , ','
            );
         l_vc_col_upd :=
            RTRIM (
               l_vc_col_upd
             , ','
            );
         -- Set main properties for the given object
         p#frm#stag_ddl.g_n_object_id := r_obj.stag_object_id;
         p#frm#stag_ddl.g_n_parallel_degree := r_obj.stag_parallel_degree;
         p#frm#stag_ddl.g_n_source_nk_flag := r_obj.stag_source_nk_flag;
         p#frm#stag_ddl.g_vc_object_name := r_obj.stag_object_name;
         p#frm#stag_ddl.g_vc_table_comment := r_obj.stag_object_comment;
         p#frm#stag_ddl.g_vc_source_code := r_obj.stag_source_code;
         p#frm#stag_ddl.g_vc_prefix_src := r_obj.stag_source_prefix;
         p#frm#stag_ddl.g_vc_owner_stg := USER;
         p#frm#stag_ddl.g_vc_filter_clause := r_obj.stag_filter_clause;
         p#frm#stag_ddl.g_vc_partition_expr := r_obj.stag_partition_clause;
         p#frm#stag_ddl.g_vc_table_name_diff := r_obj.stag_diff_table_name;
         p#frm#stag_ddl.g_vc_table_name_stage := r_obj.stag_stage_table_name;
         p#frm#stag_ddl.g_vc_table_name_hist := r_obj.stag_hist_table_name;
         p#frm#stag_ddl.g_vc_nk_name_diff := r_obj.stag_diff_nk_name;
         p#frm#stag_ddl.g_vc_nk_name_hist := r_obj.stag_hist_nk_name;
         p#frm#stag_ddl.g_vc_view_name_hist := r_obj.stag_hist_view_name;
         p#frm#stag_ddl.g_vc_view_name_fbda := r_obj.stag_hist_fbda_name;
         p#frm#stag_ddl.g_vc_package_main := r_obj.stag_package_name;
         --
         p#frm#stag_ddl.g_vc_col_def := l_vc_col_def;
         p#frm#stag_ddl.g_vc_col_all := l_vc_col_all;
         p#frm#stag_ddl.g_vc_col_pk_src := l_vc_col_pk;
         --
         p#frm#stag_ddl.g_vc_tablespace_hist_data := r_obj.stag_ts_hist_data;
         p#frm#stag_ddl.g_vc_tablespace_hist_indx := r_obj.stag_ts_hist_indx;
         p#frm#stag_ddl.g_vc_fb_archive := r_obj.stag_fb_archive;
         p#frm#stag_ddl.g_n_fbda_flag := r_obj.stag_fbda_flag;
         --
         p#frm#stag_ddl.g_vc_col_pk :=
               CASE
                  WHEN l_vc_col_pk IS NOT NULL
                   AND p#frm#stag_ddl.g_l_distr_code.COUNT > 1 THEN
                        ' '
                     || p#frm#stag_param.c_vc_column_source_db
                     || ',  '
               END
            || l_vc_col_pk;
         -- Create target objects
         p#frm#stag_ddl.prc_create_hist_table (
            p_b_drop_flag
          , p_b_raise_flag
         );

         -- Create view or synonym (depending on the environment)
         /*IF param.c_vc_db_name_actual IN (param.c_vc_db_name_dev, param.c_vc_db_name_tst)
         THEN
            p#frm#stag_ddl.prc_create_stage2_view (p_b_raise_flag);
         ELSE
            p#frm#stag_ddl.prc_create_stage2_synonym (p_b_raise_flag);
         END IF;*/
         IF l_vc_col_pk IS NOT NULL
        AND r_obj.stag_source_nk_flag = 0 THEN
            p#frm#stag_ddl.prc_create_duplicate_table (
               TRUE
             , p_b_raise_flag
            );
         END IF;

         p#frm#stag_ddl.prc_create_diff_table (
            TRUE
          , p_b_raise_flag
         );
         p#frm#stag_ddl.prc_create_package_main (
            TRUE
          , TRUE
         );
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Finish building db objects'
         );
      END LOOP;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Finished building db objects'
      );
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Finish'
       , 'Build complete'
      );
   END prc_build_hist;

   PROCEDURE prc_upgrade_hist (
      p_vc_source_code    VARCHAR2
    , p_vc_object_name    VARCHAR2
   )
   IS
      l_vc_prc_name          t_object_name := 'prc_upgrade_hist';
      l_vc_stage_db_list     t_string;
      l_vc_distr_code_list   t_string;
      l_vc_col_def           t_string;
      l_vc_col_pk            t_string;
      l_vc_table_name_bkp    t_object_name;
      --
      l_vc_sql_statement     t_string;
      --
      l_n_cnt                NUMBER;
   BEGIN
      --p#frm#trac.set_console_logging (FALSE);
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Start'
       , 'Upgrade hist table with newly added columns'
      );
      p#frm#stag_meta.prc_set_object_properties;
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , 'Object properties'
       , 'Set names of db objects to be built'
      );
      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Start building db objects'
      );
      p#frm#stag_ddl.g_vc_owner_stg := USER;

      --
      -- Select all objects
      FOR r_obj IN (  SELECT s.stag_source_id
                           , s.stag_source_code
                           --, s.stag_owner
                           , d.stag_source_db_link
                           , s.stag_ts_hist_data
                           , s.stag_ts_hist_indx
                           , o.stag_object_id
                           , stag_object_name
                           , o.stag_parallel_degree
                           , o.stag_hist_table_name
                           , o.stag_hist_view_name
                           , o.stag_hist_nk_name
                           , o.stag_partition_clause
                        FROM p#frm#stag_source_t s
                           , (SELECT stag_source_id
                                   , stag_source_db_link
                                   , stag_source_owner
                                FROM (SELECT stag_source_id
                                           , stag_source_db_link
                                           , stag_source_owner
                                           , ROW_NUMBER () OVER (PARTITION BY stag_source_id ORDER BY stag_source_db_id) AS source_db_order
                                        FROM p#frm#stag_source_db_t)
                               WHERE source_db_order = 1) d
                           , p#frm#stag_object_t o
                       WHERE s.stag_source_id = d.stag_source_id
                         AND s.stag_source_id = o.stag_source_id
                         AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                         AND p_vc_object_name IN (o.stag_object_name, 'ALL')
                    ORDER BY stag_object_id) LOOP
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          ,    'Table:'
            || p#frm#stag_ddl.g_vc_owner_stg
            || '.'
            || r_obj.stag_hist_table_name
          , 'Start building objects'
         );
         -- Set name of the backup table
         l_vc_table_name_bkp :=
            SUBSTR (
                  r_obj.stag_hist_table_name
               || '_BKP'
             , 1
             , 30
            );

         SELECT COUNT (0)
           INTO l_n_cnt
           FROM all_tables
          WHERE owner = p#frm#stag_ddl.g_vc_owner_stg
            AND table_name = l_vc_table_name_bkp;

         IF l_n_cnt > 0 THEN
            raise_application_error (
               -20000
             , 'Backup table already present'
            );
         END IF;

         -- Reset list strings
         l_vc_stage_db_list := '';
         l_vc_distr_code_list := '';
         l_vc_col_def := '';
         l_vc_col_pk := '';

         -- Build list of values for objects with multiple sources
         FOR r_db IN (SELECT stag_source_db_link
                           , stag_source_owner
                           , stag_distribution_code
                        FROM p#frm#stag_source_db_t
                       WHERE stag_source_id = r_obj.stag_source_id) LOOP
            l_vc_stage_db_list :=
                  l_vc_stage_db_list
               || r_db.stag_source_db_link
               || ',';
            l_vc_distr_code_list :=
                  l_vc_distr_code_list
               || r_db.stag_distribution_code
               || ',';
         END LOOP;

         l_vc_stage_db_list :=
            RTRIM (
               l_vc_stage_db_list
             , ','
            );
         l_vc_distr_code_list :=
            RTRIM (
               l_vc_distr_code_list
             , ','
            );

         -- Build list of columns
         FOR r_col IN (  SELECT NVL (stag_column_name_map, stag_column_name) AS stag_column_name
                              , stag_column_def
                              , stag_column_nk_pos
                           FROM p#frm#stag_column_t
                          WHERE stag_object_id = r_obj.stag_object_id
                            AND stag_column_edwh_flag = 1
                       ORDER BY stag_column_pos) LOOP
            l_vc_col_def :=
                  l_vc_col_def
               || CHR (10)
               || r_col.stag_column_name
               || ' '
               || r_col.stag_column_def
               || ',';

            IF r_col.stag_column_nk_pos IS NOT NULL THEN
               l_vc_col_pk :=
                     l_vc_col_pk
                  || CHR (10)
                  || r_col.stag_column_name
                  || ',';
            END IF;
         END LOOP;

         l_vc_col_def :=
            RTRIM (
               l_vc_col_def
             , ','
            );
         l_vc_col_pk :=
            RTRIM (
               l_vc_col_pk
             , ','
            );
         -- Set main properties for the given object
         p#frm#stag_ddl.g_n_parallel_degree := r_obj.stag_parallel_degree;
         p#frm#stag_ddl.g_vc_partition_expr := r_obj.stag_partition_clause;
         p#frm#stag_ddl.g_vc_table_name_hist := r_obj.stag_hist_table_name;
         p#frm#stag_ddl.g_vc_view_name_hist := r_obj.stag_hist_view_name;
         p#frm#stag_ddl.g_vc_nk_name_hist := r_obj.stag_hist_nk_name;
         --
         p#frm#stag_ddl.g_vc_col_def := l_vc_col_def;
         --
         p#frm#stag_ddl.g_vc_tablespace_hist_data := r_obj.stag_ts_hist_data;
         p#frm#stag_ddl.g_vc_tablespace_hist_indx := r_obj.stag_ts_hist_indx;
         --
         p#frm#stag_ddl.g_l_dblink :=
            p#frm#type.fct_string_to_list (
               l_vc_stage_db_list
             , ','
            );
         p#frm#stag_ddl.g_l_distr_code :=
            p#frm#type.fct_string_to_list (
               l_vc_distr_code_list
             , ','
            );
         p#frm#stag_ddl.g_vc_col_pk :=
               CASE
                  WHEN p#frm#stag_ddl.g_l_dblink.COUNT > 1 THEN
                        ' '
                     || p#frm#stag_param.c_vc_column_source_db
                     || ',  '
               END
            || l_vc_col_pk;

         -- Drop PK and indexes
         FOR r_cst IN (SELECT constraint_name
                         FROM all_constraints
                        WHERE owner = p#frm#stag_ddl.g_vc_owner_stg
                          AND table_name = r_obj.stag_hist_table_name) LOOP
            --
            l_vc_sql_statement :=
                  'ALTER TABLE '
               || p#frm#stag_ddl.g_vc_owner_stg
               || '.'
               || r_obj.stag_hist_table_name
               || ' DROP CONSTRAINT '
               || r_cst.constraint_name;
            --
            p#frm#trac.log_sub_debug (
               l_vc_prc_name
             , 'Drop constraint'
             , l_vc_sql_statement
            );

            --
            EXECUTE IMMEDIATE l_vc_sql_statement;
         --
         END LOOP;

         FOR r_idx IN (SELECT index_name
                         FROM all_indexes
                        WHERE owner = p#frm#stag_ddl.g_vc_owner_stg
                          AND table_name = r_obj.stag_hist_table_name) LOOP
            --
            l_vc_sql_statement :=
                  'DROP INDEX '
               || p#frm#stag_ddl.g_vc_owner_stg
               || '.'
               || r_idx.index_name;
            --
            p#frm#trac.log_sub_debug (
               l_vc_prc_name
             , 'Drop index'
             , l_vc_sql_statement
            );

            --
            EXECUTE IMMEDIATE l_vc_sql_statement;
         --
         END LOOP;

         EXECUTE IMMEDIATE
               'RENAME '
            || r_obj.stag_hist_table_name
            || ' TO '
            || l_vc_table_name_bkp;

         -- Create target object
         p#frm#stag_ddl.prc_create_hist_table (
            FALSE
          , TRUE
         );
         -- Migrate data
         p#frm#ddls.prc_migrate_table (
            r_obj.stag_hist_table_name
          , l_vc_table_name_bkp
         );
         -- Create view or synonym (depending on the environment)
         /*IF param.c_vc_db_name_actual IN (param.c_vc_db_name_dev, param.c_vc_db_name_tst)
         THEN
            p#frm#stag_ddl.prc_create_stage2_view (TRUE);
         ELSE
            p#frm#stag_ddl.prc_create_stage2_synonym (TRUE);
         END IF;*/
         p#frm#trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Finish building db objects'
         );
      END LOOP;

      p#frm#trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Finished building db objects'
      );
      p#frm#trac.log_sub_info (
         l_vc_prc_name
       , 'Finish'
       , 'Build complete'
      );
   END;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END p#frm#stag_build;
2014-11-20 16:37:54.491 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE BODY dwhutl_stag_build
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   /**
   * String type
   */
   SUBTYPE t_string IS VARCHAR2 (32767);

   PROCEDURE prc_build_all (
      p_vc_source_code       VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name       VARCHAR2 DEFAULT 'ALL'
    , p_b_index_flag         BOOLEAN DEFAULT FALSE
    , p_b_drop_stage_flag    BOOLEAN DEFAULT TRUE
    , p_b_drop_hist_flag     BOOLEAN DEFAULT FALSE
    , p_b_raise_flag         BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name           t_object_name := 'prc_build_all';
      l_vc_stage_db_list      t_string;
      l_vc_stage_owner_list   t_string;
      l_vc_distr_code_list    t_string;
      l_vc_col_def            t_string;
      l_vc_col_all            t_string;
      l_vc_col_pk             t_string;
      l_vc_col_comm           t_string;
      --
      l_vc_col_hst            t_string;
      l_vc_col_upd            t_string;
   BEGIN
      --dwhutl_trac.set_console_logging (FALSE);
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Start'
       , 'Build all db objects needed for a stage data flow'
      );
      dwhutl_stag_meta.prc_set_object_properties;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , 'Object properties'
       , 'Set names of db objects to be built'
      );
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Start building db objects'
      );

      -- Select all objects
      FOR r_obj IN (  SELECT s.stag_source_id
                           , s.stag_source_code
                           , s.stag_source_prefix
                           , d.stag_source_db_link
                           , d.stag_source_owner
                           , s.stag_owner
                           , s.stag_ts_stage_data
                           , s.stag_ts_stage_indx
                           , s.stag_ts_hist_data
                           , s.stag_ts_hist_indx
                           , s.stag_fb_archive
                           , o.stag_object_id
                           , o.stag_parallel_degree
                           , o.stag_source_nk_flag
                           , o.stag_object_name
                           , o.stag_object_comment
                           , o.stag_object_root
                           , o.stag_src_table_name
                           , o.stag_dupl_table_name
                           , o.stag_diff_table_name
                           , o.stag_diff_nk_name
                           , o.stag_stage_table_name
                           , o.stag_hist_table_name
                           , o.stag_hist_nk_name
                           , o.stag_hist_view_name
                           , o.stag_hist_fbda_name
                           , o.stag_package_name
                           , o.stag_filter_clause
                           , o.stag_partition_clause
                           , o.stag_hist_flag
                           , o.stag_fbda_flag
                           , o.stag_increment_buffer
                           , c.stag_increment_column
                           , c.stag_increment_coldef
                        FROM dwhutl_stag_source_t s
                           , (SELECT stag_source_id
                                   , stag_source_db_link
                                   , stag_source_owner
                                FROM (SELECT stag_source_id
                                           , stag_source_db_link
                                           , stag_source_owner
                                           , ROW_NUMBER () OVER (PARTITION BY stag_source_id ORDER BY stag_source_db_id) AS source_db_order
                                        FROM dwhutl_stag_source_db_t)
                               WHERE source_db_order = 1) d
                           , dwhutl_stag_object_t o
                           , (SELECT stag_object_id
                                   , stag_column_name AS stag_increment_column
                                   , stag_column_def AS stag_increment_coldef
                                FROM (SELECT stag_object_id
                                           , stag_column_name
                                           , stag_column_def
                                           , ROW_NUMBER () OVER (PARTITION BY stag_object_id ORDER BY stag_column_pos) AS column_order
                                        FROM dwhutl_stag_column_t
                                       WHERE stag_column_incr_flag > 0
                                         AND (stag_column_def LIKE 'DATE%'
                                           OR stag_column_def LIKE 'NUMBER%'))
                               WHERE column_order = 1) c
                       WHERE s.stag_source_id = d.stag_source_id
                         AND s.stag_source_id = o.stag_source_id
                         AND o.stag_object_id = c.stag_object_id(+)
                         AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                         AND p_vc_object_name IN (o.stag_object_name, 'ALL')
                    ORDER BY stag_object_id) LOOP
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Start building objects'
         );
         -- Reset list strings
         l_vc_stage_db_list := '';
         l_vc_stage_owner_list := '';
         l_vc_distr_code_list := '';
         l_vc_col_def := '';
         l_vc_col_all := '';
         l_vc_col_pk := '';
         l_vc_col_hst := '';
         l_vc_col_upd := '';

         -- Build list of values for objects with multiple sources
         FOR r_db IN (SELECT stag_source_db_link
                           , stag_source_owner
                           , stag_distribution_code
                        FROM dwhutl_stag_source_db_t
                       WHERE stag_source_id = r_obj.stag_source_id) LOOP
            l_vc_stage_db_list :=
                  l_vc_stage_db_list
               || r_db.stag_source_db_link
               || ',';
            l_vc_stage_owner_list :=
                  l_vc_stage_owner_list
               || r_db.stag_source_owner
               || ',';
            l_vc_distr_code_list :=
                  l_vc_distr_code_list
               || r_db.stag_distribution_code
               || ',';
         END LOOP;

         l_vc_stage_db_list :=
            RTRIM (
               l_vc_stage_db_list
             , ','
            );
         l_vc_stage_owner_list :=
            RTRIM (
               l_vc_stage_owner_list
             , ','
            );
         l_vc_distr_code_list :=
            RTRIM (
               l_vc_distr_code_list
             , ','
            );

         -- Build list of columns
         FOR r_col IN (  SELECT NVL (stag_column_name_map, stag_column_name) AS stag_column_name
                              , stag_column_def
                              , stag_column_nk_pos
                              , stag_column_hist_flag
                           FROM dwhutl_stag_column_t
                          WHERE stag_object_id = r_obj.stag_object_id
                            AND stag_column_edwh_flag = 1
                       ORDER BY stag_column_pos) LOOP
            l_vc_col_def :=
                  l_vc_col_def
               || CHR (10)
               || r_col.stag_column_name
               || ' '
               || r_col.stag_column_def
               || ',';
            l_vc_col_all :=
                  l_vc_col_all
               || CHR (10)
               || r_col.stag_column_name
               || ',';

            IF r_col.stag_column_nk_pos >= 0 THEN
               l_vc_col_pk :=
                     l_vc_col_pk
                  || CHR (10)
                  || r_col.stag_column_name
                  || ',';
            END IF;

            IF r_col.stag_column_hist_flag = 1
           AND r_obj.stag_hist_flag = 1 THEN
               l_vc_col_hst :=
                     l_vc_col_hst
                  || r_col.stag_column_name
                  || ',';
            ELSE
               l_vc_col_upd :=
                     l_vc_col_upd
                  || r_col.stag_column_name
                  || ',';
            END IF;
         END LOOP;

         l_vc_col_def :=
            RTRIM (
               l_vc_col_def
             , ','
            );
         l_vc_col_all :=
            RTRIM (
               l_vc_col_all
             , ','
            );
         l_vc_col_pk :=
            RTRIM (
               l_vc_col_pk
             , ','
            );
         l_vc_col_hst :=
            RTRIM (
               l_vc_col_hst
             , ','
            );
         l_vc_col_upd :=
            RTRIM (
               l_vc_col_upd
             , ','
            );
         --
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , 'List of column definitions'
          , l_vc_col_def
         );
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , 'List of columns'
          , l_vc_col_all
         );
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , 'List of pk columns'
          , l_vc_col_pk
         );
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , 'List of columns to historicize'
          , l_vc_col_hst
         );
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          , 'List of columns to update'
          , l_vc_col_upd
         );
         -- Set main properties for the given object
         dwhutl_stag_ddl.g_n_object_id := r_obj.stag_object_id;
         dwhutl_stag_ddl.g_n_parallel_degree := r_obj.stag_parallel_degree;
         dwhutl_stag_ddl.g_n_source_nk_flag := r_obj.stag_source_nk_flag;
         dwhutl_stag_ddl.g_n_fbda_flag := r_obj.stag_fbda_flag;
         dwhutl_stag_ddl.g_vc_object_name := r_obj.stag_object_name;
         dwhutl_stag_ddl.g_vc_table_comment := r_obj.stag_object_comment;
         dwhutl_stag_ddl.g_vc_source_code := r_obj.stag_source_code;
         dwhutl_stag_ddl.g_vc_prefix_src := r_obj.stag_source_prefix;
         dwhutl_stag_ddl.g_vc_dblink := r_obj.stag_source_db_link;
         dwhutl_stag_ddl.g_vc_owner_src := r_obj.stag_source_owner;
         dwhutl_stag_ddl.g_vc_owner_stg := USER;
         dwhutl_stag_ddl.g_vc_table_name_source :=
            CASE
               WHEN r_obj.stag_source_db_link IS NULL
                AND r_obj.stag_source_owner = r_obj.stag_owner THEN
                  r_obj.stag_src_table_name
               ELSE
                  r_obj.stag_object_name
            END;
         dwhutl_stag_ddl.g_vc_source_identifier :=
            CASE
               WHEN r_obj.stag_source_db_link IS NULL
                AND r_obj.stag_source_owner = r_obj.stag_owner THEN
                  r_obj.stag_src_table_name
               ELSE
                     CASE
                        WHEN r_obj.stag_source_owner IS NOT NULL THEN
                              r_obj.stag_source_owner
                           || '.'
                     END
                  || r_obj.stag_object_name
                  || CASE
                        WHEN r_obj.stag_source_db_link IS NOT NULL THEN
                              '@'
                           || r_obj.stag_source_db_link
                     END
            END;
         --
         dwhutl_stag_ddl.g_vc_dedupl_rank_clause :=
            CASE
               WHEN r_obj.stag_source_db_link IS NULL
                AND r_obj.stag_source_owner = r_obj.stag_owner THEN
                  'ORDER BY 1'
               ELSE
                  'ORDER BY rowid DESC'
            END;
         dwhutl_stag_ddl.g_vc_filter_clause := r_obj.stag_filter_clause;
         dwhutl_stag_ddl.g_vc_partition_expr := r_obj.stag_partition_clause;
         dwhutl_stag_ddl.g_vc_increment_column := r_obj.stag_increment_column;
         dwhutl_stag_ddl.g_vc_increment_coldef := r_obj.stag_increment_coldef;
         dwhutl_stag_ddl.g_n_increment_buffer := r_obj.stag_increment_buffer;
         dwhutl_stag_ddl.g_vc_table_name_dupl := r_obj.stag_dupl_table_name;
         dwhutl_stag_ddl.g_vc_table_name_diff := r_obj.stag_diff_table_name;
         dwhutl_stag_ddl.g_vc_table_name_stage := r_obj.stag_stage_table_name;
         dwhutl_stag_ddl.g_vc_table_name_hist := r_obj.stag_hist_table_name;
         dwhutl_stag_ddl.g_vc_nk_name_diff := r_obj.stag_diff_nk_name;
         dwhutl_stag_ddl.g_vc_nk_name_hist := r_obj.stag_hist_nk_name;
         dwhutl_stag_ddl.g_vc_view_name_hist := r_obj.stag_hist_view_name;
         dwhutl_stag_ddl.g_vc_view_name_fbda := r_obj.stag_hist_fbda_name;
         dwhutl_stag_ddl.g_vc_package_main := r_obj.stag_package_name;
         --
         dwhutl_stag_ddl.g_vc_col_def := l_vc_col_def;
         dwhutl_stag_ddl.g_vc_col_all := l_vc_col_all;
         dwhutl_stag_ddl.g_vc_col_pk_src := l_vc_col_pk;
         --
         dwhutl_stag_ddl.g_vc_col_hist := l_vc_col_hst;
         dwhutl_stag_ddl.g_vc_col_update := l_vc_col_upd;
         --
         dwhutl_stag_ddl.g_vc_tablespace_stage_data := r_obj.stag_ts_stage_data;
         dwhutl_stag_ddl.g_vc_tablespace_stage_indx := r_obj.stag_ts_stage_indx;
         dwhutl_stag_ddl.g_vc_tablespace_hist_data := r_obj.stag_ts_hist_data;
         dwhutl_stag_ddl.g_vc_tablespace_hist_indx := r_obj.stag_ts_hist_indx;
         dwhutl_stag_ddl.g_vc_fb_archive := r_obj.stag_fb_archive;
         --
         dwhutl_stag_ddl.g_l_dblink :=
            dwhutl_type.fct_string_to_list (
               l_vc_stage_db_list
             , ','
            );
         dwhutl_stag_ddl.g_l_owner_src :=
            dwhutl_type.fct_string_to_list (
               l_vc_stage_owner_list
             , ','
            );
         dwhutl_stag_ddl.g_l_distr_code :=
            dwhutl_type.fct_string_to_list (
               l_vc_distr_code_list
             , ','
            );
         dwhutl_stag_ddl.g_vc_col_pk :=
               CASE
                  WHEN l_vc_col_pk IS NOT NULL
                   AND dwhutl_stag_ddl.g_l_dblink.COUNT > 1 THEN
                        ' '
                     || dwhutl_stag_param.c_vc_column_source_db
                     || ',  '
               END
            || l_vc_col_pk;
         -- Create target objects
         dwhutl_stag_ddl.prc_create_stage_table (
            p_b_drop_stage_flag
          , p_b_raise_flag
         );
         dwhutl_stag_ddl.prc_create_hist_table (
            p_b_drop_hist_flag
          , p_b_raise_flag
         );

         -- Create view or synonym (depending on the environment)
         /*IF param.c_vc_db_name_actual IN (param.c_vc_db_name_dev, param.c_vc_db_name_tst)
         THEN
            dwhutl_stag_ddl.prc_create_stage2_view (p_b_raise_flag);
         ELSE
            dwhutl_stag_ddl.prc_create_stage2_synonym (p_b_raise_flag);
         END IF;*/
         IF dwhutl_stag_ddl.g_vc_fb_archive IS NOT NULL
        AND dwhutl_stag_ddl.g_n_fbda_flag = 1 THEN
            dwhutl_stag_ddl.prc_create_fbda_view (p_b_raise_flag);
         END IF;

         IF l_vc_col_pk IS NOT NULL
        AND r_obj.stag_source_nk_flag = 0 THEN
            dwhutl_stag_ddl.prc_create_duplicate_table (
               TRUE
             , p_b_raise_flag
            );
         END IF;

         dwhutl_stag_ddl.prc_create_diff_table (
            TRUE
          , p_b_raise_flag
         );
         dwhutl_stag_ddl.prc_create_package_main (
            FALSE
          , TRUE
         );
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Finish building db objects'
         );
      END LOOP;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Finished building db objects'
      );
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Finish'
       , 'Build complete'
      );
   END prc_build_all;

   PROCEDURE prc_build_hist (
      p_vc_source_code    VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name    VARCHAR2 DEFAULT 'ALL'
    , p_b_drop_flag       BOOLEAN DEFAULT FALSE
    , p_b_raise_flag      BOOLEAN DEFAULT FALSE
   )
   IS
      l_vc_prc_name           t_object_name := 'prc_build_hist';
      l_vc_stage_db_list      t_string;
      l_vc_stage_owner_list   t_string;
      l_vc_distr_code_list    t_string;
      --
      l_vc_col_def            t_string;
      l_vc_col_all            t_string;
      l_vc_col_pk             t_string;
      l_vc_col_comm           t_string;
      --
      l_vc_col_hst            t_string;
      l_vc_col_upd            t_string;
   BEGIN
      --dwhutl_trac.set_console_logging (FALSE);
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Start'
       , 'Build db objects needed for the hist part of a stage data flow'
      );
      dwhutl_stag_meta.prc_set_object_properties;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , 'Object properties'
       , 'Set names of db objects to be built'
      );
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Start building db objects'
      );

      -- Select all objects
      FOR r_obj IN (  SELECT s.stag_source_id
                           , s.stag_source_code
                           , s.stag_source_prefix
                           , d.stag_source_db_link
                           , d.stag_source_owner
                           , s.stag_owner
                           , s.stag_ts_stage_data
                           , s.stag_ts_stage_indx
                           , s.stag_ts_hist_data
                           , s.stag_ts_hist_indx
                           , s.stag_fb_archive
                           , o.stag_object_id
                           , o.stag_parallel_degree
                           , o.stag_source_nk_flag
                           , o.stag_object_name
                           , o.stag_object_comment
                           , o.stag_object_root
                           , o.stag_src_table_name
                           , o.stag_dupl_table_name
                           , o.stag_diff_table_name
                           , o.stag_diff_nk_name
                           , o.stag_stage_table_name
                           , o.stag_hist_table_name
                           , o.stag_hist_nk_name
                           , o.stag_hist_view_name
                           , o.stag_hist_fbda_name
                           , o.stag_package_name
                           , o.stag_filter_clause
                           , o.stag_partition_clause
                           , o.stag_fbda_flag
                        FROM dwhutl_stag_source_t s
                           , (SELECT stag_source_id
                                   , stag_source_db_link
                                   , stag_source_owner
                                FROM (SELECT stag_source_id
                                           , stag_source_db_link
                                           , stag_source_owner
                                           , ROW_NUMBER () OVER (PARTITION BY stag_source_id ORDER BY stag_source_db_id) AS source_db_order
                                        FROM dwhutl_stag_source_db_t)
                               WHERE source_db_order = 1) d
                           , dwhutl_stag_object_t o
                       WHERE s.stag_source_id = d.stag_source_id(+)
                         AND s.stag_source_id = o.stag_source_id
                         AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                         AND p_vc_object_name IN (o.stag_object_name, 'ALL')
                    ORDER BY stag_object_id) LOOP
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Start building objects'
         );
         -- Reset list strings
         l_vc_col_def := '';
         l_vc_col_all := '';
         l_vc_col_pk := '';

         -- Build list of columns
         FOR r_col IN (  SELECT NVL (stag_column_name_map, stag_column_name) AS stag_column_name
                              , stag_column_def
                              , stag_column_nk_pos
                              , stag_column_hist_flag
                           FROM dwhutl_stag_column_t
                          WHERE stag_object_id = r_obj.stag_object_id
                            AND stag_column_edwh_flag = 1
                       ORDER BY stag_column_pos) LOOP
            l_vc_col_def :=
                  l_vc_col_def
               || CHR (10)
               || r_col.stag_column_name
               || ' '
               || r_col.stag_column_def
               || ',';
            l_vc_col_all :=
                  l_vc_col_all
               || CHR (10)
               || r_col.stag_column_name
               || ',';

            IF r_col.stag_column_nk_pos >= 0 THEN
               l_vc_col_pk :=
                     l_vc_col_pk
                  || CHR (10)
                  || r_col.stag_column_name
                  || ',';
            END IF;

            IF r_col.stag_column_hist_flag = 1 THEN
               l_vc_col_hst :=
                     l_vc_col_hst
                  || r_col.stag_column_name
                  || ',';
            ELSE
               l_vc_col_upd :=
                     l_vc_col_upd
                  || r_col.stag_column_name
                  || ',';
            END IF;
         END LOOP;

         l_vc_col_def :=
            RTRIM (
               l_vc_col_def
             , ','
            );
         l_vc_col_all :=
            RTRIM (
               l_vc_col_all
             , ','
            );
         l_vc_col_pk :=
            RTRIM (
               l_vc_col_pk
             , ','
            );
         l_vc_col_hst :=
            RTRIM (
               l_vc_col_hst
             , ','
            );
         l_vc_col_upd :=
            RTRIM (
               l_vc_col_upd
             , ','
            );
         -- Set main properties for the given object
         dwhutl_stag_ddl.g_n_object_id := r_obj.stag_object_id;
         dwhutl_stag_ddl.g_n_parallel_degree := r_obj.stag_parallel_degree;
         dwhutl_stag_ddl.g_n_source_nk_flag := r_obj.stag_source_nk_flag;
         dwhutl_stag_ddl.g_vc_object_name := r_obj.stag_object_name;
         dwhutl_stag_ddl.g_vc_table_comment := r_obj.stag_object_comment;
         dwhutl_stag_ddl.g_vc_source_code := r_obj.stag_source_code;
         dwhutl_stag_ddl.g_vc_prefix_src := r_obj.stag_source_prefix;
         dwhutl_stag_ddl.g_vc_owner_stg := USER;
         dwhutl_stag_ddl.g_vc_filter_clause := r_obj.stag_filter_clause;
         dwhutl_stag_ddl.g_vc_partition_expr := r_obj.stag_partition_clause;
         dwhutl_stag_ddl.g_vc_table_name_diff := r_obj.stag_diff_table_name;
         dwhutl_stag_ddl.g_vc_table_name_stage := r_obj.stag_stage_table_name;
         dwhutl_stag_ddl.g_vc_table_name_hist := r_obj.stag_hist_table_name;
         dwhutl_stag_ddl.g_vc_nk_name_diff := r_obj.stag_diff_nk_name;
         dwhutl_stag_ddl.g_vc_nk_name_hist := r_obj.stag_hist_nk_name;
         dwhutl_stag_ddl.g_vc_view_name_hist := r_obj.stag_hist_view_name;
         dwhutl_stag_ddl.g_vc_view_name_fbda := r_obj.stag_hist_fbda_name;
         dwhutl_stag_ddl.g_vc_package_main := r_obj.stag_package_name;
         --
         dwhutl_stag_ddl.g_vc_col_def := l_vc_col_def;
         dwhutl_stag_ddl.g_vc_col_all := l_vc_col_all;
         dwhutl_stag_ddl.g_vc_col_pk_src := l_vc_col_pk;
         --
         dwhutl_stag_ddl.g_vc_tablespace_hist_data := r_obj.stag_ts_hist_data;
         dwhutl_stag_ddl.g_vc_tablespace_hist_indx := r_obj.stag_ts_hist_indx;
         dwhutl_stag_ddl.g_vc_fb_archive := r_obj.stag_fb_archive;
         dwhutl_stag_ddl.g_n_fbda_flag := r_obj.stag_fbda_flag;
         --
         dwhutl_stag_ddl.g_vc_col_pk :=
               CASE
                  WHEN l_vc_col_pk IS NOT NULL
                   AND dwhutl_stag_ddl.g_l_distr_code.COUNT > 1 THEN
                        ' '
                     || dwhutl_stag_param.c_vc_column_source_db
                     || ',  '
               END
            || l_vc_col_pk;
         -- Create target objects
         dwhutl_stag_ddl.prc_create_hist_table (
            p_b_drop_flag
          , p_b_raise_flag
         );

         -- Create view or synonym (depending on the environment)
         /*IF param.c_vc_db_name_actual IN (param.c_vc_db_name_dev, param.c_vc_db_name_tst)
         THEN
            dwhutl_stag_ddl.prc_create_stage2_view (p_b_raise_flag);
         ELSE
            dwhutl_stag_ddl.prc_create_stage2_synonym (p_b_raise_flag);
         END IF;*/
         IF l_vc_col_pk IS NOT NULL
        AND r_obj.stag_source_nk_flag = 0 THEN
            dwhutl_stag_ddl.prc_create_duplicate_table (
               TRUE
             , p_b_raise_flag
            );
         END IF;

         dwhutl_stag_ddl.prc_create_diff_table (
            TRUE
          , p_b_raise_flag
         );
         dwhutl_stag_ddl.prc_create_package_main (
            TRUE
          , TRUE
         );
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Finish building db objects'
         );
      END LOOP;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Finished building db objects'
      );
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Finish'
       , 'Build complete'
      );
   END prc_build_hist;

   PROCEDURE prc_upgrade_hist (
      p_vc_source_code    VARCHAR2
    , p_vc_object_name    VARCHAR2
   )
   IS
      l_vc_prc_name          t_object_name := 'prc_upgrade_hist';
      l_vc_stage_db_list     t_string;
      l_vc_distr_code_list   t_string;
      l_vc_col_def           t_string;
      l_vc_col_pk            t_string;
      l_vc_table_name_bkp    t_object_name;
      --
      l_vc_sql_statement     t_string;
      --
      l_n_cnt                NUMBER;
   BEGIN
      --dwhutl_trac.set_console_logging (FALSE);
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Start'
       , 'Upgrade hist table with newly added columns'
      );
      dwhutl_stag_meta.prc_set_object_properties;
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , 'Object properties'
       , 'Set names of db objects to be built'
      );
      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Start building db objects'
      );
      dwhutl_stag_ddl.g_vc_owner_stg := USER;

      --
      -- Select all objects
      FOR r_obj IN (  SELECT s.stag_source_id
                           , s.stag_source_code
                           --, s.stag_owner
                           , d.stag_source_db_link
                           , s.stag_ts_hist_data
                           , s.stag_ts_hist_indx
                           , o.stag_object_id
                           , stag_object_name
                           , o.stag_parallel_degree
                           , o.stag_hist_table_name
                           , o.stag_hist_view_name
                           , o.stag_hist_nk_name
                           , o.stag_partition_clause
                        FROM dwhutl_stag_source_t s
                           , (SELECT stag_source_id
                                   , stag_source_db_link
                                   , stag_source_owner
                                FROM (SELECT stag_source_id
                                           , stag_source_db_link
                                           , stag_source_owner
                                           , ROW_NUMBER () OVER (PARTITION BY stag_source_id ORDER BY stag_source_db_id) AS source_db_order
                                        FROM dwhutl_stag_source_db_t)
                               WHERE source_db_order = 1) d
                           , dwhutl_stag_object_t o
                       WHERE s.stag_source_id = d.stag_source_id
                         AND s.stag_source_id = o.stag_source_id
                         AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                         AND p_vc_object_name IN (o.stag_object_name, 'ALL')
                    ORDER BY stag_object_id) LOOP
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          ,    'Table:'
            || dwhutl_stag_ddl.g_vc_owner_stg
            || '.'
            || r_obj.stag_hist_table_name
          , 'Start building objects'
         );
         -- Set name of the backup table
         l_vc_table_name_bkp :=
            SUBSTR (
                  r_obj.stag_hist_table_name
               || '_BKP'
             , 1
             , 30
            );

         SELECT COUNT (0)
           INTO l_n_cnt
           FROM all_tables
          WHERE owner = dwhutl_stag_ddl.g_vc_owner_stg
            AND table_name = l_vc_table_name_bkp;

         IF l_n_cnt > 0 THEN
            raise_application_error (
               -20000
             , 'Backup table already present'
            );
         END IF;

         -- Reset list strings
         l_vc_stage_db_list := '';
         l_vc_distr_code_list := '';
         l_vc_col_def := '';
         l_vc_col_pk := '';

         -- Build list of values for objects with multiple sources
         FOR r_db IN (SELECT stag_source_db_link
                           , stag_source_owner
                           , stag_distribution_code
                        FROM dwhutl_stag_source_db_t
                       WHERE stag_source_id = r_obj.stag_source_id) LOOP
            l_vc_stage_db_list :=
                  l_vc_stage_db_list
               || r_db.stag_source_db_link
               || ',';
            l_vc_distr_code_list :=
                  l_vc_distr_code_list
               || r_db.stag_distribution_code
               || ',';
         END LOOP;

         l_vc_stage_db_list :=
            RTRIM (
               l_vc_stage_db_list
             , ','
            );
         l_vc_distr_code_list :=
            RTRIM (
               l_vc_distr_code_list
             , ','
            );

         -- Build list of columns
         FOR r_col IN (  SELECT NVL (stag_column_name_map, stag_column_name) AS stag_column_name
                              , stag_column_def
                              , stag_column_nk_pos
                           FROM dwhutl_stag_column_t
                          WHERE stag_object_id = r_obj.stag_object_id
                            AND stag_column_edwh_flag = 1
                       ORDER BY stag_column_pos) LOOP
            l_vc_col_def :=
                  l_vc_col_def
               || CHR (10)
               || r_col.stag_column_name
               || ' '
               || r_col.stag_column_def
               || ',';

            IF r_col.stag_column_nk_pos IS NOT NULL THEN
               l_vc_col_pk :=
                     l_vc_col_pk
                  || CHR (10)
                  || r_col.stag_column_name
                  || ',';
            END IF;
         END LOOP;

         l_vc_col_def :=
            RTRIM (
               l_vc_col_def
             , ','
            );
         l_vc_col_pk :=
            RTRIM (
               l_vc_col_pk
             , ','
            );
         -- Set main properties for the given object
         dwhutl_stag_ddl.g_n_parallel_degree := r_obj.stag_parallel_degree;
         dwhutl_stag_ddl.g_vc_partition_expr := r_obj.stag_partition_clause;
         dwhutl_stag_ddl.g_vc_table_name_hist := r_obj.stag_hist_table_name;
         dwhutl_stag_ddl.g_vc_view_name_hist := r_obj.stag_hist_view_name;
         dwhutl_stag_ddl.g_vc_nk_name_hist := r_obj.stag_hist_nk_name;
         --
         dwhutl_stag_ddl.g_vc_col_def := l_vc_col_def;
         --
         dwhutl_stag_ddl.g_vc_tablespace_hist_data := r_obj.stag_ts_hist_data;
         dwhutl_stag_ddl.g_vc_tablespace_hist_indx := r_obj.stag_ts_hist_indx;
         --
         dwhutl_stag_ddl.g_l_dblink :=
            dwhutl_type.fct_string_to_list (
               l_vc_stage_db_list
             , ','
            );
         dwhutl_stag_ddl.g_l_distr_code :=
            dwhutl_type.fct_string_to_list (
               l_vc_distr_code_list
             , ','
            );
         dwhutl_stag_ddl.g_vc_col_pk :=
               CASE
                  WHEN dwhutl_stag_ddl.g_l_dblink.COUNT > 1 THEN
                        ' '
                     || dwhutl_stag_param.c_vc_column_source_db
                     || ',  '
               END
            || l_vc_col_pk;

         -- Drop PK and indexes
         FOR r_cst IN (SELECT constraint_name
                         FROM all_constraints
                        WHERE owner = dwhutl_stag_ddl.g_vc_owner_stg
                          AND table_name = r_obj.stag_hist_table_name) LOOP
            --
            l_vc_sql_statement :=
                  'ALTER TABLE '
               || dwhutl_stag_ddl.g_vc_owner_stg
               || '.'
               || r_obj.stag_hist_table_name
               || ' DROP CONSTRAINT '
               || r_cst.constraint_name;
            --
            dwhutl_trac.log_sub_debug (
               l_vc_prc_name
             , 'Drop constraint'
             , l_vc_sql_statement
            );

            --
            EXECUTE IMMEDIATE l_vc_sql_statement;
         --
         END LOOP;

         FOR r_idx IN (SELECT index_name
                         FROM all_indexes
                        WHERE owner = dwhutl_stag_ddl.g_vc_owner_stg
                          AND table_name = r_obj.stag_hist_table_name) LOOP
            --
            l_vc_sql_statement :=
                  'DROP INDEX '
               || dwhutl_stag_ddl.g_vc_owner_stg
               || '.'
               || r_idx.index_name;
            --
            dwhutl_trac.log_sub_debug (
               l_vc_prc_name
             , 'Drop index'
             , l_vc_sql_statement
            );

            --
            EXECUTE IMMEDIATE l_vc_sql_statement;
         --
         END LOOP;

         EXECUTE IMMEDIATE
               'RENAME '
            || r_obj.stag_hist_table_name
            || ' TO '
            || l_vc_table_name_bkp;

         -- Create target object
         dwhutl_stag_ddl.prc_create_hist_table (
            FALSE
          , TRUE
         );
         -- Migrate data
         dwhutl_ddls.prc_migrate_table (
            r_obj.stag_hist_table_name
          , l_vc_table_name_bkp
         );
         -- Create view or synonym (depending on the environment)
         /*IF param.c_vc_db_name_actual IN (param.c_vc_db_name_dev, param.c_vc_db_name_tst)
         THEN
            dwhutl_stag_ddl.prc_create_stage2_view (TRUE);
         ELSE
            dwhutl_stag_ddl.prc_create_stage2_synonym (TRUE);
         END IF;*/
         dwhutl_trac.log_sub_debug (
            l_vc_prc_name
          ,    'Object '
            || r_obj.stag_object_name
          , 'Finish building db objects'
         );
      END LOOP;

      dwhutl_trac.log_sub_debug (
         l_vc_prc_name
       , 'Build objects'
       , 'Finished building db objects'
      );
      dwhutl_trac.log_sub_info (
         l_vc_prc_name
       , 'Finish'
       , 'Build complete'
      );
   END;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END dwhutl_stag_build;
2014-11-20 16:37:54.711 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_build/stag_build-impl.sql executed
2014-11-20 16:37:54.711 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_ctl/stag_ctl-def.sql delimiter 
2014-11-20 16:37:54.713 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE p#frm#stag_ctl
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   PROCEDURE prc_queue_ins (
      p_vc_queue_code    VARCHAR2
    , p_vc_queue_name    VARCHAR2
   );

   FUNCTION fct_queue_finished (p_n_queue_id NUMBER)
      RETURN BOOLEAN;

   FUNCTION fct_step_available (p_n_queue_id NUMBER)
      RETURN BOOLEAN;

   PROCEDURE prc_enqueue_object (
      p_vc_queue_code     VARCHAR2
    , p_vc_source_code    VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name    VARCHAR2 DEFAULT 'ALL'
   );

   PROCEDURE prc_enqueue_source (
      p_vc_source_code          VARCHAR2
    , p_n_threshold_tot_rows    NUMBER
   );

   PROCEDURE prc_execute_step (p_n_queue_id NUMBER);

   PROCEDURE prc_execute_queue (p_vc_queue_code VARCHAR2);

   PROCEDURE prc_initialize_queue (p_vc_queue_code VARCHAR2);

   PROCEDURE prc_truncate_stage (p_vc_source_code VARCHAR2);
END p#frm#stag_ctl;
2014-11-20 16:37:54.713 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE dwhutl_stag_ctl
   AUTHID CURRENT_USER
AS
   /**
   *
   * $Author: $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Package spec version string.
   */
   c_spec_version   CONSTANT VARCHAR2 (1024) := '$Id: $';
   /**
   * Package spec repository URL.
   */
   c_spec_url       CONSTANT VARCHAR2 (1024) := '$HeadURL: $';
   /**
   * Package body version string.
   */
   c_body_version            VARCHAR2 (1024);
   /**
   * Package body repository URL.
   */
   c_body_url                VARCHAR2 (1024);

   PROCEDURE prc_queue_ins (
      p_vc_queue_code    VARCHAR2
    , p_vc_queue_name    VARCHAR2
   );

   FUNCTION fct_queue_finished (p_n_queue_id NUMBER)
      RETURN BOOLEAN;

   FUNCTION fct_step_available (p_n_queue_id NUMBER)
      RETURN BOOLEAN;

   PROCEDURE prc_enqueue_object (
      p_vc_queue_code     VARCHAR2
    , p_vc_source_code    VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name    VARCHAR2 DEFAULT 'ALL'
   );

   PROCEDURE prc_enqueue_source (
      p_vc_source_code          VARCHAR2
    , p_n_threshold_tot_rows    NUMBER
   );

   PROCEDURE prc_execute_step (p_n_queue_id NUMBER);

   PROCEDURE prc_execute_queue (p_vc_queue_code VARCHAR2);

   PROCEDURE prc_initialize_queue (p_vc_queue_code VARCHAR2);

   PROCEDURE prc_truncate_stage (p_vc_source_code VARCHAR2);
END dwhutl_stag_ctl;
2014-11-20 16:37:54.783 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_ctl/stag_ctl-def.sql executed
2014-11-20 16:37:54.784 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_ctl/stag_ctl-impl.sql delimiter 
2014-11-20 16:37:54.785 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
CREATE OR REPLACE PACKAGE BODY p#frm#stag_ctl
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   PROCEDURE prc_queue_ins (
      p_vc_queue_code    VARCHAR2
    , p_vc_queue_name    VARCHAR2
   )
   IS
   BEGIN
      MERGE INTO p#frm#stag_queue_t trg
           USING (SELECT p_vc_queue_code AS queue_code
                       , p_vc_queue_name AS queue_name
                    FROM DUAL) src
              ON (trg.stag_queue_code = src.queue_code)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_queue_name = src.queue_name
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_queue_code
                     , trg.stag_queue_name
                    )
             VALUES (
                       src.queue_code
                     , src.queue_name
                    );

      COMMIT;
   END prc_queue_ins;

   FUNCTION fct_queue_finished (p_n_queue_id NUMBER)
      RETURN BOOLEAN
   IS
      l_n_step_status_min   NUMBER;
   BEGIN
      SELECT MIN (etl_step_status)
        INTO l_n_step_status_min
        FROM p#frm#stag_queue_object_t
       WHERE stag_queue_id = p_n_queue_id;

      IF l_n_step_status_min > 0 THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   END fct_queue_finished;

   FUNCTION fct_step_available (p_n_queue_id NUMBER)
      RETURN BOOLEAN
   IS
      l_n_step_cnt   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO l_n_step_cnt
        FROM p#frm#stag_queue_object_t
       WHERE etl_step_status = 0
         AND stag_queue_id = p_n_queue_id;

      IF l_n_step_cnt > 0 THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   END fct_step_available;

   PROCEDURE prc_enqueue_object (
      p_vc_queue_code     VARCHAR2
    , p_vc_source_code    VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name    VARCHAR2 DEFAULT 'ALL'
   )
   IS
      l_n_result    NUMBER;
      l_n_di_gui    NUMBER;
      l_n_step_no   NUMBER;
   BEGIN
      p#frm#trac.log_info (
         'Enqueue all objects'
       , 'Enqueue Begin'
      );

      DELETE p#frm#stag_queue_object_t
       WHERE stag_queue_id IN (SELECT stag_queue_id
                                 FROM p#frm#stag_queue_t
                                WHERE stag_queue_code = p_vc_queue_code)
         AND stag_object_id IN (SELECT o.stag_object_id
                                  FROM p#frm#stag_object_t o
                                     , p#frm#stag_source_t s
                                 WHERE o.stag_source_id = s.stag_source_id
                                   AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                                   AND p_vc_object_name IN (o.stag_object_name, 'ALL'));

      INSERT INTO p#frm#stag_queue_object_t (
                     stag_queue_id
                   , stag_object_id
                   , etl_step_status
                  )
         SELECT q.stag_queue_id
              , o.stag_object_id
              , 0
           FROM p#frm#stag_object_t o
              , p#frm#stag_source_t s
              , p#frm#stag_queue_t q
          WHERE o.stag_source_id = s.stag_source_id
            AND q.stag_queue_code = p_vc_queue_code
            AND p_vc_source_code IN (s.stag_source_code, 'ALL')
            AND p_vc_object_name IN (o.stag_object_name, 'ALL');

      COMMIT;
      p#frm#trac.log_info (
         'Enqueue all objects'
       , 'Enqueue End'
      );
   END prc_enqueue_object;

   PROCEDURE prc_enqueue_source (
      p_vc_source_code          VARCHAR2
    , p_n_threshold_tot_rows    NUMBER
   )
   IS
      l_n_tot_rows                 NUMBER := 0;
      l_n_tot_rows_next_theshold   NUMBER := 0;
      l_n_queue_order              NUMBER := 0;
      l_vc_queue_code              VARCHAR2 (10);
   BEGIN
      l_n_tot_rows_next_theshold := p_n_threshold_tot_rows;

      SELECT NVL (
                  MAX (LTRIM (
                          stag_queue_code
                        , p_vc_source_code
                       ))
                + 1
              , 0
             )
        INTO l_n_queue_order
        FROM p#frm#stag_queue_t
       WHERE stag_queue_code LIKE
                   p_vc_source_code
                || '%';

      l_vc_queue_code :=
            p_vc_source_code
         || TRIM (TO_CHAR (
                     l_n_queue_order
                   , '000'
                  ));
      prc_queue_ins (
         l_vc_queue_code
       , l_vc_queue_code
      );

      -- Order objects according to size in rows
      FOR r_obj IN (  SELECT o.stag_object_name
                           , t.num_rows
                        FROM p#frm#stag_object_v o
                           , user_tables t
                       WHERE o.stag_hist_table_name = t.table_name
                         AND stag_source_code = p_vc_source_code
                    ORDER BY t.num_rows) LOOP
         l_n_tot_rows :=
              l_n_tot_rows
            + r_obj.num_rows;

         -- If the threshold size is overtaken, then set next threshold and next queue
         IF l_n_tot_rows >= l_n_tot_rows_next_theshold THEN
            l_n_tot_rows_next_theshold :=
                 l_n_tot_rows_next_theshold
               + p_n_threshold_tot_rows;
            l_n_queue_order :=
                 l_n_queue_order
               + 1;
            l_vc_queue_code :=
                  p_vc_source_code
               || TRIM (TO_CHAR (
                           l_n_queue_order
                         , '000'
                        ));
            prc_queue_ins (
               l_vc_queue_code
             , l_vc_queue_code
            );
         END IF;

         prc_enqueue_object (
            l_vc_queue_code
          , p_vc_source_code
          , r_obj.stag_object_name
         );
      END LOOP;
   END prc_enqueue_source;

   PROCEDURE prc_execute_step (p_n_queue_id NUMBER)
   IS
      l_vc_prc_name         t_object_name := 'prc_execute_step';
      l_n_object_id         NUMBER;
      l_vc_owner            t_object_name;
      l_vc_object           t_object_name;
      l_vc_package          t_object_name;
      l_vc_std_load_modus   t_object_name;
   BEGIN
      p#frm#trac.log_info (
            'Queue '
         || p_n_queue_id
         || ': Step Begin'
       ,    'Stream '
         || p_n_queue_id
         || ': Step Begin'
      );

      EXECUTE IMMEDIATE 'LOCK TABLE stag_queue_object_t IN EXCLUSIVE MODE WAIT 10';

         UPDATE p#frm#stag_queue_object_t
            SET etl_step_status = 1
              , etl_step_session_id =
                   SYS_CONTEXT (
                      'USERENV'
                    , 'SESSIONID'
                   )
              , etl_step_begin_date = SYSDATE
          WHERE stag_queue_object_id = (SELECT MIN (stag_queue_object_id)
                                          FROM p#frm#stag_queue_object_t
                                         WHERE etl_step_status = 0
                                           AND stag_queue_id = p_n_queue_id)
      RETURNING stag_object_id
           INTO l_n_object_id;

      COMMIT;

      IF l_n_object_id IS NULL THEN
         p#frm#trac.log_info (
               'Queue '
            || p_n_queue_id
            || ': No steps available in queue'
          ,    'Queue '
            || p_n_queue_id
            || ': Nothing to do'
         );
      ELSE
         SELECT s.stag_owner
              , o.stag_object_name
              , o.stag_package_name
           INTO l_vc_owner
              , l_vc_object
              , l_vc_package
           FROM p#frm#stag_source_t s
              , p#frm#stag_object_t o
          WHERE s.stag_source_id = o.stag_source_id
            AND o.stag_object_id = l_n_object_id;

         p#frm#trac.log_info (
            'Execute procedure '
          ,    'Stream '
            || p_n_queue_id
            || ': '
         );
         l_vc_prc_name :=
               l_vc_package
            || CASE
                  WHEN l_vc_std_load_modus = 'D' THEN
                        '.'
                     || p#frm#stag_param.c_vc_procedure_wrapper_incr
                  ELSE
                        '.'
                     || p#frm#stag_param.c_vc_procedure_wrapper
               END;
         p#frm#trac.log_info (
               'o='
            || l_n_object_id
            || ' prc='
            || l_vc_prc_name
          ,    'Queue '
            || p_n_queue_id
         );

         BEGIN
            EXECUTE IMMEDIATE
                  'BEGIN '
               || l_vc_prc_name
               || '; END;';

            p#frm#trac.log_info (
                  'Queue '
               || p_n_queue_id
               || ': Step executed'
             ,    'Queue '
               || p_n_queue_id
               || ': Step executed'
            );

            UPDATE p#frm#stag_queue_object_t
               SET etl_step_status = 2
                 , etl_step_end_date = SYSDATE
             WHERE stag_object_id = l_n_object_id;
         EXCEPTION
            WHEN OTHERS THEN
               p#frm#trac.log_info (
                     'Queue '
                  || p_n_queue_id
                  || ': Error'
                ,    'Queue '
                  || p_n_queue_id
                  || ': Error'
               );

               UPDATE p#frm#stag_queue_object_t
                  SET etl_step_status = 3
                    , etl_step_end_date = SYSDATE
                WHERE stag_object_id = l_n_object_id;
         END;

         COMMIT;
         p#frm#trac.log_info (
               'Queue '
            || p_n_queue_id
            || ': End'
          ,    'Queue '
            || p_n_queue_id
            || ': End'
         );
      END IF;
   END prc_execute_step;

   PROCEDURE prc_execute_queue (p_vc_queue_code VARCHAR2)
   IS
      l_n_out        NUMBER;
      l_n_di_gui     NUMBER;
      l_n_step_no    NUMBER;
      l_n_queue_id   NUMBER;
   BEGIN
      --p#frm#stag_stat.prc_set_load_id;
      SELECT MAX (stag_queue_id)
        INTO l_n_queue_id
        FROM p#frm#stag_queue_t
       WHERE stag_queue_code = p_vc_queue_code;

      IF l_n_queue_id IS NOT NULL THEN
         p#frm#trac.log_info (
            'Execute single steps'
          , 'Queue Begin'
         );

         WHILE fct_queue_finished (l_n_queue_id) = FALSE LOOP
            IF fct_step_available (l_n_queue_id) = TRUE THEN
               p#frm#trac.log_info (
                  'Execute next available step'
                , 'Step Begin'
               );
               prc_execute_step (l_n_queue_id);
               p#frm#trac.log_info (
                  'Step executed'
                , 'Step End'
               );
            END IF;
         END LOOP;

         p#frm#trac.log_info (
            'No more steps to execute'
          , 'Stream End'
         );
      ELSE
         p#frm#trac.log_info (
               'Queue '
            || p_vc_queue_code
            || ' doesn''t exist'
          , 'Queue End'
         );
      END IF;
   END prc_execute_queue;

   PROCEDURE prc_truncate_stage (p_vc_source_code VARCHAR2)
   IS
   BEGIN
      FOR r_obj IN (SELECT stag_package_name
                      FROM p#frm#stag_object_v
                     WHERE stag_source_code = p_vc_source_code) LOOP
         EXECUTE IMMEDIATE
               'BEGIN '
            || r_obj.stag_package_name
            || '.prc_trunc_stage1; END;';
      END LOOP;
   END;

   PROCEDURE prc_initialize_queue (p_vc_queue_code VARCHAR2)
   IS
   BEGIN
      UPDATE p#frm#stag_queue_object_t
         SET etl_step_status = 0
           , etl_step_session_id = NULL
           , etl_step_begin_date = NULL
           , etl_step_end_date = NULL
       WHERE stag_queue_id IN (SELECT stag_queue_id
                                 FROM p#frm#stag_queue_t
                                WHERE stag_queue_code = p_vc_queue_code);

      COMMIT;
   END prc_initialize_queue;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END p#frm#stag_ctl;
2014-11-20 16:37:54.785 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
CREATE OR REPLACE PACKAGE BODY dwhutl_stag_ctl
AS
   /**
   * $Author: nmarangoni $
   * $Date: $
   * $Revision: $
   * $Id: $
   * $HeadURL: $
   */
   /**
   * Object name type
   */
   SUBTYPE t_object_name IS VARCHAR2 (50);

   PROCEDURE prc_queue_ins (
      p_vc_queue_code    VARCHAR2
    , p_vc_queue_name    VARCHAR2
   )
   IS
   BEGIN
      MERGE INTO dwhutl_stag_queue_t trg
           USING (SELECT p_vc_queue_code AS queue_code
                       , p_vc_queue_name AS queue_name
                    FROM DUAL) src
              ON (trg.stag_queue_code = src.queue_code)
      WHEN MATCHED THEN
         UPDATE SET trg.stag_queue_name = src.queue_name
      WHEN NOT MATCHED THEN
         INSERT     (
                       trg.stag_queue_code
                     , trg.stag_queue_name
                    )
             VALUES (
                       src.queue_code
                     , src.queue_name
                    );

      COMMIT;
   END prc_queue_ins;

   FUNCTION fct_queue_finished (p_n_queue_id NUMBER)
      RETURN BOOLEAN
   IS
      l_n_step_status_min   NUMBER;
   BEGIN
      SELECT MIN (etl_step_status)
        INTO l_n_step_status_min
        FROM dwhutl_stag_queue_object_t
       WHERE stag_queue_id = p_n_queue_id;

      IF l_n_step_status_min > 0 THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   END fct_queue_finished;

   FUNCTION fct_step_available (p_n_queue_id NUMBER)
      RETURN BOOLEAN
   IS
      l_n_step_cnt   NUMBER;
   BEGIN
      SELECT COUNT (*)
        INTO l_n_step_cnt
        FROM dwhutl_stag_queue_object_t
       WHERE etl_step_status = 0
         AND stag_queue_id = p_n_queue_id;

      IF l_n_step_cnt > 0 THEN
         RETURN TRUE;
      ELSE
         RETURN FALSE;
      END IF;
   END fct_step_available;

   PROCEDURE prc_enqueue_object (
      p_vc_queue_code     VARCHAR2
    , p_vc_source_code    VARCHAR2 DEFAULT 'ALL'
    , p_vc_object_name    VARCHAR2 DEFAULT 'ALL'
   )
   IS
      l_n_result    NUMBER;
      l_n_di_gui    NUMBER;
      l_n_step_no   NUMBER;
   BEGIN
      dwhutl_trac.log_info (
         'Enqueue all objects'
       , 'Enqueue Begin'
      );

      DELETE dwhutl_stag_queue_object_t
       WHERE stag_queue_id IN (SELECT stag_queue_id
                                 FROM dwhutl_stag_queue_t
                                WHERE stag_queue_code = p_vc_queue_code)
         AND stag_object_id IN (SELECT o.stag_object_id
                                  FROM dwhutl_stag_object_t o
                                     , dwhutl_stag_source_t s
                                 WHERE o.stag_source_id = s.stag_source_id
                                   AND p_vc_source_code IN (s.stag_source_code, 'ALL')
                                   AND p_vc_object_name IN (o.stag_object_name, 'ALL'));

      INSERT INTO dwhutl_stag_queue_object_t (
                     stag_queue_id
                   , stag_object_id
                   , etl_step_status
                  )
         SELECT q.stag_queue_id
              , o.stag_object_id
              , 0
           FROM dwhutl_stag_object_t o
              , dwhutl_stag_source_t s
              , dwhutl_stag_queue_t q
          WHERE o.stag_source_id = s.stag_source_id
            AND q.stag_queue_code = p_vc_queue_code
            AND p_vc_source_code IN (s.stag_source_code, 'ALL')
            AND p_vc_object_name IN (o.stag_object_name, 'ALL');

      COMMIT;
      dwhutl_trac.log_info (
         'Enqueue all objects'
       , 'Enqueue End'
      );
   END prc_enqueue_object;

   PROCEDURE prc_enqueue_source (
      p_vc_source_code          VARCHAR2
    , p_n_threshold_tot_rows    NUMBER
   )
   IS
      l_n_tot_rows                 NUMBER := 0;
      l_n_tot_rows_next_theshold   NUMBER := 0;
      l_n_queue_order              NUMBER := 0;
      l_vc_queue_code              VARCHAR2 (10);
   BEGIN
      l_n_tot_rows_next_theshold := p_n_threshold_tot_rows;

      SELECT NVL (
                  MAX (LTRIM (
                          stag_queue_code
                        , p_vc_source_code
                       ))
                + 1
              , 0
             )
        INTO l_n_queue_order
        FROM dwhutl_stag_queue_t
       WHERE stag_queue_code LIKE
                   p_vc_source_code
                || '%';

      l_vc_queue_code :=
            p_vc_source_code
         || TRIM (TO_CHAR (
                     l_n_queue_order
                   , '000'
                  ));
      prc_queue_ins (
         l_vc_queue_code
       , l_vc_queue_code
      );

      -- Order objects according to size in rows
      FOR r_obj IN (  SELECT o.stag_object_name
                           , t.num_rows
                        FROM dwhutl_stag_object_v o
                           , user_tables t
                       WHERE o.stag_hist_table_name = t.table_name
                         AND stag_source_code = p_vc_source_code
                    ORDER BY t.num_rows) LOOP
         l_n_tot_rows :=
              l_n_tot_rows
            + r_obj.num_rows;

         -- If the threshold size is overtaken, then set next threshold and next queue
         IF l_n_tot_rows >= l_n_tot_rows_next_theshold THEN
            l_n_tot_rows_next_theshold :=
                 l_n_tot_rows_next_theshold
               + p_n_threshold_tot_rows;
            l_n_queue_order :=
                 l_n_queue_order
               + 1;
            l_vc_queue_code :=
                  p_vc_source_code
               || TRIM (TO_CHAR (
                           l_n_queue_order
                         , '000'
                        ));
            prc_queue_ins (
               l_vc_queue_code
             , l_vc_queue_code
            );
         END IF;

         prc_enqueue_object (
            l_vc_queue_code
          , p_vc_source_code
          , r_obj.stag_object_name
         );
      END LOOP;
   END prc_enqueue_source;

   PROCEDURE prc_execute_step (p_n_queue_id NUMBER)
   IS
      l_vc_prc_name         t_object_name := 'prc_execute_step';
      l_n_object_id         NUMBER;
      l_vc_owner            t_object_name;
      l_vc_object           t_object_name;
      l_vc_package          t_object_name;
      l_vc_std_load_modus   t_object_name;
   BEGIN
      dwhutl_trac.log_info (
            'Queue '
         || p_n_queue_id
         || ': Step Begin'
       ,    'Stream '
         || p_n_queue_id
         || ': Step Begin'
      );

      EXECUTE IMMEDIATE 'LOCK TABLE stag_queue_object_t IN EXCLUSIVE MODE WAIT 10';

         UPDATE dwhutl_stag_queue_object_t
            SET etl_step_status = 1
              , etl_step_session_id =
                   SYS_CONTEXT (
                      'USERENV'
                    , 'SESSIONID'
                   )
              , etl_step_begin_date = SYSDATE
          WHERE stag_queue_object_id = (SELECT MIN (stag_queue_object_id)
                                          FROM dwhutl_stag_queue_object_t
                                         WHERE etl_step_status = 0
                                           AND stag_queue_id = p_n_queue_id)
      RETURNING stag_object_id
           INTO l_n_object_id;

      COMMIT;

      IF l_n_object_id IS NULL THEN
         dwhutl_trac.log_info (
               'Queue '
            || p_n_queue_id
            || ': No steps available in queue'
          ,    'Queue '
            || p_n_queue_id
            || ': Nothing to do'
         );
      ELSE
         SELECT s.stag_owner
              , o.stag_object_name
              , o.stag_package_name
           INTO l_vc_owner
              , l_vc_object
              , l_vc_package
           FROM dwhutl_stag_source_t s
              , dwhutl_stag_object_t o
          WHERE s.stag_source_id = o.stag_source_id
            AND o.stag_object_id = l_n_object_id;

         dwhutl_trac.log_info (
            'Execute procedure '
          ,    'Stream '
            || p_n_queue_id
            || ': '
         );
         l_vc_prc_name :=
               l_vc_package
            || CASE
                  WHEN l_vc_std_load_modus = 'D' THEN
                        '.'
                     || dwhutl_stag_param.c_vc_procedure_wrapper_incr
                  ELSE
                        '.'
                     || dwhutl_stag_param.c_vc_procedure_wrapper
               END;
         dwhutl_trac.log_info (
               'o='
            || l_n_object_id
            || ' prc='
            || l_vc_prc_name
          ,    'Queue '
            || p_n_queue_id
         );

         BEGIN
            EXECUTE IMMEDIATE
                  'BEGIN '
               || l_vc_prc_name
               || '; END;';

            dwhutl_trac.log_info (
                  'Queue '
               || p_n_queue_id
               || ': Step executed'
             ,    'Queue '
               || p_n_queue_id
               || ': Step executed'
            );

            UPDATE dwhutl_stag_queue_object_t
               SET etl_step_status = 2
                 , etl_step_end_date = SYSDATE
             WHERE stag_object_id = l_n_object_id;
         EXCEPTION
            WHEN OTHERS THEN
               dwhutl_trac.log_info (
                     'Queue '
                  || p_n_queue_id
                  || ': Error'
                ,    'Queue '
                  || p_n_queue_id
                  || ': Error'
               );

               UPDATE dwhutl_stag_queue_object_t
                  SET etl_step_status = 3
                    , etl_step_end_date = SYSDATE
                WHERE stag_object_id = l_n_object_id;
         END;

         COMMIT;
         dwhutl_trac.log_info (
               'Queue '
            || p_n_queue_id
            || ': End'
          ,    'Queue '
            || p_n_queue_id
            || ': End'
         );
      END IF;
   END prc_execute_step;

   PROCEDURE prc_execute_queue (p_vc_queue_code VARCHAR2)
   IS
      l_n_out        NUMBER;
      l_n_di_gui     NUMBER;
      l_n_step_no    NUMBER;
      l_n_queue_id   NUMBER;
   BEGIN
      --dwhutl_stag_stat.prc_set_load_id;
      SELECT MAX (stag_queue_id)
        INTO l_n_queue_id
        FROM dwhutl_stag_queue_t
       WHERE stag_queue_code = p_vc_queue_code;

      IF l_n_queue_id IS NOT NULL THEN
         dwhutl_trac.log_info (
            'Execute single steps'
          , 'Queue Begin'
         );

         WHILE fct_queue_finished (l_n_queue_id) = FALSE LOOP
            IF fct_step_available (l_n_queue_id) = TRUE THEN
               dwhutl_trac.log_info (
                  'Execute next available step'
                , 'Step Begin'
               );
               prc_execute_step (l_n_queue_id);
               dwhutl_trac.log_info (
                  'Step executed'
                , 'Step End'
               );
            END IF;
         END LOOP;

         dwhutl_trac.log_info (
            'No more steps to execute'
          , 'Stream End'
         );
      ELSE
         dwhutl_trac.log_info (
               'Queue '
            || p_vc_queue_code
            || ' doesn''t exist'
          , 'Queue End'
         );
      END IF;
   END prc_execute_queue;

   PROCEDURE prc_truncate_stage (p_vc_source_code VARCHAR2)
   IS
   BEGIN
      FOR r_obj IN (SELECT stag_package_name
                      FROM dwhutl_stag_object_v
                     WHERE stag_source_code = p_vc_source_code) LOOP
         EXECUTE IMMEDIATE
               'BEGIN '
            || r_obj.stag_package_name
            || '.prc_trunc_stage1; END;';
      END LOOP;
   END;

   PROCEDURE prc_initialize_queue (p_vc_queue_code VARCHAR2)
   IS
   BEGIN
      UPDATE dwhutl_stag_queue_object_t
         SET etl_step_status = 0
           , etl_step_session_id = NULL
           , etl_step_begin_date = NULL
           , etl_step_end_date = NULL
       WHERE stag_queue_id IN (SELECT stag_queue_id
                                 FROM dwhutl_stag_queue_t
                                WHERE stag_queue_code = p_vc_queue_code);

      COMMIT;
   END prc_initialize_queue;
/**
 * Package initialization
 */
BEGIN
   c_body_version := '$Id: $';
   c_body_url := '$HeadURL: $';
END dwhutl_stag_ctl;
2014-11-20 16:37:55.090 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script packages/stag_ctl/stag_ctl-impl.sql executed
2014-11-20 16:37:55.091 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_stat_type_data.sql delimiter 
2014-11-20 16:37:55.092 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - Before replacement:
BEGIN
	p#frm#stag_meta.prc_stat_type_ins ( 'STIN', 'INSERT STAGE', 'Extract rows from source into stage table') ;
    p#frm#stag_meta.prc_stat_type_ins ( 'STAN', 'ANALYZE', 'Analyze stage table') ;
    p#frm#stag_meta.prc_stat_type_ins ( 'DUIN', 'INSERT DIFFERENCE', 'Get Source-Target difference into the diff table') ;
    p#frm#stag_meta.prc_stat_type_ins ( 'DUAN', 'ANALYZE', 'Analyze diff table') ;
    p#frm#stag_meta.prc_stat_type_ins ( 'DFIN', 'INSERT DIFFERENCE', 'Get Source-Target difference into the diff table') ;
    p#frm#stag_meta.prc_stat_type_ins ( 'DFAN', 'ANALYZE', 'Analyze diff table') ;
    p#frm#stag_meta.prc_stat_type_ins ( 'HSCL', 'CLOSE HISTORY', 'Close validity of old and deleted records') ;
    p#frm#stag_meta.prc_stat_type_ins ( 'HSUP', 'UPDATE HISTORY', 'Update hist table with rows from the diff table') ;
	p#frm#stag_meta.prc_stat_type_ins ( 'HSIN', 'INSERT HISTORY', 'Insert in hist table with new rows from the diff table') ;
    p#frm#stag_meta.prc_stat_type_ins ( 'HSAN', 'ANALYZE', 'Analyze hist table') ;
END;
2014-11-20 16:37:55.092 [main] DEBUG org.openbusinessintelligence.dbframework.ParameterReplacer - After replacement:
BEGIN
	dwhutl_stag_meta.prc_stat_type_ins ( 'STIN', 'INSERT STAGE', 'Extract rows from source into stage table') ;
    dwhutl_stag_meta.prc_stat_type_ins ( 'STAN', 'ANALYZE', 'Analyze stage table') ;
    dwhutl_stag_meta.prc_stat_type_ins ( 'DUIN', 'INSERT DIFFERENCE', 'Get Source-Target difference into the diff table') ;
    dwhutl_stag_meta.prc_stat_type_ins ( 'DUAN', 'ANALYZE', 'Analyze diff table') ;
    dwhutl_stag_meta.prc_stat_type_ins ( 'DFIN', 'INSERT DIFFERENCE', 'Get Source-Target difference into the diff table') ;
    dwhutl_stag_meta.prc_stat_type_ins ( 'DFAN', 'ANALYZE', 'Analyze diff table') ;
    dwhutl_stag_meta.prc_stat_type_ins ( 'HSCL', 'CLOSE HISTORY', 'Close validity of old and deleted records') ;
    dwhutl_stag_meta.prc_stat_type_ins ( 'HSUP', 'UPDATE HISTORY', 'Update hist table with rows from the diff table') ;
	dwhutl_stag_meta.prc_stat_type_ins ( 'HSIN', 'INSERT HISTORY', 'Insert in hist table with new rows from the diff table') ;
    dwhutl_stag_meta.prc_stat_type_ins ( 'HSAN', 'ANALYZE', 'Analyze hist table') ;
END;
2014-11-20 16:37:55.224 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Script tables/stag_stat_type_data.sql executed
2014-11-20 16:37:55.224 [main] DEBUG org.openbusinessintelligence.dbframework.FrameworkInstaller - Module all installed
2014-11-20 16:37:55.224 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 16:37:55.234 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 16:37:55.234 [main] INFO  org.openbusinessintelligence.cli.Main - Framework installed
2014-11-20 16:37:55.234 [main] INFO  org.openbusinessintelligence.cli.Main - FINISH
2014-11-20 16:37:55.234 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:29:01.726 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:29:01.728 [main] INFO  org.openbusinessintelligence.cli.Main - START
2014-11-20 17:29:01.728 [main] INFO  org.openbusinessintelligence.cli.Main - Configure command line options
2014-11-20 17:29:01.751 [main] INFO  org.openbusinessintelligence.cli.Main - Options configured
2014-11-20 17:29:01.755 [main] INFO  org.openbusinessintelligence.cli.Main - Copy an entire schema, a single table or the result of a query from a database to another
2014-11-20 17:29:01.759 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbconnkeywordfile: No such option
2014-11-20 17:29:01.759 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbdriverclass: No such option
2014-11-20 17:29:01.759 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbconnectionurl: No such option
2014-11-20 17:29:01.759 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbusername: No such option
2014-11-20 17:29:01.759 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbpassword: No such option
2014-11-20 17:29:01.759 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:29:01.759 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_informix_test
2014-11-20 17:29:01.760 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - databaseDriver = com.informix.jdbc.IfxDriver
2014-11-20 17:29:01.761 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - connectionURL = jdbc:informix-sqli://localhost:1535/test:INFORMIXSERVER=informix
2014-11-20 17:29:01.815 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:29:02.162 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:informix-sqli://localhost:1535/test:INFORMIXSERVER=informix
2014-11-20 17:29:02.163 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:29:02.185 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: Informix Dynamic Server
2014-11-20 17:29:02.195 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:29:02.195 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEafter,ansi,append,attach,audit,before,bitmap,boolean,buffered,byte,cache,call,cluster,clustersize,codeset,database,datafiles,dataskip,datetime,dba,dbdate,dbmoney,debug,define,delimiter,deluxe,detach,dirty,distributions,document,each,elif,exclusive,exit,explain,express,expression,extend,extent,file,fillfactor,foreach,format,fraction,fragment,gk,hash,high,hold,hybrid,if,index,init,labeleq,labelge,labelgt,labelle,labellt,let,listing,lock,log,low,matches,maxerrors,medium,mode,modify,money,mounting,new,nvarchar,off,old,operational,optical,optimization,page,pdqpriority,pload,private,raise,range,raw,recordend,recover,referencing,rejectfile,release,remainder,rename,reserve,resolution,resource,resume,return,returning,returns,ridlist,robin,rollforward,round,row,rowids,sameas,samples,schedule,scratch,serial,share,skall,skinhibit,skshow,smallfloat,stability,standard,start,static,statistics,stdev,step,sync,synonym,system,temp,text,timeout,trace,trigger,units,unlock,variance,wait,while,xload,xunload
2014-11-20 17:29:02.196 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:29:02.196 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string:  
2014-11-20 17:29:02.196 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:29:02.196 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 32767
2014-11-20 17:29:02.196 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:29:02.196 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:29:02.206 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - dwhreport
2014-11-20 17:29:02.207 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - dwhstage
2014-11-20 17:29:02.207 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sugarcrm
2014-11-20 17:29:02.207 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sysadmin
2014-11-20 17:29:02.207 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sysmaster
2014-11-20 17:29:02.207 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sysuser
2014-11-20 17:29:02.207 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sysutils
2014-11-20 17:29:02.207 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - test
2014-11-20 17:29:02.208 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:29:02.208 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:29:02.213 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - informix
2014-11-20 17:29:02.214 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - test
2014-11-20 17:29:02.214 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:29:02.214 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:29:02.225 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - byte null
2014-11-20 17:29:02.225 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - char null
2014-11-20 17:29:02.225 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - character varying null
2014-11-20 17:29:02.225 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - date null
2014-11-20 17:29:02.226 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - datetime year to fraction(5) null
2014-11-20 17:29:02.226 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - decimal null
2014-11-20 17:29:02.226 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - double precision null
2014-11-20 17:29:02.226 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - float null
2014-11-20 17:29:02.226 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - integer null
2014-11-20 17:29:02.226 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - interval null
2014-11-20 17:29:02.226 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - nchar null
2014-11-20 17:29:02.227 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - nvarchar null
2014-11-20 17:29:02.227 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - money null
2014-11-20 17:29:02.227 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - numeric null
2014-11-20 17:29:02.227 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - serial null
2014-11-20 17:29:02.227 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - smallint null
2014-11-20 17:29:02.227 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - smallfloat null
2014-11-20 17:29:02.227 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - text null
2014-11-20 17:29:02.228 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - varchar null
2014-11-20 17:29:02.228 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - boolean null
2014-11-20 17:29:02.228 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - int8 null
2014-11-20 17:29:02.228 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - serial8 null
2014-11-20 17:29:02.228 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - clob null
2014-11-20 17:29:02.228 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - blob null
2014-11-20 17:29:02.229 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - lvarchar null
2014-11-20 17:29:02.229 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - bigint null
2014-11-20 17:29:02.229 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - bigserial null
2014-11-20 17:29:02.229 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbconnkeywordfile: No such option
2014-11-20 17:29:02.229 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbdriverclass: No such option
2014-11-20 17:29:02.229 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbconnectionurl: No such option
2014-11-20 17:29:02.230 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbusername: No such option
2014-11-20 17:29:02.230 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbpassword: No such option
2014-11-20 17:29:02.230 [main] INFO  org.openbusinessintelligence.cli.Main - Source and target connections prepared
2014-11-20 17:29:02.230 [main] DEBUG org.openbusinessintelligence.cli.Main - sourceschema: No such option
2014-11-20 17:29:02.230 [main] INFO  org.openbusinessintelligence.cli.Main - Source schema: null
2014-11-20 17:29:02.231 [main] INFO  org.openbusinessintelligence.cli.Main - Source table: tab_test
2014-11-20 17:29:02.231 [main] DEBUG org.openbusinessintelligence.cli.Main - sourcequery: No such option
2014-11-20 17:29:02.231 [main] INFO  org.openbusinessintelligence.cli.Main - Source query: null
2014-11-20 17:29:02.231 [main] INFO  org.openbusinessintelligence.cli.Main - Target schema: test
2014-11-20 17:29:02.231 [main] INFO  org.openbusinessintelligence.cli.Main - Target table: stg_ifx_tab_test
2014-11-20 17:29:02.237 [main] INFO  org.openbusinessintelligence.cli.Main - Copy a single table or the result of a query
2014-11-20 17:29:02.239 [main] INFO  org.openbusinessintelligence.cli.Main - Create tables if they don't exist
2014-11-20 17:29:02.240 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:29:02.240 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_derby_dwhdev_test
2014-11-20 17:29:02.245 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - databaseDriver = org.apache.derby.jdbc.ClientDriver
2014-11-20 17:29:02.245 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - connectionURL = jdbc:derby://localhost:55000/dwhdev;create=false
2014-11-20 17:29:02.246 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:29:02.612 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:derby://localhost:55000/dwhdev;create=false
2014-11-20 17:29:02.613 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:29:02.613 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: Apache Derby
2014-11-20 17:29:02.615 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:29:02.685 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEALIAS,BIGINT,BOOLEAN,CALL,CLASS,COPY,DB2J_DEBUG,EXECUTE,EXPLAIN,FILE,FILTER,GETCURRENTCONNECTION,INDEX,INSTANCEOF,METHOD,NEW,OFF,PROPERTIES,RECOMPILE,RENAME,RUNTIMESTATISTICS,STATEMENT,STATISTICS,TIMING,WAIT
2014-11-20 17:29:02.686 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:29:02.686 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string: "
2014-11-20 17:29:02.686 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:29:02.686 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 0
2014-11-20 17:29:02.686 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:29:02.686 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:29:02.692 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:29:02.692 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:29:02.699 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - APP
2014-11-20 17:29:02.699 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHSTAGE
2014-11-20 17:29:02.700 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NULLID
2014-11-20 17:29:02.700 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SQLJ
2014-11-20 17:29:02.700 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM
2014-11-20 17:29:02.700 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYS
2014-11-20 17:29:02.700 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCAT
2014-11-20 17:29:02.700 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCS_DIAG
2014-11-20 17:29:02.700 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCS_UTIL
2014-11-20 17:29:02.701 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSFUN
2014-11-20 17:29:02.701 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBM
2014-11-20 17:29:02.701 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPROC
2014-11-20 17:29:02.701 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSSTAT
2014-11-20 17:29:02.701 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST
2014-11-20 17:29:02.703 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:29:02.703 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:29:02.715 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BIGINT null
2014-11-20 17:29:02.715 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR FOR BIT DATA null
2014-11-20 17:29:02.715 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR () FOR BIT DATA length
2014-11-20 17:29:02.716 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR () FOR BIT DATA length
2014-11-20 17:29:02.716 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR null
2014-11-20 17:29:02.716 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR length
2014-11-20 17:29:02.716 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NUMERIC precision,scale
2014-11-20 17:29:02.716 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECIMAL precision,scale
2014-11-20 17:29:02.716 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - INTEGER null
2014-11-20 17:29:02.716 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SMALLINT null
2014-11-20 17:29:02.717 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - FLOAT precision
2014-11-20 17:29:02.717 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REAL null
2014-11-20 17:29:02.717 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DOUBLE null
2014-11-20 17:29:02.717 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR length
2014-11-20 17:29:02.717 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BOOLEAN null
2014-11-20 17:29:02.717 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DATE null
2014-11-20 17:29:02.718 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIME null
2014-11-20 17:29:02.718 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIMESTAMP null
2014-11-20 17:29:02.718 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - OBJECT null
2014-11-20 17:29:02.718 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BLOB length
2014-11-20 17:29:02.718 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CLOB length
2014-11-20 17:29:02.718 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - XML null
2014-11-20 17:29:02.723 [main] INFO  org.openbusinessintelligence.cli.Main - Creating table: stg_ifx_tab_test from table tab_test
2014-11-20 17:29:02.725 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Getting columns for source...
2014-11-20 17:29:02.726 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Source RDBMS product: Informix Dynamic Server
2014-11-20 17:29:02.726 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Default schema: null
2014-11-20 17:29:02.726 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Table schema: null
2014-11-20 17:29:02.726 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Prefix for source table: 
2014-11-20 17:29:02.888 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 0 Name: col_boolean Type: BOOLEAN Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:16
2014-11-20 17:29:02.888 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 1 Name: col_int8 Type: INT8 Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:29:02.888 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 2 Name: col_smallint Type: SMALLINT Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:5
2014-11-20 17:29:02.888 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 3 Name: col_int Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:29:02.890 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 4 Name: col_integer Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:29:02.890 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 5 Name: col_bigint Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:29:02.890 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 6 Name: col_serial Type: SERIAL Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:29:02.890 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 7 Name: col_numeric Type: DECIMAL Length: 32 Precision: 32 Scale: 8 Attribute:  JDBC Type:3
2014-11-20 17:29:02.890 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 8 Name: col_dec Type: DECIMAL Length: 16 Precision: 16 Scale: 255 Attribute:  JDBC Type:3
2014-11-20 17:29:02.891 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 9 Name: col_decimal Type: DECIMAL Length: 27 Precision: 27 Scale: 2 Attribute:  JDBC Type:3
2014-11-20 17:29:02.891 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 10 Name: col_money Type: MONEY Length: 26 Precision: 26 Scale: 8 Attribute:  JDBC Type:3
2014-11-20 17:29:02.891 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 11 Name: col_real Type: SMALLFLOAT Length: 7 Precision: 7 Scale: 0 Attribute:  JDBC Type:7
2014-11-20 17:29:02.891 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 12 Name: col_smallfloat Type: SMALLFLOAT Length: 7 Precision: 7 Scale: 0 Attribute:  JDBC Type:7
2014-11-20 17:29:02.891 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 13 Name: col_float Type: FLOAT Length: 17 Precision: 17 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:29:02.891 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 14 Name: col_double Type: FLOAT Length: 17 Precision: 17 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:29:02.891 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 15 Name: col_char Type: CHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:29:02.891 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 16 Name: col_varchar Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:29:02.892 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 17 Name: col_lvarchar Type: LVARCHAR Length: 6000 Precision: 6000 Scale: 0 Attribute:  JDBC Type:-1
2014-11-20 17:29:02.892 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 18 Name: col_nchar Type: NCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:29:02.892 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 19 Name: col_nvarchar Type: NVARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:29:02.892 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 20 Name: col_text Type: TEXT Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:29:02.892 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 21 Name: col_clob Type: CLOB Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:29:02.893 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 22 Name: col_binary18 Type: BINARY18 Length: 18 Precision: 18 Scale: 0 Attribute:  JDBC Type:0
2014-11-20 17:29:02.894 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 23 Name: col_binaryvar Type: BINARYVAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:-1
2014-11-20 17:29:02.894 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 24 Name: col_byte Type: BYTE Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:29:02.894 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 25 Name: col_blob Type: BLOB Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:29:02.894 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 26 Name: col_date Type: DATE Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:91
2014-11-20 17:29:02.894 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 27 Name: col_datetime Type: DATETIME Length: 23 Precision: 23 Scale: 0 Attribute:  JDBC Type:93
2014-11-20 17:29:02.894 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 28 Name: col_intervalym Type: INTERVAL Length: 1538 Precision: 1538 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:29:02.894 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 29 Name: col_intervalds Type: INTERVAL Length: 2893 Precision: 2893 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:29:02.894 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got column properties
2014-11-20 17:29:02.895 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - getting pk properties
2014-11-20 17:29:02.895 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - get primary key information...
2014-11-20 17:29:02.895 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Table: tab_test
2014-11-20 17:29:02.926 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got pk properties
2014-11-20 17:29:02.926 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got primary key information
2014-11-20 17:29:02.926 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - Source RDBMS product: Informix Dynamic Server
2014-11-20 17:29:02.926 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - Target RDBMS product: Apache Derby
2014-11-20 17:29:02.965 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_boolean
2014-11-20 17:29:02.966 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:02.966 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:02.966 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:02.966 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BOOLEAN
2014-11-20 17:29:02.966 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:02.970 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BOOLEAN
2014-11-20 17:29:02.972 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BOOLEAN
2014-11-20 17:29:02.973 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BOOLEAN
2014-11-20 17:29:02.974 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BOOLEAN
2014-11-20 17:29:02.976 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BOOLEAN
2014-11-20 17:29:02.976 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 5
2014-11-20 17:29:02.976 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:02.976 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:02.976 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:02.977 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:02.977 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:02.977 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 0  Name: col_boolean Type: BOOLEAN Attribute:   Length: 5 Precision: 5 Scale: 0  Definition: BOOLEAN(5,0) 
2014-11-20 17:29:02.977 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 0  Name: col_boolean Type: BOOLEAN Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: BOOLEAN 
2014-11-20 17:29:02.977 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_int8
2014-11-20 17:29:02.977 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:02.977 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:02.977 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:02.978 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INT8
2014-11-20 17:29:02.978 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:02.979 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = INT8
2014-11-20 17:29:02.980 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = INT8
2014-11-20 17:29:02.980 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BIGINT
2014-11-20 17:29:02.981 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BIGINT
2014-11-20 17:29:02.981 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BIGINT
2014-11-20 17:29:02.981 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 19
2014-11-20 17:29:02.981 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:02.981 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:02.981 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:02.981 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:02.982 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:02.982 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 1  Name: col_int8 Type: INT8 Attribute:   Length: 19 Precision: 19 Scale: 0  Definition: INT8(19,0) 
2014-11-20 17:29:02.982 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 1  Name: col_int8 Type: BIGINT Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: BIGINT 
2014-11-20 17:29:02.982 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_smallint
2014-11-20 17:29:02.982 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:02.982 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:02.982 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:02.982 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = SMALLINT
2014-11-20 17:29:02.982 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:02.983 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = SMALLINT
2014-11-20 17:29:02.984 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = SMALLINT
2014-11-20 17:29:02.984 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = SMALLINT
2014-11-20 17:29:02.985 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = SMALLINT
2014-11-20 17:29:02.985 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = SMALLINT
2014-11-20 17:29:02.985 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 5
2014-11-20 17:29:02.985 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:02.986 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:02.986 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:02.986 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:02.986 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:02.987 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 2  Name: col_smallint Type: SMALLINT Attribute:   Length: 5 Precision: 5 Scale: 0  Definition: SMALLINT(5,0) 
2014-11-20 17:29:02.987 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 2  Name: col_smallint Type: SMALLINT Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: SMALLINT 
2014-11-20 17:29:02.987 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_int
2014-11-20 17:29:02.987 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:02.987 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:02.987 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:02.987 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INTEGER
2014-11-20 17:29:02.987 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:02.988 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = INTEGER
2014-11-20 17:29:02.989 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = INTEGER
2014-11-20 17:29:02.989 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = INTEGER
2014-11-20 17:29:02.990 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = INTEGER
2014-11-20 17:29:02.990 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = INTEGER
2014-11-20 17:29:02.991 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 10
2014-11-20 17:29:02.991 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:02.991 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:02.991 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:02.991 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:02.992 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:02.992 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 3  Name: col_int Type: INTEGER Attribute:   Length: 10 Precision: 10 Scale: 0  Definition: INTEGER(10,0) 
2014-11-20 17:29:02.993 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 3  Name: col_int Type: INTEGER Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: INTEGER 
2014-11-20 17:29:02.993 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_integer
2014-11-20 17:29:02.993 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:02.993 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:02.993 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:02.993 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INTEGER
2014-11-20 17:29:02.993 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:02.994 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = INTEGER
2014-11-20 17:29:02.995 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = INTEGER
2014-11-20 17:29:02.995 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = INTEGER
2014-11-20 17:29:02.995 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = INTEGER
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = INTEGER
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 10
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 4  Name: col_integer Type: INTEGER Attribute:   Length: 10 Precision: 10 Scale: 0  Definition: INTEGER(10,0) 
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 4  Name: col_integer Type: INTEGER Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: INTEGER 
2014-11-20 17:29:02.996 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_bigint
2014-11-20 17:29:02.997 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:02.997 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:02.997 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:02.997 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BIGINT
2014-11-20 17:29:02.997 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:02.998 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BIGINT
2014-11-20 17:29:02.999 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BIGINT
2014-11-20 17:29:02.999 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BIGINT
2014-11-20 17:29:03.000 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BIGINT
2014-11-20 17:29:03.001 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BIGINT
2014-11-20 17:29:03.001 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 19
2014-11-20 17:29:03.001 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 5  Name: col_bigint Type: BIGINT Attribute:   Length: 19 Precision: 19 Scale: 0  Definition: BIGINT(19,0) 
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 5  Name: col_bigint Type: BIGINT Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: BIGINT 
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_serial
2014-11-20 17:29:03.002 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.002 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = SERIAL
2014-11-20 17:29:03.002 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.003 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = SERIAL
2014-11-20 17:29:03.004 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = SERIAL
2014-11-20 17:29:03.004 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = INTEGER
2014-11-20 17:29:03.005 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = INTEGER
2014-11-20 17:29:03.005 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = INTEGER
2014-11-20 17:29:03.005 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 10
2014-11-20 17:29:03.006 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:03.006 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:03.006 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.006 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.006 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.006 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 6  Name: col_serial Type: SERIAL Attribute:   Length: 10 Precision: 10 Scale: 0  Definition: SERIAL(10,0) 
2014-11-20 17:29:03.006 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 6  Name: col_serial Type: INTEGER Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: INTEGER 
2014-11-20 17:29:03.006 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_numeric
2014-11-20 17:29:03.007 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.007 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.007 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.007 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DECIMAL
2014-11-20 17:29:03.007 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.007 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DECIMAL
2014-11-20 17:29:03.008 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DECIMAL
2014-11-20 17:29:03.008 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NUMERIC
2014-11-20 17:29:03.009 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = NUMERIC
2014-11-20 17:29:03.009 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = NUMERIC
2014-11-20 17:29:03.009 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 32
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE SCALE OPTION = true
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 31
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = true
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision) AND scale
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 7  Name: col_numeric Type: DECIMAL Attribute:   Length: 32 Precision: 32 Scale: 8  Definition: DECIMAL(32,8) 
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 7  Name: col_numeric Type: NUMERIC Attribute:   Length: 31 Precision: 31 Scale: 8  Definition: NUMERIC(31,8) 
2014-11-20 17:29:03.010 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_dec
2014-11-20 17:29:03.011 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.011 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.011 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.011 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DECIMAL
2014-11-20 17:29:03.011 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.011 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DECIMAL
2014-11-20 17:29:03.012 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DECIMAL
2014-11-20 17:29:03.012 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NUMERIC
2014-11-20 17:29:03.013 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = NUMERIC
2014-11-20 17:29:03.013 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = NUMERIC
2014-11-20 17:29:03.013 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 16
2014-11-20 17:29:03.013 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.015 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE SCALE OPTION = true
2014-11-20 17:29:03.015 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.015 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 31
2014-11-20 17:29:03.016 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.016 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = true
2014-11-20 17:29:03.016 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.016 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision) AND scale
2014-11-20 17:29:03.016 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.016 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 8  Name: col_dec Type: DECIMAL Attribute:   Length: 16 Precision: 16 Scale: 255  Definition: DECIMAL(16,255) 
2014-11-20 17:29:03.016 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 8  Name: col_dec Type: NUMERIC Attribute:   Length: 16 Precision: 16 Scale: 16  Definition: NUMERIC(16,16) 
2014-11-20 17:29:03.016 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_decimal
2014-11-20 17:29:03.016 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.016 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.017 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.017 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DECIMAL
2014-11-20 17:29:03.017 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.019 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DECIMAL
2014-11-20 17:29:03.020 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DECIMAL
2014-11-20 17:29:03.020 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NUMERIC
2014-11-20 17:29:03.021 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = NUMERIC
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = NUMERIC
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 27
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE SCALE OPTION = true
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 31
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = true
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision) AND scale
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.022 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 9  Name: col_decimal Type: DECIMAL Attribute:   Length: 27 Precision: 27 Scale: 2  Definition: DECIMAL(27,2) 
2014-11-20 17:29:03.023 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 9  Name: col_decimal Type: NUMERIC Attribute:   Length: 27 Precision: 27 Scale: 2  Definition: NUMERIC(27,2) 
2014-11-20 17:29:03.023 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_money
2014-11-20 17:29:03.023 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.023 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.023 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.024 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = MONEY
2014-11-20 17:29:03.024 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.024 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = MONEY
2014-11-20 17:29:03.025 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = MONEY
2014-11-20 17:29:03.025 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BIGINT
2014-11-20 17:29:03.026 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BIGINT
2014-11-20 17:29:03.026 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BIGINT
2014-11-20 17:29:03.026 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 26
2014-11-20 17:29:03.026 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:03.027 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:03.027 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.027 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.027 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.027 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 10  Name: col_money Type: MONEY Attribute:   Length: 26 Precision: 26 Scale: 8  Definition: MONEY(26,8) 
2014-11-20 17:29:03.027 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 10  Name: col_money Type: BIGINT Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: BIGINT 
2014-11-20 17:29:03.028 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_real
2014-11-20 17:29:03.028 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.028 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.028 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.028 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = SMALLFLOAT
2014-11-20 17:29:03.028 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.029 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = SMALLFLOAT
2014-11-20 17:29:03.030 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = SMALLFLOAT
2014-11-20 17:29:03.031 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = FLOAT
2014-11-20 17:29:03.032 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.032 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.032 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = DOUBLE
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = DOUBLE
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 7
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 11  Name: col_real Type: SMALLFLOAT Attribute:   Length: 7 Precision: 7 Scale: 0  Definition: SMALLFLOAT(7,0) 
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 11  Name: col_real Type: DOUBLE Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: DOUBLE 
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_smallfloat
2014-11-20 17:29:03.033 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.033 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.033 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = SMALLFLOAT
2014-11-20 17:29:03.034 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.034 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = SMALLFLOAT
2014-11-20 17:29:03.035 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = SMALLFLOAT
2014-11-20 17:29:03.035 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = FLOAT
2014-11-20 17:29:03.035 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.035 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.036 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = DOUBLE
2014-11-20 17:29:03.036 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = DOUBLE
2014-11-20 17:29:03.036 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 7
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 12  Name: col_smallfloat Type: SMALLFLOAT Attribute:   Length: 7 Precision: 7 Scale: 0  Definition: SMALLFLOAT(7,0) 
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 12  Name: col_smallfloat Type: DOUBLE Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: DOUBLE 
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_float
2014-11-20 17:29:03.037 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.037 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = FLOAT
2014-11-20 17:29:03.037 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = FLOAT
2014-11-20 17:29:03.039 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = FLOAT
2014-11-20 17:29:03.039 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = FLOAT
2014-11-20 17:29:03.039 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.039 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.040 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = DOUBLE
2014-11-20 17:29:03.040 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = DOUBLE
2014-11-20 17:29:03.040 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 17
2014-11-20 17:29:03.040 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:03.040 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:03.040 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.040 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.041 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.041 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 13  Name: col_float Type: FLOAT Attribute:   Length: 17 Precision: 17 Scale: 0  Definition: FLOAT(17,0) 
2014-11-20 17:29:03.041 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 13  Name: col_float Type: DOUBLE Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: DOUBLE 
2014-11-20 17:29:03.042 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_double
2014-11-20 17:29:03.042 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.042 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.042 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.042 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = FLOAT
2014-11-20 17:29:03.042 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.042 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = FLOAT
2014-11-20 17:29:03.043 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = FLOAT
2014-11-20 17:29:03.044 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = FLOAT
2014-11-20 17:29:03.044 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.044 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.044 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = DOUBLE
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = DOUBLE
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 17
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 14  Name: col_double Type: FLOAT Attribute:   Length: 17 Precision: 17 Scale: 0  Definition: FLOAT(17,0) 
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 14  Name: col_double Type: DOUBLE Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: DOUBLE 
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_char
2014-11-20 17:29:03.045 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.045 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.045 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = CHAR
2014-11-20 17:29:03.046 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.046 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = CHAR
2014-11-20 17:29:03.047 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = CHAR
2014-11-20 17:29:03.048 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = VARCHAR
2014-11-20 17:29:03.048 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.048 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.048 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:29:03.048 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:29:03.048 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 15  Name: col_char Type: CHAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: CHAR(255,0) 
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 15  Name: col_char Type: VARCHAR Attribute:   Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) 
2014-11-20 17:29:03.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_varchar
2014-11-20 17:29:03.050 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.050 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.050 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.050 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = VARCHAR
2014-11-20 17:29:03.050 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.051 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = VARCHAR
2014-11-20 17:29:03.052 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = VARCHAR
2014-11-20 17:29:03.052 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = VARCHAR
2014-11-20 17:29:03.052 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.052 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.052 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 16  Name: col_varchar Type: VARCHAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: VARCHAR(255,0) 
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 16  Name: col_varchar Type: VARCHAR Attribute:   Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) 
2014-11-20 17:29:03.053 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_lvarchar
2014-11-20 17:29:03.053 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.053 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.054 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.054 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = LVARCHAR
2014-11-20 17:29:03.054 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.054 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = LVARCHAR
2014-11-20 17:29:03.055 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = LVARCHAR
2014-11-20 17:29:03.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NVARCHAR
2014-11-20 17:29:03.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:29:03.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:29:03.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 6000
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 17  Name: col_lvarchar Type: LVARCHAR Attribute:   Length: 6000 Precision: 6000 Scale: 0  Definition: LVARCHAR(6000,0) 
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 17  Name: col_lvarchar Type: VARCHAR Attribute:   Length: 6000 Precision: 0 Scale: 0  Definition: VARCHAR(6000) 
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_nchar
2014-11-20 17:29:03.057 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.057 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = NCHAR
2014-11-20 17:29:03.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.058 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = NCHAR
2014-11-20 17:29:03.058 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = NCHAR
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NVARCHAR
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 18  Name: col_nchar Type: NCHAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: NCHAR(255,0) 
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 18  Name: col_nchar Type: VARCHAR Attribute:   Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) 
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_nvarchar
2014-11-20 17:29:03.060 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.060 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = NVARCHAR
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.060 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = NVARCHAR
2014-11-20 17:29:03.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = NVARCHAR
2014-11-20 17:29:03.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NVARCHAR
2014-11-20 17:29:03.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:29:03.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:29:03.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 19  Name: col_nvarchar Type: NVARCHAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: NVARCHAR(255,0) 
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 19  Name: col_nvarchar Type: VARCHAR Attribute:   Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) 
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_text
2014-11-20 17:29:03.062 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.062 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = TEXT
2014-11-20 17:29:03.063 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.063 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = TEXT
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = TEXT
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NCLOB
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = CLOB
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = CLOB
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 2147483647
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 215741641
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length to max allowed!
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 20  Name: col_text Type: TEXT Attribute:   Length: 2147483647 Precision: 2147483647 Scale: 0  Definition: TEXT(2147483647,0) 
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 20  Name: col_text Type: CLOB Attribute:   Length: 215741641 Precision: 0 Scale: 0  Definition: CLOB(215741641) 
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_clob
2014-11-20 17:29:03.065 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.065 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = CLOB
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = CLOB
2014-11-20 17:29:03.066 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = CLOB
2014-11-20 17:29:03.066 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = CLOB
2014-11-20 17:29:03.066 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = CLOB
2014-11-20 17:29:03.066 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = CLOB
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 2147483647
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 215741641
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length to max allowed!
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 21  Name: col_clob Type: CLOB Attribute:   Length: 2147483647 Precision: 2147483647 Scale: 0  Definition: CLOB(2147483647,0) 
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 21  Name: col_clob Type: CLOB Attribute:   Length: 215741641 Precision: 0 Scale: 0  Definition: CLOB(215741641) 
2014-11-20 17:29:03.067 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_binary18
2014-11-20 17:29:03.067 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.068 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.068 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.068 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BINARY18
2014-11-20 17:29:03.068 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.068 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BINARY18
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BINARY18
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = VARBINARY
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT TARGET TYPE ATTRIBUTE = FOR BIT DATA
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 18
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 22  Name: col_binary18 Type: BINARY18 Attribute:   Length: 18 Precision: 18 Scale: 0  Definition: BINARY18(18,0) 
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 22  Name: col_binary18 Type: VARCHAR Attribute: FOR BIT DATA  Length: 18 Precision: 0 Scale: 0  Definition: VARCHAR(18) FOR BIT DATA
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_binaryvar
2014-11-20 17:29:03.070 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.070 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BINARYVAR
2014-11-20 17:29:03.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.071 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BINARYVAR
2014-11-20 17:29:03.071 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BINARYVAR
2014-11-20 17:29:03.071 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = VARBINARY
2014-11-20 17:29:03.071 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.071 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT TARGET TYPE ATTRIBUTE = FOR BIT DATA
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 23  Name: col_binaryvar Type: BINARYVAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: BINARYVAR(255,0) 
2014-11-20 17:29:03.072 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 23  Name: col_binaryvar Type: VARCHAR Attribute: FOR BIT DATA  Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) FOR BIT DATA
2014-11-20 17:29:03.073 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_byte
2014-11-20 17:29:03.073 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.073 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.073 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BYTE
2014-11-20 17:29:03.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BYTE
2014-11-20 17:29:03.074 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BYTE
2014-11-20 17:29:03.074 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BLOB
2014-11-20 17:29:03.074 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BLOB
2014-11-20 17:29:03.074 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BLOB
2014-11-20 17:29:03.074 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 2147483647
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 215741641
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length to max allowed!
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 24  Name: col_byte Type: BYTE Attribute:   Length: 2147483647 Precision: 2147483647 Scale: 0  Definition: BYTE(2147483647,0) 
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 24  Name: col_byte Type: BLOB Attribute:   Length: 215741641 Precision: 0 Scale: 0  Definition: BLOB(215741641) 
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_blob
2014-11-20 17:29:03.075 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.075 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BLOB
2014-11-20 17:29:03.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.076 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BLOB
2014-11-20 17:29:03.076 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BLOB
2014-11-20 17:29:03.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BLOB
2014-11-20 17:29:03.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BLOB
2014-11-20 17:29:03.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BLOB
2014-11-20 17:29:03.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 2147483647
2014-11-20 17:29:03.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:29:03.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 215741641
2014-11-20 17:29:03.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length to max allowed!
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 25  Name: col_blob Type: BLOB Attribute:   Length: 2147483647 Precision: 2147483647 Scale: 0  Definition: BLOB(2147483647,0) 
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 25  Name: col_blob Type: BLOB Attribute:   Length: 215741641 Precision: 0 Scale: 0  Definition: BLOB(215741641) 
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_date
2014-11-20 17:29:03.078 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.078 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DATE
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.078 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DATE
2014-11-20 17:29:03.079 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DATE
2014-11-20 17:29:03.079 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = DATETIME
2014-11-20 17:29:03.079 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.079 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.079 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = TIMESTAMP
2014-11-20 17:29:03.079 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = TIMESTAMP
2014-11-20 17:29:03.079 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 10
2014-11-20 17:29:03.079 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 26  Name: col_date Type: DATE Attribute:   Length: 10 Precision: 10 Scale: 0  Definition: DATE(10,0) 
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 26  Name: col_date Type: TIMESTAMP Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: TIMESTAMP 
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_datetime
2014-11-20 17:29:03.080 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.080 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DATETIME
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DATETIME
2014-11-20 17:29:03.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DATETIME
2014-11-20 17:29:03.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = DATETIME
2014-11-20 17:29:03.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:29:03.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:29:03.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = TIMESTAMP
2014-11-20 17:29:03.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = TIMESTAMP
2014-11-20 17:29:03.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 23
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 27  Name: col_datetime Type: DATETIME Attribute:   Length: 23 Precision: 23 Scale: 0  Definition: DATETIME(23,0) 
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 27  Name: col_datetime Type: TIMESTAMP Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: TIMESTAMP 
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_intervalym
2014-11-20 17:29:03.082 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.082 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INTERVAL
2014-11-20 17:29:03.082 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.083 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = 
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Type conhversion not supported
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 28  Name: col_intervalym Type: INTERVAL Attribute:   Length: 1538 Precision: 1538 Scale: 0  Definition: INTERVAL(1538,0) 
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 28  Name: col_intervalym Type:  Attribute:   Length: 1538 Precision: 0 Scale: 0  Definition: 
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_intervalds
2014-11-20 17:29:03.084 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:29:03.084 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INTERVAL
2014-11-20 17:29:03.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:29:03.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = 
2014-11-20 17:29:03.086 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:29:03.086 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:29:03.090 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:29:03.090 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:29:03.090 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:29:03.090 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Type conhversion not supported
2014-11-20 17:29:03.090 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:29:03.090 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 29  Name: col_intervalds Type: INTERVAL Attribute:   Length: 2893 Precision: 2893 Scale: 0  Definition: INTERVAL(2893,0) 
2014-11-20 17:29:03.090 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 29  Name: col_intervalds Type:  Attribute:   Length: 2893 Precision: 0 Scale: 0  Definition: 
2014-11-20 17:29:03.090 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - ########################################
2014-11-20 17:29:03.090 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - CREATING TABLE
2014-11-20 17:29:03.091 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Schema: TEST
2014-11-20 17:29:03.317 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_DB2_TAB_TEST
2014-11-20 17:29:03.317 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_DERBY_TAB_TEST
2014-11-20 17:29:03.317 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_EXASOL_TAB_TEST
2014-11-20 17:29:03.317 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_FIREBIRD_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_H2_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_HDB_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_HIVE_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_HSQL_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_IFX_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Table exists
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_IMPALA_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_MYSQL_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_NETEZZA_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_ORACLE_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_POSTGRE_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_SQLANY_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_SQLSERVER_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_TERADATA_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_VERTICA_TAB_TEST
2014-11-20 17:29:03.318 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.TAB_TEST
2014-11-20 17:29:03.321 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Drop table if it exists: true
2014-11-20 17:29:03.321 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Table exists:            true
2014-11-20 17:29:03.321 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Drop table
2014-11-20 17:29:03.321 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Drop statement:
DROP TABLE test.stg_ifx_tab_test
2014-11-20 17:29:03.524 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Table dropped
2014-11-20 17:29:03.524 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Create table
2014-11-20 17:29:03.524 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Column: col_intervalym type non supported
2014-11-20 17:29:03.524 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Column: col_intervalds type non supported
2014-11-20 17:29:03.524 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Creation statement:
CREATE TABLE test.stg_ifx_tab_test(col_boolean BOOLEAN ,col_int8 BIGINT ,col_smallint SMALLINT ,col_int INTEGER ,col_integer INTEGER ,col_bigint BIGINT ,col_serial INTEGER ,col_numeric NUMERIC(31,8) ,col_dec NUMERIC(16,16) ,col_decimal NUMERIC(27,2) ,col_money BIGINT ,col_real DOUBLE ,col_smallfloat DOUBLE ,col_float DOUBLE ,col_double DOUBLE ,col_char VARCHAR(255) ,col_varchar VARCHAR(255) ,col_lvarchar VARCHAR(6000) ,col_nchar VARCHAR(255) ,col_nvarchar VARCHAR(255) ,col_text CLOB(215741641) ,col_clob CLOB(215741641) ,col_binary18 VARCHAR(18) FOR BIT DATA,col_binaryvar VARCHAR(255) FOR BIT DATA,col_byte BLOB(215741641) ,col_blob BLOB(215741641) ,col_date TIMESTAMP ,col_datetime TIMESTAMP )
2014-11-20 17:29:03.664 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Table created
2014-11-20 17:29:03.665 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - ########################################
2014-11-20 17:29:03.665 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 17:29:03.667 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 17:29:03.667 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:29:03.667 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_derby_dwhdev_test
2014-11-20 17:29:03.668 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:29:03.675 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:derby://localhost:55000/dwhdev;create=false
2014-11-20 17:29:03.676 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:29:03.676 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: Apache Derby
2014-11-20 17:29:03.677 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:29:03.696 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEALIAS,BIGINT,BOOLEAN,CALL,CLASS,COPY,DB2J_DEBUG,EXECUTE,EXPLAIN,FILE,FILTER,GETCURRENTCONNECTION,INDEX,INSTANCEOF,METHOD,NEW,OFF,PROPERTIES,RECOMPILE,RENAME,RUNTIMESTATISTICS,STATEMENT,STATISTICS,TIMING,WAIT
2014-11-20 17:29:03.697 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:29:03.697 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string: "
2014-11-20 17:29:03.697 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:29:03.697 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 0
2014-11-20 17:29:03.697 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:29:03.697 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:29:03.703 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:29:03.703 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:29:03.711 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - APP
2014-11-20 17:29:03.711 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHSTAGE
2014-11-20 17:29:03.711 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NULLID
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SQLJ
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYS
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCAT
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCS_DIAG
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCS_UTIL
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSFUN
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBM
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPROC
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSSTAT
2014-11-20 17:29:03.712 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST
2014-11-20 17:29:03.713 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:29:03.713 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:29:03.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BIGINT null
2014-11-20 17:29:03.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR FOR BIT DATA null
2014-11-20 17:29:03.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR () FOR BIT DATA length
2014-11-20 17:29:03.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR () FOR BIT DATA length
2014-11-20 17:29:03.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR null
2014-11-20 17:29:03.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR length
2014-11-20 17:29:03.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NUMERIC precision,scale
2014-11-20 17:29:03.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECIMAL precision,scale
2014-11-20 17:29:03.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - INTEGER null
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SMALLINT null
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - FLOAT precision
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REAL null
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DOUBLE null
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR length
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BOOLEAN null
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DATE null
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIME null
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIMESTAMP null
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - OBJECT null
2014-11-20 17:29:03.770 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BLOB length
2014-11-20 17:29:03.771 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CLOB length
2014-11-20 17:29:03.771 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - XML null
2014-11-20 17:29:03.772 [main] INFO  org.openbusinessintelligence.cli.Main - Feeding table: tab_test
2014-11-20 17:29:03.775 [main] DEBUG org.openbusinessintelligence.cli.Main - trgpreservedata: No such option
2014-11-20 17:29:03.775 [main] DEBUG org.openbusinessintelligence.cli.Main - mapdeffile: No such option
2014-11-20 17:29:03.775 [main] DEBUG org.openbusinessintelligence.cli.Main - commitfrequency: No such option
2014-11-20 17:29:03.775 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:29:03.775 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - RETRIEVING COLUMN LIST...
2014-11-20 17:29:03.776 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - Source schema: null - Source table: tab_test
2014-11-20 17:29:03.776 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Getting columns for source...
2014-11-20 17:29:03.776 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Source RDBMS product: Informix Dynamic Server
2014-11-20 17:29:03.776 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Default schema: null
2014-11-20 17:29:03.776 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Table schema: null
2014-11-20 17:29:03.776 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Prefix for source table: 
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 0 Name: col_boolean Type: BOOLEAN Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:16
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 1 Name: col_int8 Type: INT8 Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 2 Name: col_smallint Type: SMALLINT Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:5
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 3 Name: col_int Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 4 Name: col_integer Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 5 Name: col_bigint Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 6 Name: col_serial Type: SERIAL Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 7 Name: col_numeric Type: DECIMAL Length: 32 Precision: 32 Scale: 8 Attribute:  JDBC Type:3
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 8 Name: col_dec Type: DECIMAL Length: 16 Precision: 16 Scale: 255 Attribute:  JDBC Type:3
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 9 Name: col_decimal Type: DECIMAL Length: 27 Precision: 27 Scale: 2 Attribute:  JDBC Type:3
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 10 Name: col_money Type: MONEY Length: 26 Precision: 26 Scale: 8 Attribute:  JDBC Type:3
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 11 Name: col_real Type: SMALLFLOAT Length: 7 Precision: 7 Scale: 0 Attribute:  JDBC Type:7
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 12 Name: col_smallfloat Type: SMALLFLOAT Length: 7 Precision: 7 Scale: 0 Attribute:  JDBC Type:7
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 13 Name: col_float Type: FLOAT Length: 17 Precision: 17 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 14 Name: col_double Type: FLOAT Length: 17 Precision: 17 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 15 Name: col_char Type: CHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 16 Name: col_varchar Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 17 Name: col_lvarchar Type: LVARCHAR Length: 6000 Precision: 6000 Scale: 0 Attribute:  JDBC Type:-1
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 18 Name: col_nchar Type: NCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 19 Name: col_nvarchar Type: NVARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 20 Name: col_text Type: TEXT Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 21 Name: col_clob Type: CLOB Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 22 Name: col_binary18 Type: BINARY18 Length: 18 Precision: 18 Scale: 0 Attribute:  JDBC Type:0
2014-11-20 17:29:03.831 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 23 Name: col_binaryvar Type: BINARYVAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:-1
2014-11-20 17:29:03.832 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 24 Name: col_byte Type: BYTE Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:29:03.832 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 25 Name: col_blob Type: BLOB Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:29:03.832 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 26 Name: col_date Type: DATE Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:91
2014-11-20 17:29:03.832 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 27 Name: col_datetime Type: DATETIME Length: 23 Precision: 23 Scale: 0 Attribute:  JDBC Type:93
2014-11-20 17:29:03.832 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 28 Name: col_intervalym Type: INTERVAL Length: 1538 Precision: 1538 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:29:03.832 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 29 Name: col_intervalds Type: INTERVAL Length: 2893 Precision: 2893 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:29:03.832 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got column properties
2014-11-20 17:29:03.832 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - getting pk properties
2014-11-20 17:29:03.832 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - get primary key information...
2014-11-20 17:29:03.832 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Table: tab_test
2014-11-20 17:29:03.841 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got pk properties
2014-11-20 17:29:03.841 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got primary key information
2014-11-20 17:29:03.841 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - Target schema: test - Target table: stg_ifx_tab_test
2014-11-20 17:29:03.841 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Getting columns for source...
2014-11-20 17:29:03.841 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Source RDBMS product: Apache Derby
2014-11-20 17:29:03.841 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Default schema: 
2014-11-20 17:29:03.841 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Table schema: test
2014-11-20 17:29:03.841 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Prefix for source table: test.
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 0 Name: COL_BOOLEAN Type: BOOLEAN Length: 1 Precision: 1 Scale: 0 Attribute:  JDBC Type:16
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 1 Name: COL_INT8 Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 2 Name: COL_SMALLINT Type: SMALLINT Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:5
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 3 Name: COL_INT Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 4 Name: COL_INTEGER Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 5 Name: COL_BIGINT Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 6 Name: COL_SERIAL Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 7 Name: COL_NUMERIC Type: NUMERIC Length: 31 Precision: 31 Scale: 8 Attribute:  JDBC Type:2
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 8 Name: COL_DEC Type: NUMERIC Length: 16 Precision: 16 Scale: 16 Attribute:  JDBC Type:2
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 9 Name: COL_DECIMAL Type: NUMERIC Length: 27 Precision: 27 Scale: 2 Attribute:  JDBC Type:2
2014-11-20 17:29:03.906 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 10 Name: COL_MONEY Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 11 Name: COL_REAL Type: DOUBLE Length: 52 Precision: 52 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 12 Name: COL_SMALLFLOAT Type: DOUBLE Length: 52 Precision: 52 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 13 Name: COL_FLOAT Type: DOUBLE Length: 52 Precision: 52 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 14 Name: COL_DOUBLE Type: DOUBLE Length: 52 Precision: 52 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 15 Name: COL_CHAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 16 Name: COL_VARCHAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 17 Name: COL_LVARCHAR Type: VARCHAR Length: 6000 Precision: 6000 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 18 Name: COL_NCHAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 19 Name: COL_NVARCHAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 20 Name: COL_TEXT Type: CLOB Length: 215741641 Precision: 215741641 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 21 Name: COL_CLOB Type: CLOB Length: 215741641 Precision: 215741641 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 22 Name: COL_BINARY18 Type: VARCHAR Length: 18 Precision: 18 Scale: 0 Attribute: FOR BIT DATA JDBC Type:-3
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 23 Name: COL_BINARYVAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute: FOR BIT DATA JDBC Type:-3
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 24 Name: COL_BYTE Type: BLOB Length: 215741641 Precision: 215741641 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 25 Name: COL_BLOB Type: BLOB Length: 215741641 Precision: 215741641 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 26 Name: COL_DATE Type: TIMESTAMP Length: 29 Precision: 29 Scale: 9 Attribute:  JDBC Type:93
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 27 Name: COL_DATETIME Type: TIMESTAMP Length: 29 Precision: 29 Scale: 9 Attribute:  JDBC Type:93
2014-11-20 17:29:03.907 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got column properties
2014-11-20 17:29:03.907 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - getting pk properties
2014-11-20 17:29:03.907 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - get primary key information...
2014-11-20 17:29:03.907 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Table: stg_ifx_tab_test
2014-11-20 17:29:03.950 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got pk properties
2014-11-20 17:29:03.950 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got primary key information
2014-11-20 17:29:03.953 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - COLUMN LIST RETRIEVED
2014-11-20 17:29:03.953 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:29:03.953 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:29:03.953 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - GETTING DATA
2014-11-20 17:29:03.953 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BOOLEAN
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INT8
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SMALLINT
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INT
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INTEGER
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BIGINT
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SERIAL
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NUMERIC
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DEC
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DECIMAL
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_MONEY
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_REAL
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SMALLFLOAT
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_FLOAT
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DOUBLE
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_CHAR
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_CHAR
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_VARCHAR
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_LVARCHAR
2014-11-20 17:29:03.954 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NCHAR
2014-11-20 17:29:03.955 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NCHAR
2014-11-20 17:29:03.955 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NVARCHAR
2014-11-20 17:29:03.955 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BINARY18
2014-11-20 17:29:03.955 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BINARYVAR
2014-11-20 17:29:03.955 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DATE
2014-11-20 17:29:03.955 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DATETIME
2014-11-20 17:29:03.955 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting complete identifier for object tab_test
2014-11-20 17:29:03.955 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - SELECT COL_BOOLEAN,COL_INT8,COL_SMALLINT,COL_INT,COL_INTEGER,COL_BIGINT,COL_SERIAL,COL_NUMERIC,COL_DEC,COL_DECIMAL,COL_MONEY,COL_REAL,COL_SMALLFLOAT,COL_FLOAT,COL_DOUBLE,TRIM(TRAILING FROM COL_CHAR) AS COL_CHAR,COL_VARCHAR,COL_LVARCHAR,TRIM(TRAILING FROM COL_NCHAR) AS COL_NCHAR,COL_NVARCHAR,COL_BINARY18,COL_BINARYVAR,COL_DATE,COL_DATETIME FROM tab_test
2014-11-20 17:29:03.992 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - DATA READY
2014-11-20 17:29:03.993 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - GOT DATA
2014-11-20 17:29:03.993 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:29:03.993 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:29:03.993 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - INSERTING DATA...
2014-11-20 17:29:03.993 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - Preserve target data = false
2014-11-20 17:29:03.993 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - Truncate table
2014-11-20 17:29:03.993 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - TRUNCATE TABLE test.stg_ifx_tab_test
2014-11-20 17:29:04.049 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - Table truncated
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BOOLEAN
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INT8
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SMALLINT
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INT
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INTEGER
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BIGINT
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SERIAL
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NUMERIC
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DEC
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DECIMAL
2014-11-20 17:29:04.049 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_MONEY
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_REAL
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SMALLFLOAT
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_FLOAT
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DOUBLE
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_CHAR
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_VARCHAR
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_LVARCHAR
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NCHAR
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NVARCHAR
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BINARY18
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BINARYVAR
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DATE
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DATETIME
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - INSERT INTO test.stg_ifx_tab_test (COL_BOOLEAN,COL_INT8,COL_SMALLINT,COL_INT,COL_INTEGER,COL_BIGINT,COL_SERIAL,COL_NUMERIC,COL_DEC,COL_DECIMAL,COL_MONEY,COL_REAL,COL_SMALLFLOAT,COL_FLOAT,COL_DOUBLE,COL_CHAR,COL_VARCHAR,COL_LVARCHAR,COL_NCHAR,COL_NVARCHAR,COL_BINARY18,COL_BINARYVAR,COL_DATE,COL_DATETIME) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,RTRIM(?),?,?,RTRIM(?),?,?,?,?,?)
2014-11-20 17:29:04.050 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - Statement prepared
2014-11-20 17:29:04.050 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - Commit every 0 rows
2014-11-20 17:29:04.204 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - 10 rows totally inserted
2014-11-20 17:29:04.204 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - INSERT COMPLETED
2014-11-20 17:29:04.204 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:29:04.204 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 17:29:04.206 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 17:29:04.206 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 17:29:04.207 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 17:29:04.208 [main] INFO  org.openbusinessintelligence.cli.Main - FINISH
2014-11-20 17:29:04.208 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:34:19.867 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:34:19.869 [main] INFO  org.openbusinessintelligence.cli.Main - START
2014-11-20 17:34:19.869 [main] INFO  org.openbusinessintelligence.cli.Main - Configure command line options
2014-11-20 17:34:19.900 [main] INFO  org.openbusinessintelligence.cli.Main - Options configured
2014-11-20 17:34:19.905 [main] INFO  org.openbusinessintelligence.cli.Main - Get database properties
2014-11-20 17:34:19.909 [main] DEBUG org.openbusinessintelligence.cli.Main - dbdriverclass: No such option
2014-11-20 17:34:19.910 [main] DEBUG org.openbusinessintelligence.cli.Main - dbconnectionurl: No such option
2014-11-20 17:34:19.910 [main] DEBUG org.openbusinessintelligence.cli.Main - dbusername: No such option
2014-11-20 17:34:19.910 [main] DEBUG org.openbusinessintelligence.cli.Main - dbpassword: No such option
2014-11-20 17:34:19.910 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:34:19.910 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_hana_01_dwh_stage
2014-11-20 17:34:19.911 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - databaseDriver = com.sap.db.jdbc.Driver
2014-11-20 17:34:19.911 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - connectionURL = jdbc:sap://localhost:30115
2014-11-20 17:34:19.944 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:34:20.223 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:sap://localhost:30115
2014-11-20 17:34:20.223 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:34:20.226 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: HDB
2014-11-20 17:34:20.237 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:34:20.238 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEALL,ALTER,AS,BEFORE,BEGIN,BOTH,CASE,CHAR,CONDITION,CONNECT,CROSS,CUBE,CURRENT_CONNECTION,CURRENT_DATE,CURRENT_SCHEMA,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURRENT_UTCDATE,CURRENT_UTCTIME,CURRENT_UTCTIMESTAMP,CURRVAL,CURSOR,DECLARE,DISTINCT,ELSE,ELSEIF,ELSIF,END,EXCEPT,EXCEPTION,EXEC,FOR,FROM,FULL,GROUP,HAVING,IF,IN,INNER,INOUT,INTERSECT,INTO,IS,JOIN,LEADING,LEFT,LIMIT,LOOP,MINUS,NATURAL,NEXTVAL,NULL,ON,ORDER,OUT,PRIOR,RETURN,RETURNS,REVERSE,RIGHT,ROLLUP,ROWID,SELECT,SET,SQL,START,SYSDATE,SYSTIME,SYSTIMESTAMP,SYSUUID,TOP,TRAILING,UNION,USING,UTCDATE,UTCTIME,UTCTIMESTAMP,VALUES,WHEN,WHERE,WHILE,WITH
2014-11-20 17:34:20.238 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:34:20.239 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string: "
2014-11-20 17:34:20.239 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:34:20.239 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 0
2014-11-20 17:34:20.239 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:34:20.239 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:34:20.243 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:34:20.244 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:34:20.273 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ABGABEGRUND
2014-11-20 17:34:20.273 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ACQUAHH
2014-11-20 17:34:20.273 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ADAMOWII
2014-11-20 17:34:20.273 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - AFMUSER
2014-11-20 17:34:20.273 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - AFR
2014-11-20 17:34:20.274 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ALG
2014-11-20 17:34:20.274 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ALG_S1
2014-11-20 17:34:20.274 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - AMBEL
2014-11-20 17:34:20.274 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ARNDTCH
2014-11-20 17:34:20.274 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BARTHSE
2014-11-20 17:34:20.274 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BAUMANNM
2014-11-20 17:34:20.275 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BISDXCSCHEMA
2014-11-20 17:34:20.275 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DANKWORO
2014-11-20 17:34:20.275 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DBACOCKPIT
2014-11-20 17:34:20.275 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DURSUNC
2014-11-20 17:34:20.275 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWH_REPORT
2014-11-20 17:34:20.275 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWH_STAGE
2014-11-20 17:34:20.275 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWH_TEST
2014-11-20 17:34:20.275 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DXCUSER
2014-11-20 17:34:20.275 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - EISSINGM
2014-11-20 17:34:20.276 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ERTLET
2014-11-20 17:34:20.276 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - FRITAHA
2014-11-20 17:34:20.276 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - GERBERM
2014-11-20 17:34:20.276 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - GROUP_7
2014-11-20 17:34:20.276 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - GUERRAS
2014-11-20 17:34:20.276 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - GUEST_GBL
2014-11-20 17:34:20.276 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - GUEST_TRAINING
2014-11-20 17:34:20.277 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - HANADEMO
2014-11-20 17:34:20.277 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - HANADEV
2014-11-20 17:34:20.277 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - HANA_TRAINING
2014-11-20 17:34:20.277 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - HANA_WOKRSHOPX_00
2014-11-20 17:34:20.277 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - HANA_WORKSHOPX_00
2014-11-20 17:34:20.280 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - HANA_WORKSHOP_00
2014-11-20 17:34:20.281 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - HEINF
2014-11-20 17:34:20.281 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - HIDREPOBI41
2014-11-20 17:34:20.281 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - HIDREPODS41
2014-11-20 17:34:20.281 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - INA_EPM_DEMO
2014-11-20 17:34:20.281 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - JUELKEG
2014-11-20 17:34:20.282 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - KAZLOVAE
2014-11-20 17:34:20.282 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - KESKINSS
2014-11-20 17:34:20.282 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - KIMMICHS
2014-11-20 17:34:20.282 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - KLINGLSD
2014-11-20 17:34:20.282 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LEVINC
2014-11-20 17:34:20.282 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LIBERDAE
2014-11-20 17:34:20.283 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MARANGONIN
2014-11-20 17:34:20.283 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MORGENSTERNK
2014-11-20 17:34:20.283 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MSG_DEMO_PA
2014-11-20 17:34:20.283 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MSG_HANA_SHOWCASES
2014-11-20 17:34:20.283 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MSG_HANA_SHOWCASES_RI_PORTFOLIO_ANALYSIS
2014-11-20 17:34:20.284 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MSG_HANA_SHOWCASES_VERTRIEBSCOCKPIT
2014-11-20 17:34:20.284 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MSG_HANA_SHOWCASES_VERTRIEBSCOCKPIT_DESIGN_STUDIO
2014-11-20 17:34:20.284 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MUDRINICP
2014-11-20 17:34:20.284 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MUELLEMI
2014-11-20 17:34:20.284 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MYNEWSCHEMA
2014-11-20 17:34:20.285 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MYNEWSCHEMA01
2014-11-20 17:34:20.285 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MYNEWSCHEMA03
2014-11-20 17:34:20.286 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MYNEWSCHEMA04
2014-11-20 17:34:20.286 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MYNEWSCHEMAMG
2014-11-20 17:34:20.286 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - MYSCHEMA_GROUP8
2014-11-20 17:34:20.286 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NEIENSR
2014-11-20 17:34:20.287 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NELLP
2014-11-20 17:34:20.288 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NGASSINV
2014-11-20 17:34:20.289 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - OLAFD
2014-11-20 17:34:20.290 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - PAL
2014-11-20 17:34:20.290 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - PAL_POC
2014-11-20 17:34:20.290 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - PAL_TEST
2014-11-20 17:34:20.290 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - PIEUMEDC
2014-11-20 17:34:20.290 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - POHLS
2014-11-20 17:34:20.290 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_ALTICS
2014-11-20 17:34:20.290 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_BARTHSE
2014-11-20 17:34:20.290 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_CENTRAL
2014-11-20 17:34:20.291 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_GUERRAS
2014-11-20 17:34:20.291 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_JUELKEG
2014-11-20 17:34:20.291 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_MARANGON
2014-11-20 17:34:20.292 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_NELLP
2014-11-20 17:34:20.292 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_NEUNERG
2014-11-20 17:34:20.292 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_PIEUMEDC
2014-11-20 17:34:20.292 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_PROFILER
2014-11-20 17:34:20.292 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_SCHOLLM
2014-11-20 17:34:20.292 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_STRAESSA
2014-11-20 17:34:20.293 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_DS_WECKERM
2014-11-20 17:34:20.293 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REPO_IS_MAIN
2014-11-20 17:34:20.293 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - RI
2014-11-20 17:34:20.293 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - RI_SCHEMA
2014-11-20 17:34:20.293 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - RI_USER
2014-11-20 17:34:20.293 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ROESLERS
2014-11-20 17:34:20.293 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAKARYAG
2014-11-20 17:34:20.294 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAPBIH
2014-11-20 17:34:20.294 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAPFMD
2014-11-20 17:34:20.294 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAPSUPPORT
2014-11-20 17:34:20.294 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAP_HANA_ADMIN
2014-11-20 17:34:20.294 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAP_HANA_DEMO
2014-11-20 17:34:20.294 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAP_HANA_EPM_DEMO
2014-11-20 17:34:20.294 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAP_HANA_EPM_DEMO_COPY
2014-11-20 17:34:20.294 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAP_HANA_EPM_DEMO_COPY1
2014-11-20 17:34:20.294 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAP_INA_FILELOADER
2014-11-20 17:34:20.295 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAP_REST_API
2014-11-20 17:34:20.295 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAP_XS_LM
2014-11-20 17:34:20.295 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SAWADOGS
2014-11-20 17:34:20.296 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SCHEMA10
2014-11-20 17:34:20.297 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SCHEMA_CEM_05
2014-11-20 17:34:20.300 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SCHERUEBLK
2014-11-20 17:34:20.301 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SCHMIDIS
2014-11-20 17:34:20.301 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SCHROEDERT
2014-11-20 17:34:20.301 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SLT_BI1_HANA
2014-11-20 17:34:20.301 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SLT_CONFIG_D7B
2014-11-20 17:34:20.301 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SLT_TEST
2014-11-20 17:34:20.302 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SR1
2014-11-20 17:34:20.302 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - STIERLED
2014-11-20 17:34:20.302 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - STOEHRJ
2014-11-20 17:34:20.302 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - STRAESSA
2014-11-20 17:34:20.302 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUCHERR
2014-11-20 17:34:20.302 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM
2014-11-20 17:34:20.302 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYS
2014-11-20 17:34:20.303 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSTEM
2014-11-20 17:34:20.303 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYS_REPL
2014-11-20 17:34:20.303 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST
2014-11-20 17:34:20.303 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST_AUTH
2014-11-20 17:34:20.303 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST_RESTR
2014-11-20 17:34:20.303 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TRAINER
2014-11-20 17:34:20.303 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TRAIN_TEST
2014-11-20 17:34:20.304 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TRAIN_TEST_DK
2014-11-20 17:34:20.304 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TRANSPORTS
2014-11-20 17:34:20.304 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - UIS
2014-11-20 17:34:20.304 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_00
2014-11-20 17:34:20.305 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_03
2014-11-20 17:34:20.306 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_08
2014-11-20 17:34:20.306 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_AI
2014-11-20 17:34:20.306 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_DUR
2014-11-20 17:34:20.308 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_EK
2014-11-20 17:34:20.308 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_GJ
2014-11-20 17:34:20.308 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_KSC
2014-11-20 17:34:20.308 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_MRM
2014-11-20 17:34:20.308 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_MZ
2014-11-20 17:34:20.308 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_RN
2014-11-20 17:34:20.308 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_RS
2014-11-20 17:34:20.308 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - USER_TS
2014-11-20 17:34:20.309 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VONEHREN
2014-11-20 17:34:20.309 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - WECKERM
2014-11-20 17:34:20.309 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ZEIDLERM
2014-11-20 17:34:20.309 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_AFL
2014-11-20 17:34:20.309 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_AUDIT
2014-11-20 17:34:20.309 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_BI
2014-11-20 17:34:20.309 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_BIC
2014-11-20 17:34:20.309 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_DATAPROV
2014-11-20 17:34:20.310 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_EPM
2014-11-20 17:34:20.310 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_REPO
2014-11-20 17:34:20.310 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_RT
2014-11-20 17:34:20.310 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_SECURITY
2014-11-20 17:34:20.310 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_STATISTICS
2014-11-20 17:34:20.310 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - _SYS_XS
2014-11-20 17:34:20.310 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - transports
2014-11-20 17:34:20.310 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:34:20.310 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:34:20.336 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NCHAR length
2014-11-20 17:34:20.336 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ALPHANUM length
2014-11-20 17:34:20.336 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NVARCHAR length
2014-11-20 17:34:20.336 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SHORTTEXT length
2014-11-20 17:34:20.337 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TINYINT null
2014-11-20 17:34:20.337 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BIGINT null
2014-11-20 17:34:20.337 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARBINARY length
2014-11-20 17:34:20.337 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BINARY length
2014-11-20 17:34:20.337 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR length
2014-11-20 17:34:20.337 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECIMAL precision,scale
2014-11-20 17:34:20.337 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - INTEGER null
2014-11-20 17:34:20.344 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SMALLINT null
2014-11-20 17:34:20.344 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REAL null
2014-11-20 17:34:20.344 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DOUBLE null
2014-11-20 17:34:20.345 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR length
2014-11-20 17:34:20.345 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DATE null
2014-11-20 17:34:20.345 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIME null
2014-11-20 17:34:20.345 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SECONDDATE null
2014-11-20 17:34:20.345 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIMESTAMP null
2014-11-20 17:34:20.345 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BLOB null
2014-11-20 17:34:20.345 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ST_GEOMETRY null
2014-11-20 17:34:20.345 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ST_POINT null
2014-11-20 17:34:20.346 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ST_POINTZ null
2014-11-20 17:34:20.346 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CLOB null
2014-11-20 17:34:20.346 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BINTEXT null
2014-11-20 17:34:20.346 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NCLOB null
2014-11-20 17:34:20.346 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEXT null
2014-11-20 17:34:20.346 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SMALLDECIMAL precision,scale
2014-11-20 17:34:20.346 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 17:34:20.349 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 17:34:20.350 [main] INFO  org.openbusinessintelligence.cli.Main - Properties retrieved
2014-11-20 17:34:20.350 [main] INFO  org.openbusinessintelligence.cli.Main - FINISH
2014-11-20 17:34:20.350 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:34:49.590 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:34:49.593 [main] INFO  org.openbusinessintelligence.cli.Main - START
2014-11-20 17:34:49.593 [main] INFO  org.openbusinessintelligence.cli.Main - Configure command line options
2014-11-20 17:34:49.628 [main] INFO  org.openbusinessintelligence.cli.Main - Options configured
2014-11-20 17:34:49.638 [main] INFO  org.openbusinessintelligence.cli.Main - Generate random data in database tables
2014-11-20 17:34:49.660 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbconnkeywordfile: No such option
2014-11-20 17:34:49.661 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbdriverclass: No such option
2014-11-20 17:34:49.661 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbconnectionurl: No such option
2014-11-20 17:34:49.662 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbusername: No such option
2014-11-20 17:34:49.662 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbpassword: No such option
2014-11-20 17:34:49.662 [main] INFO  org.openbusinessintelligence.cli.Main - Connection prepared
2014-11-20 17:34:49.663 [main] INFO  org.openbusinessintelligence.cli.Main - Target schema: test
2014-11-20 17:34:49.663 [main] INFO  org.openbusinessintelligence.cli.Main - Target table: tab_test
2014-11-20 17:34:49.663 [main] INFO  org.openbusinessintelligence.cli.Main - Fill a single table
2014-11-20 17:34:49.663 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:34:49.664 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_db2_dwhdev_test
2014-11-20 17:34:49.665 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - databaseDriver = com.ibm.db2.jcc.DB2Driver
2014-11-20 17:34:49.665 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - connectionURL = jdbc:db2://localhost:50000/dwhdev
2014-11-20 17:34:49.737 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:34:50.705 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:db2://localhost:50000/dwhdev
2014-11-20 17:34:50.706 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:34:50.706 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: DB2/LINUXX8664
2014-11-20 17:34:50.713 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:34:50.714 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEAFTER,ALIAS,ALLOW,APPLICATION,ASSOCIATE,ASUTIME,AUDIT,AUX,AUXILIARY,BEFORE,BINARY,BUFFERPOOL,CACHE,CALL,CALLED,CAPTURE,CARDINALITY,CCSID,CLUSTER,COLLECTION,COLLID,COMMENT,CONCAT,CONDITION,CONTAINS,COUNT_BIG,CURRENT_LC_CTYPE,CURRENT_PATH,CURRENT_SERVER,CURRENT_TIMEZONE,CYCLE,DATA,DATABASE,DAYS,DB2GENERAL,DB2GENRL,DB2SQL,DBINFO,DEFAULTS,DEFINITION,DETERMINISTIC,DISALLOW,DO,DSNHATTR,DSSIZE,DYNAMIC,EACH,EDITPROC,ELSEIF,ENCODING,END-EXEC1,ERASE,EXCLUDING,EXIT,FENCED,FIELDPROC,FILE,FINAL,FREE,FUNCTION,GENERAL,GENERATED,GRAPHIC,HANDLER,HOLD,HOURS,IF,INCLUDING,INCREMENT,INDEX,INHERIT,INOUT,INTEGRITY,ISOBID,ITERATE,JAR,JAVA,LABEL,LC_CTYPE,LEAVE,LINKTYPE,LOCALE,LOCATOR,LOCATORS,LOCK,LOCKMAX,LOCKSIZE,LONG,LOOP,MAXVALUE,MICROSECOND,MICROSECONDS,MINUTES,MINVALUE,MODE,MODIFIES,MONTHS,NEW,NEW_TABLE,NOCACHE,NOCYCLE,NODENAME,NODENUMBER,NOMAXVALUE,NOMINVALUE,NOORDER,NULLS,NUMPARTS,OBID,OLD,OLD_TABLE,OPTIMIZATION,OPTIMIZE,OUT,OVERRIDING,PACKAGE,PARAMETER,PART,PARTITION,PATH,PIECESIZE,PLAN,PRIQTY,PROGRAM,PSID,QUERYNO,READS,RECOVERY,REFERENCING,RELEASE,RENAME,REPEAT,RESET,RESIGNAL,RESTART,RESULT,RESULT_SET_LOCATOR,RETURN,RETURNS,ROUTINE,ROW,RRN,RUN,SAVEPOINT,SCRATCHPAD,SECONDS,SECQTY,SECURITY,SENSITIVE,SIGNAL,SIMPLE,SOURCE,SPECIFIC,SQLID,STANDARD,START,STATIC,STAY,STOGROUP,STORES,STYLE,SUBPAGES,SYNONYM,SYSFUN,SYSIBM,SYSPROC,SYSTEM,TABLESPACE,TRIGGER,TYPE,UNDO,UNTIL,VALIDPROC,VARIABLE,VARIANT,VCAT,VOLUMES,WHILE,WLM,YEARS
2014-11-20 17:34:50.715 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:34:50.715 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string: "
2014-11-20 17:34:50.719 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:34:50.720 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 32677
2014-11-20 17:34:50.720 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:34:50.720 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:34:51.046 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHDEV
2014-11-20 17:34:51.050 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:34:51.050 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:34:51.072 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DB2INST
2014-11-20 17:34:51.072 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHSTAGE
2014-11-20 17:34:51.073 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NULLID
2014-11-20 17:34:51.073 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SQLJ
2014-11-20 17:34:51.073 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM
2014-11-20 17:34:51.073 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCAT
2014-11-20 17:34:51.073 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSFUN
2014-11-20 17:34:51.074 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBM
2014-11-20 17:34:51.074 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBMADM
2014-11-20 17:34:51.074 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBMINTERNAL
2014-11-20 17:34:51.074 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBMTS
2014-11-20 17:34:51.074 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPROC
2014-11-20 17:34:51.074 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPUBLIC
2014-11-20 17:34:51.075 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSSTAT
2014-11-20 17:34:51.075 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSTOOLS
2014-11-20 17:34:51.075 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST
2014-11-20 17:34:51.082 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:34:51.083 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:34:51.110 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BIGINT null
2014-11-20 17:34:51.110 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR FOR BIT DATA null
2014-11-20 17:34:51.110 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR () FOR BIT DATA LENGTH
2014-11-20 17:34:51.111 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR () FOR BIT DATA LENGTH
2014-11-20 17:34:51.111 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR LENGTH
2014-11-20 17:34:51.111 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARGRAPHIC null
2014-11-20 17:34:51.111 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR LENGTH
2014-11-20 17:34:51.112 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - GRAPHIC LENGTH
2014-11-20 17:34:51.112 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECIMAL PRECISION,SCALE
2014-11-20 17:34:51.112 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - INTEGER null
2014-11-20 17:34:51.112 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SMALLINT null
2014-11-20 17:34:51.112 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REAL null
2014-11-20 17:34:51.113 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DOUBLE null
2014-11-20 17:34:51.113 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR LENGTH
2014-11-20 17:34:51.114 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARGRAPHIC LENGTH
2014-11-20 17:34:51.114 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BOOLEAN null
2014-11-20 17:34:51.114 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DATE null
2014-11-20 17:34:51.114 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIME null
2014-11-20 17:34:51.114 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIMESTAMP null
2014-11-20 17:34:51.114 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECFLOAT PRECISION
2014-11-20 17:34:51.115 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - XML null
2014-11-20 17:34:51.115 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DISTINCT null
2014-11-20 17:34:51.115 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ROW null
2014-11-20 17:34:51.115 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ARRAY null
2014-11-20 17:34:51.115 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BLOB LENGTH
2014-11-20 17:34:51.116 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CLOB LENGTH
2014-11-20 17:34:51.116 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DBCLOB LENGTH
2014-11-20 17:34:51.125 [main] INFO  org.openbusinessintelligence.cli.Main - Feeding table: tab_test
2014-11-20 17:34:51.130 [main] DEBUG org.openbusinessintelligence.cli.Main - trgpreservedata: No such option
2014-11-20 17:34:51.130 [main] DEBUG org.openbusinessintelligence.cli.Main - commitfrequency: No such option
2014-11-20 17:34:51.130 [main] INFO  org.openbusinessintelligence.core.data.RandomDataGeneratorBean - ########################################
2014-11-20 17:34:51.130 [main] INFO  org.openbusinessintelligence.core.data.RandomDataGeneratorBean - GENERATING DATA...
2014-11-20 17:34:51.130 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Getting columns for source...
2014-11-20 17:34:51.130 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Source RDBMS product: DB2/LINUXX8664
2014-11-20 17:34:51.130 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Default schema: test
2014-11-20 17:34:51.131 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Table schema: test
2014-11-20 17:34:51.131 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Prefix for source table: test.
2014-11-20 17:34:51.131 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Source query: SELECT * FROM test.tab_test
2014-11-20 17:34:51.454 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 0 Name: COL_SMALLINT Type: SMALLINT Length: 6 Precision: 5 Scale: 0 Attribute:  JDBC Type:5
2014-11-20 17:34:51.455 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 1 Name: COL_INTEGER Type: INTEGER Length: 11 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:34:51.455 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 2 Name: COL_BIGINT Type: BIGINT Length: 20 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:34:51.455 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 3 Name: COL_NUMERIC Type: DECIMAL Length: 30 Precision: 28 Scale: 8 Attribute:  JDBC Type:3
2014-11-20 17:34:51.455 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 4 Name: COL_DECFLOAT Type: DECFLOAT Length: 42 Precision: 34 Scale: 0 Attribute:  JDBC Type:1111
2014-11-20 17:34:51.455 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 5 Name: COL_REAL Type: REAL Length: 13 Precision: 7 Scale: 0 Attribute:  JDBC Type:7
2014-11-20 17:34:51.455 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 6 Name: COL_DOUBLE Type: DOUBLE Length: 22 Precision: 15 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:34:51.455 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 7 Name: COL_DATE Type: TIMESTAMP Length: 21 Precision: 19 Scale: 0 Attribute:  JDBC Type:93
2014-11-20 17:34:51.455 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 8 Name: COL_TIME Type: TIME Length: 8 Precision: 8 Scale: 0 Attribute:  JDBC Type:92
2014-11-20 17:34:51.455 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 9 Name: COL_TIMESTAMP Type: TIMESTAMP Length: 26 Precision: 26 Scale: 6 Attribute:  JDBC Type:93
2014-11-20 17:34:51.456 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 10 Name: COL_CHAR Type: CHAR Length: 215 Precision: 215 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:34:51.456 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 11 Name: COL_VARCHAR Type: VARCHAR Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:34:51.456 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 12 Name: COL_CLOB Type: CLOB Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:34:51.456 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 13 Name: COL_DBCLOB Type: DBCLOB Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:34:51.456 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 14 Name: COL_XML Type: XML Length: 0 Precision: 0 Scale: 0 Attribute:  JDBC Type:2009
2014-11-20 17:34:51.456 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 15 Name: COL_GRAPHIC Type: GRAPHIC Length: 78 Precision: 78 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:34:51.456 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 16 Name: COL_VARGRAPHIC Type: VARGRAPHIC Length: 50 Precision: 50 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:34:51.456 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 17 Name: COL_BLOB Type: BLOB Length: 20 Precision: 10 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:34:51.456 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got column properties
2014-11-20 17:34:51.456 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - getting pk properties
2014-11-20 17:34:51.457 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - get primary key information...
2014-11-20 17:34:51.457 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Table: tab_test
2014-11-20 17:34:51.518 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got pk properties
2014-11-20 17:34:51.519 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got primary key information
2014-11-20 17:34:51.520 [main] INFO  org.openbusinessintelligence.core.data.RandomDataGeneratorBean - Preserve target data = false
2014-11-20 17:34:51.521 [main] INFO  org.openbusinessintelligence.core.data.RandomDataGeneratorBean - Truncate table
2014-11-20 17:34:51.521 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 17:34:51.522 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 17:34:51.522 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:34:51.522 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_db2_dwhdev_test
2014-11-20 17:34:51.522 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:34:51.868 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:db2://localhost:50000/dwhdev
2014-11-20 17:34:51.868 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:34:51.868 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: DB2/LINUXX8664
2014-11-20 17:34:51.879 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:34:51.879 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEAFTER,ALIAS,ALLOW,APPLICATION,ASSOCIATE,ASUTIME,AUDIT,AUX,AUXILIARY,BEFORE,BINARY,BUFFERPOOL,CACHE,CALL,CALLED,CAPTURE,CARDINALITY,CCSID,CLUSTER,COLLECTION,COLLID,COMMENT,CONCAT,CONDITION,CONTAINS,COUNT_BIG,CURRENT_LC_CTYPE,CURRENT_PATH,CURRENT_SERVER,CURRENT_TIMEZONE,CYCLE,DATA,DATABASE,DAYS,DB2GENERAL,DB2GENRL,DB2SQL,DBINFO,DEFAULTS,DEFINITION,DETERMINISTIC,DISALLOW,DO,DSNHATTR,DSSIZE,DYNAMIC,EACH,EDITPROC,ELSEIF,ENCODING,END-EXEC1,ERASE,EXCLUDING,EXIT,FENCED,FIELDPROC,FILE,FINAL,FREE,FUNCTION,GENERAL,GENERATED,GRAPHIC,HANDLER,HOLD,HOURS,IF,INCLUDING,INCREMENT,INDEX,INHERIT,INOUT,INTEGRITY,ISOBID,ITERATE,JAR,JAVA,LABEL,LC_CTYPE,LEAVE,LINKTYPE,LOCALE,LOCATOR,LOCATORS,LOCK,LOCKMAX,LOCKSIZE,LONG,LOOP,MAXVALUE,MICROSECOND,MICROSECONDS,MINUTES,MINVALUE,MODE,MODIFIES,MONTHS,NEW,NEW_TABLE,NOCACHE,NOCYCLE,NODENAME,NODENUMBER,NOMAXVALUE,NOMINVALUE,NOORDER,NULLS,NUMPARTS,OBID,OLD,OLD_TABLE,OPTIMIZATION,OPTIMIZE,OUT,OVERRIDING,PACKAGE,PARAMETER,PART,PARTITION,PATH,PIECESIZE,PLAN,PRIQTY,PROGRAM,PSID,QUERYNO,READS,RECOVERY,REFERENCING,RELEASE,RENAME,REPEAT,RESET,RESIGNAL,RESTART,RESULT,RESULT_SET_LOCATOR,RETURN,RETURNS,ROUTINE,ROW,RRN,RUN,SAVEPOINT,SCRATCHPAD,SECONDS,SECQTY,SECURITY,SENSITIVE,SIGNAL,SIMPLE,SOURCE,SPECIFIC,SQLID,STANDARD,START,STATIC,STAY,STOGROUP,STORES,STYLE,SUBPAGES,SYNONYM,SYSFUN,SYSIBM,SYSPROC,SYSTEM,TABLESPACE,TRIGGER,TYPE,UNDO,UNTIL,VALIDPROC,VARIABLE,VARIANT,VCAT,VOLUMES,WHILE,WLM,YEARS
2014-11-20 17:34:51.880 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:34:51.880 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string: "
2014-11-20 17:34:51.880 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:34:51.880 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 32677
2014-11-20 17:34:51.896 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:34:51.896 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:34:51.931 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHDEV
2014-11-20 17:34:51.933 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:34:51.934 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:34:51.940 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DB2INST
2014-11-20 17:34:51.940 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHSTAGE
2014-11-20 17:34:51.940 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NULLID
2014-11-20 17:34:51.940 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SQLJ
2014-11-20 17:34:51.940 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM
2014-11-20 17:34:51.940 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCAT
2014-11-20 17:34:51.941 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSFUN
2014-11-20 17:34:51.941 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBM
2014-11-20 17:34:51.941 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBMADM
2014-11-20 17:34:51.941 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBMINTERNAL
2014-11-20 17:34:51.941 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBMTS
2014-11-20 17:34:51.941 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPROC
2014-11-20 17:34:51.942 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPUBLIC
2014-11-20 17:34:51.942 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSSTAT
2014-11-20 17:34:51.942 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSTOOLS
2014-11-20 17:34:51.942 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST
2014-11-20 17:34:51.943 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:34:51.944 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:34:51.956 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BIGINT null
2014-11-20 17:34:51.956 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR FOR BIT DATA null
2014-11-20 17:34:51.956 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR () FOR BIT DATA LENGTH
2014-11-20 17:34:51.957 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR () FOR BIT DATA LENGTH
2014-11-20 17:34:51.957 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR LENGTH
2014-11-20 17:34:51.957 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARGRAPHIC null
2014-11-20 17:34:51.957 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR LENGTH
2014-11-20 17:34:51.958 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - GRAPHIC LENGTH
2014-11-20 17:34:51.958 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECIMAL PRECISION,SCALE
2014-11-20 17:34:51.958 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - INTEGER null
2014-11-20 17:34:51.958 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SMALLINT null
2014-11-20 17:34:51.958 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REAL null
2014-11-20 17:34:51.958 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DOUBLE null
2014-11-20 17:34:51.959 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR LENGTH
2014-11-20 17:34:51.959 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARGRAPHIC LENGTH
2014-11-20 17:34:51.959 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BOOLEAN null
2014-11-20 17:34:51.959 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DATE null
2014-11-20 17:34:51.959 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIME null
2014-11-20 17:34:51.959 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIMESTAMP null
2014-11-20 17:34:51.960 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECFLOAT PRECISION
2014-11-20 17:34:51.960 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - XML null
2014-11-20 17:34:51.960 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DISTINCT null
2014-11-20 17:34:51.960 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ROW null
2014-11-20 17:34:51.960 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ARRAY null
2014-11-20 17:34:51.960 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BLOB LENGTH
2014-11-20 17:34:51.961 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CLOB LENGTH
2014-11-20 17:34:51.961 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DBCLOB LENGTH
2014-11-20 17:34:51.962 [main] DEBUG org.openbusinessintelligence.core.data.RandomDataGeneratorBean - TRUNCATE TABLE test.tab_test IMMEDIATE
2014-11-20 17:34:52.274 [main] INFO  org.openbusinessintelligence.core.data.RandomDataGeneratorBean - Table truncated
2014-11-20 17:34:52.274 [main] DEBUG org.openbusinessintelligence.core.data.RandomDataGeneratorBean - Building insert string...
2014-11-20 17:34:52.274 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SMALLINT
2014-11-20 17:34:52.274 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INTEGER
2014-11-20 17:34:52.275 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BIGINT
2014-11-20 17:34:52.275 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NUMERIC
2014-11-20 17:34:52.275 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DECFLOAT
2014-11-20 17:34:52.275 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_REAL
2014-11-20 17:34:52.275 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DOUBLE
2014-11-20 17:34:52.275 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DATE
2014-11-20 17:34:52.275 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_TIME
2014-11-20 17:34:52.275 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_TIMESTAMP
2014-11-20 17:34:52.276 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_CHAR
2014-11-20 17:34:52.276 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_VARCHAR
2014-11-20 17:34:52.276 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_CLOB
2014-11-20 17:34:52.276 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DBCLOB
2014-11-20 17:34:52.276 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_XML
2014-11-20 17:34:52.276 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_GRAPHIC
2014-11-20 17:34:52.277 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_VARGRAPHIC
2014-11-20 17:34:52.277 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BLOB
2014-11-20 17:34:52.277 [main] DEBUG org.openbusinessintelligence.core.data.RandomDataGeneratorBean - INSERT INTO test.tab_test (COL_SMALLINT,COL_INTEGER,COL_BIGINT,COL_NUMERIC,COL_DECFLOAT,COL_REAL,COL_DOUBLE,COL_DATE,COL_TIME,COL_TIMESTAMP,COL_CHAR,COL_VARCHAR,COL_CLOB,COL_DBCLOB,COL_XML,COL_GRAPHIC,COL_VARGRAPHIC,COL_BLOB) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
2014-11-20 17:34:52.277 [main] DEBUG org.openbusinessintelligence.core.data.RandomDataGeneratorBean - Insert string built
2014-11-20 17:34:52.277 [main] INFO  org.openbusinessintelligence.core.data.RandomDataGeneratorBean - Commit every 0 rows
2014-11-20 17:34:52.434 [main] INFO  org.openbusinessintelligence.core.data.RandomDataGeneratorBean - 10 rows totally inserted
2014-11-20 17:34:52.434 [main] INFO  org.openbusinessintelligence.core.data.RandomDataGeneratorBean - GENERATION COMPLETED
2014-11-20 17:34:52.434 [main] INFO  org.openbusinessintelligence.core.data.RandomDataGeneratorBean - ########################################
2014-11-20 17:34:52.434 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 17:34:52.434 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 17:34:52.434 [main] INFO  org.openbusinessintelligence.cli.Main - FINISH
2014-11-20 17:34:52.435 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:39:11.901 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:39:11.904 [main] INFO  org.openbusinessintelligence.cli.Main - START
2014-11-20 17:39:11.904 [main] INFO  org.openbusinessintelligence.cli.Main - Configure command line options
2014-11-20 17:39:11.944 [main] INFO  org.openbusinessintelligence.cli.Main - Options configured
2014-11-20 17:39:11.951 [main] INFO  org.openbusinessintelligence.cli.Main - Copy an entire schema, a single table or the result of a query from a database to another
2014-11-20 17:39:11.958 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbconnkeywordfile: No such option
2014-11-20 17:39:11.959 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbdriverclass: No such option
2014-11-20 17:39:11.959 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbconnectionurl: No such option
2014-11-20 17:39:11.960 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbusername: No such option
2014-11-20 17:39:11.960 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbpassword: No such option
2014-11-20 17:39:11.960 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbconnkeywordfile: No such option
2014-11-20 17:39:11.961 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbdriverclass: No such option
2014-11-20 17:39:11.961 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbconnectionurl: No such option
2014-11-20 17:39:11.962 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbusername: No such option
2014-11-20 17:39:11.963 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbpassword: No such option
2014-11-20 17:39:11.963 [main] INFO  org.openbusinessintelligence.cli.Main - Source and target connections prepared
2014-11-20 17:39:11.964 [main] DEBUG org.openbusinessintelligence.cli.Main - sourceschema: No such option
2014-11-20 17:39:11.964 [main] INFO  org.openbusinessintelligence.cli.Main - Source schema: null
2014-11-20 17:39:11.965 [main] INFO  org.openbusinessintelligence.cli.Main - Source table: tab_test
2014-11-20 17:39:11.965 [main] DEBUG org.openbusinessintelligence.cli.Main - sourcequery: No such option
2014-11-20 17:39:11.965 [main] INFO  org.openbusinessintelligence.cli.Main - Source query: null
2014-11-20 17:39:11.966 [main] INFO  org.openbusinessintelligence.cli.Main - Target schema: test
2014-11-20 17:39:11.966 [main] INFO  org.openbusinessintelligence.cli.Main - Target table: stg_ifx_tab_test
2014-11-20 17:39:11.966 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:39:11.967 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_informix_test
2014-11-20 17:39:11.967 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - databaseDriver = com.informix.jdbc.IfxDriver
2014-11-20 17:39:11.967 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - connectionURL = jdbc:informix-sqli://localhost:1535/test:INFORMIXSERVER=informix
2014-11-20 17:39:12.022 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:39:12.372 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:informix-sqli://localhost:1535/test:INFORMIXSERVER=informix
2014-11-20 17:39:12.373 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:39:12.403 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: Informix Dynamic Server
2014-11-20 17:39:12.413 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:39:12.413 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEafter,ansi,append,attach,audit,before,bitmap,boolean,buffered,byte,cache,call,cluster,clustersize,codeset,database,datafiles,dataskip,datetime,dba,dbdate,dbmoney,debug,define,delimiter,deluxe,detach,dirty,distributions,document,each,elif,exclusive,exit,explain,express,expression,extend,extent,file,fillfactor,foreach,format,fraction,fragment,gk,hash,high,hold,hybrid,if,index,init,labeleq,labelge,labelgt,labelle,labellt,let,listing,lock,log,low,matches,maxerrors,medium,mode,modify,money,mounting,new,nvarchar,off,old,operational,optical,optimization,page,pdqpriority,pload,private,raise,range,raw,recordend,recover,referencing,rejectfile,release,remainder,rename,reserve,resolution,resource,resume,return,returning,returns,ridlist,robin,rollforward,round,row,rowids,sameas,samples,schedule,scratch,serial,share,skall,skinhibit,skshow,smallfloat,stability,standard,start,static,statistics,stdev,step,sync,synonym,system,temp,text,timeout,trace,trigger,units,unlock,variance,wait,while,xload,xunload
2014-11-20 17:39:12.414 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:39:12.414 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string:  
2014-11-20 17:39:12.416 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:39:12.416 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 32767
2014-11-20 17:39:12.416 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:12.416 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:39:12.430 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - dwhreport
2014-11-20 17:39:12.431 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - dwhstage
2014-11-20 17:39:12.431 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sugarcrm
2014-11-20 17:39:12.431 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sysadmin
2014-11-20 17:39:12.431 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sysmaster
2014-11-20 17:39:12.431 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sysuser
2014-11-20 17:39:12.432 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - sysutils
2014-11-20 17:39:12.432 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - test
2014-11-20 17:39:12.432 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:12.432 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:39:12.441 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - informix
2014-11-20 17:39:12.441 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - test
2014-11-20 17:39:12.441 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:12.441 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:39:12.451 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - byte null
2014-11-20 17:39:12.451 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - char null
2014-11-20 17:39:12.451 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - character varying null
2014-11-20 17:39:12.451 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - date null
2014-11-20 17:39:12.451 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - datetime year to fraction(5) null
2014-11-20 17:39:12.451 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - decimal null
2014-11-20 17:39:12.452 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - double precision null
2014-11-20 17:39:12.452 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - float null
2014-11-20 17:39:12.452 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - integer null
2014-11-20 17:39:12.452 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - interval null
2014-11-20 17:39:12.452 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - nchar null
2014-11-20 17:39:12.457 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - nvarchar null
2014-11-20 17:39:12.463 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - money null
2014-11-20 17:39:12.463 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - numeric null
2014-11-20 17:39:12.463 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - serial null
2014-11-20 17:39:12.463 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - smallint null
2014-11-20 17:39:12.463 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - smallfloat null
2014-11-20 17:39:12.463 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - text null
2014-11-20 17:39:12.463 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - varchar null
2014-11-20 17:39:12.464 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - boolean null
2014-11-20 17:39:12.464 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - int8 null
2014-11-20 17:39:12.464 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - serial8 null
2014-11-20 17:39:12.464 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - clob null
2014-11-20 17:39:12.464 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - blob null
2014-11-20 17:39:12.464 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - lvarchar null
2014-11-20 17:39:12.464 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - bigint null
2014-11-20 17:39:12.465 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - bigserial null
2014-11-20 17:39:12.465 [main] INFO  org.openbusinessintelligence.cli.Main - Copy a single table or the result of a query
2014-11-20 17:39:12.465 [main] INFO  org.openbusinessintelligence.cli.Main - Create tables if they don't exist
2014-11-20 17:39:12.465 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:39:12.465 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_derby_dwhdev_test
2014-11-20 17:39:12.465 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - databaseDriver = org.apache.derby.jdbc.ClientDriver
2014-11-20 17:39:12.466 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - connectionURL = jdbc:derby://localhost:55000/dwhdev;create=false
2014-11-20 17:39:12.466 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:39:12.699 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:derby://localhost:55000/dwhdev;create=false
2014-11-20 17:39:12.699 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:39:12.700 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: Apache Derby
2014-11-20 17:39:12.703 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:39:12.760 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEALIAS,BIGINT,BOOLEAN,CALL,CLASS,COPY,DB2J_DEBUG,EXECUTE,EXPLAIN,FILE,FILTER,GETCURRENTCONNECTION,INDEX,INSTANCEOF,METHOD,NEW,OFF,PROPERTIES,RECOMPILE,RENAME,RUNTIMESTATISTICS,STATEMENT,STATISTICS,TIMING,WAIT
2014-11-20 17:39:12.761 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:39:12.761 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string: "
2014-11-20 17:39:12.761 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:39:12.761 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 0
2014-11-20 17:39:12.761 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:12.761 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:39:12.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:12.768 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:39:12.775 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - APP
2014-11-20 17:39:12.775 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHSTAGE
2014-11-20 17:39:12.775 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NULLID
2014-11-20 17:39:12.775 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SQLJ
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYS
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCAT
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCS_DIAG
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCS_UTIL
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSFUN
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBM
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPROC
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSSTAT
2014-11-20 17:39:12.776 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST
2014-11-20 17:39:12.778 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:12.778 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:39:12.807 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BIGINT null
2014-11-20 17:39:12.807 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR FOR BIT DATA null
2014-11-20 17:39:12.808 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR () FOR BIT DATA length
2014-11-20 17:39:12.808 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR () FOR BIT DATA length
2014-11-20 17:39:12.808 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR null
2014-11-20 17:39:12.808 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR length
2014-11-20 17:39:12.808 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NUMERIC precision,scale
2014-11-20 17:39:12.808 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECIMAL precision,scale
2014-11-20 17:39:12.808 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - INTEGER null
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SMALLINT null
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - FLOAT precision
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REAL null
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DOUBLE null
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR length
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BOOLEAN null
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DATE null
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIME null
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIMESTAMP null
2014-11-20 17:39:12.809 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - OBJECT null
2014-11-20 17:39:12.810 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BLOB length
2014-11-20 17:39:12.810 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CLOB length
2014-11-20 17:39:12.810 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - XML null
2014-11-20 17:39:12.814 [main] INFO  org.openbusinessintelligence.cli.Main - Creating table: stg_ifx_tab_test from table tab_test
2014-11-20 17:39:12.816 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Getting columns for source...
2014-11-20 17:39:12.816 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Source RDBMS product: Informix Dynamic Server
2014-11-20 17:39:12.816 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Default schema: null
2014-11-20 17:39:12.817 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Table schema: null
2014-11-20 17:39:12.817 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Prefix for source table: 
2014-11-20 17:39:12.923 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 0 Name: col_boolean Type: BOOLEAN Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:16
2014-11-20 17:39:12.923 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 1 Name: col_int8 Type: INT8 Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:39:12.924 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 2 Name: col_smallint Type: SMALLINT Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:5
2014-11-20 17:39:12.924 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 3 Name: col_int Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:39:12.924 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 4 Name: col_integer Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:39:12.924 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 5 Name: col_bigint Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:39:12.924 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 6 Name: col_serial Type: SERIAL Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:39:12.924 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 7 Name: col_numeric Type: DECIMAL Length: 32 Precision: 32 Scale: 8 Attribute:  JDBC Type:3
2014-11-20 17:39:12.925 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 8 Name: col_dec Type: DECIMAL Length: 16 Precision: 16 Scale: 255 Attribute:  JDBC Type:3
2014-11-20 17:39:12.925 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 9 Name: col_decimal Type: DECIMAL Length: 27 Precision: 27 Scale: 2 Attribute:  JDBC Type:3
2014-11-20 17:39:12.925 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 10 Name: col_money Type: MONEY Length: 26 Precision: 26 Scale: 8 Attribute:  JDBC Type:3
2014-11-20 17:39:12.925 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 11 Name: col_real Type: SMALLFLOAT Length: 7 Precision: 7 Scale: 0 Attribute:  JDBC Type:7
2014-11-20 17:39:12.925 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 12 Name: col_smallfloat Type: SMALLFLOAT Length: 7 Precision: 7 Scale: 0 Attribute:  JDBC Type:7
2014-11-20 17:39:12.925 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 13 Name: col_float Type: FLOAT Length: 17 Precision: 17 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:39:12.925 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 14 Name: col_double Type: FLOAT Length: 17 Precision: 17 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:39:12.926 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 15 Name: col_char Type: CHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:39:12.926 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 16 Name: col_varchar Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:39:12.926 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 17 Name: col_lvarchar Type: LVARCHAR Length: 6000 Precision: 6000 Scale: 0 Attribute:  JDBC Type:-1
2014-11-20 17:39:12.926 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 18 Name: col_nchar Type: NCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:39:12.926 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 19 Name: col_nvarchar Type: NVARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:39:12.926 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 20 Name: col_text Type: TEXT Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:39:12.927 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 21 Name: col_clob Type: CLOB Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:39:12.927 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 22 Name: col_binary18 Type: BINARY18 Length: 18 Precision: 18 Scale: 0 Attribute:  JDBC Type:0
2014-11-20 17:39:12.927 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 23 Name: col_binaryvar Type: BINARYVAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:-1
2014-11-20 17:39:12.927 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 24 Name: col_byte Type: BYTE Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:39:12.927 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 25 Name: col_blob Type: BLOB Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:39:12.927 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 26 Name: col_date Type: DATE Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:91
2014-11-20 17:39:12.928 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 27 Name: col_datetime Type: DATETIME Length: 23 Precision: 23 Scale: 0 Attribute:  JDBC Type:93
2014-11-20 17:39:12.928 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 28 Name: col_intervalym Type: INTERVAL Length: 1538 Precision: 1538 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:39:12.928 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 29 Name: col_intervalds Type: INTERVAL Length: 2893 Precision: 2893 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:39:12.928 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got column properties
2014-11-20 17:39:12.928 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - getting pk properties
2014-11-20 17:39:12.928 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - get primary key information...
2014-11-20 17:39:12.928 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Table: tab_test
2014-11-20 17:39:12.939 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got pk properties
2014-11-20 17:39:12.939 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got primary key information
2014-11-20 17:39:12.939 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - Source RDBMS product: Informix Dynamic Server
2014-11-20 17:39:12.939 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - Target RDBMS product: Apache Derby
2014-11-20 17:39:12.976 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_boolean
2014-11-20 17:39:12.976 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:12.977 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:12.977 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:12.977 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BOOLEAN
2014-11-20 17:39:12.977 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:12.980 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BOOLEAN
2014-11-20 17:39:12.983 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BOOLEAN
2014-11-20 17:39:12.983 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BOOLEAN
2014-11-20 17:39:12.987 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BOOLEAN
2014-11-20 17:39:12.989 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BOOLEAN
2014-11-20 17:39:13.002 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 5
2014-11-20 17:39:13.003 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.003 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.003 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.003 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.004 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.004 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 0  Name: col_boolean Type: BOOLEAN Attribute:   Length: 5 Precision: 5 Scale: 0  Definition: BOOLEAN(5,0) 
2014-11-20 17:39:13.004 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 0  Name: col_boolean Type: BOOLEAN Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: BOOLEAN 
2014-11-20 17:39:13.004 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_int8
2014-11-20 17:39:13.004 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.004 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.004 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.004 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INT8
2014-11-20 17:39:13.005 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.005 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = INT8
2014-11-20 17:39:13.007 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = INT8
2014-11-20 17:39:13.008 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BIGINT
2014-11-20 17:39:13.009 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BIGINT
2014-11-20 17:39:13.009 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BIGINT
2014-11-20 17:39:13.009 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 19
2014-11-20 17:39:13.009 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.009 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.010 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.010 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.010 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 1  Name: col_int8 Type: INT8 Attribute:   Length: 19 Precision: 19 Scale: 0  Definition: INT8(19,0) 
2014-11-20 17:39:13.010 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 1  Name: col_int8 Type: BIGINT Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: BIGINT 
2014-11-20 17:39:13.010 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_smallint
2014-11-20 17:39:13.010 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.010 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.010 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.011 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = SMALLINT
2014-11-20 17:39:13.011 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.011 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = SMALLINT
2014-11-20 17:39:13.012 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = SMALLINT
2014-11-20 17:39:13.012 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = SMALLINT
2014-11-20 17:39:13.013 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = SMALLINT
2014-11-20 17:39:13.014 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = SMALLINT
2014-11-20 17:39:13.014 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 5
2014-11-20 17:39:13.014 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.014 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.014 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.014 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.014 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.014 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 2  Name: col_smallint Type: SMALLINT Attribute:   Length: 5 Precision: 5 Scale: 0  Definition: SMALLINT(5,0) 
2014-11-20 17:39:13.014 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 2  Name: col_smallint Type: SMALLINT Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: SMALLINT 
2014-11-20 17:39:13.015 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_int
2014-11-20 17:39:13.015 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.015 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.015 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.015 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INTEGER
2014-11-20 17:39:13.015 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.016 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = INTEGER
2014-11-20 17:39:13.017 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = INTEGER
2014-11-20 17:39:13.017 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = INTEGER
2014-11-20 17:39:13.018 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = INTEGER
2014-11-20 17:39:13.018 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = INTEGER
2014-11-20 17:39:13.018 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 10
2014-11-20 17:39:13.019 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.019 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.019 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.019 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.019 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.020 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 3  Name: col_int Type: INTEGER Attribute:   Length: 10 Precision: 10 Scale: 0  Definition: INTEGER(10,0) 
2014-11-20 17:39:13.020 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 3  Name: col_int Type: INTEGER Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: INTEGER 
2014-11-20 17:39:13.020 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_integer
2014-11-20 17:39:13.020 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.020 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.020 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.020 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INTEGER
2014-11-20 17:39:13.020 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.021 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = INTEGER
2014-11-20 17:39:13.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = INTEGER
2014-11-20 17:39:13.022 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = INTEGER
2014-11-20 17:39:13.023 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = INTEGER
2014-11-20 17:39:13.023 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = INTEGER
2014-11-20 17:39:13.023 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 10
2014-11-20 17:39:13.023 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.023 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.024 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.024 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.024 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.024 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 4  Name: col_integer Type: INTEGER Attribute:   Length: 10 Precision: 10 Scale: 0  Definition: INTEGER(10,0) 
2014-11-20 17:39:13.024 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 4  Name: col_integer Type: INTEGER Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: INTEGER 
2014-11-20 17:39:13.024 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_bigint
2014-11-20 17:39:13.024 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.024 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.024 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.025 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BIGINT
2014-11-20 17:39:13.026 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.026 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BIGINT
2014-11-20 17:39:13.028 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BIGINT
2014-11-20 17:39:13.029 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BIGINT
2014-11-20 17:39:13.029 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BIGINT
2014-11-20 17:39:13.030 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BIGINT
2014-11-20 17:39:13.030 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 19
2014-11-20 17:39:13.030 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.030 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.030 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.030 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.030 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.030 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 5  Name: col_bigint Type: BIGINT Attribute:   Length: 19 Precision: 19 Scale: 0  Definition: BIGINT(19,0) 
2014-11-20 17:39:13.030 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 5  Name: col_bigint Type: BIGINT Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: BIGINT 
2014-11-20 17:39:13.031 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_serial
2014-11-20 17:39:13.031 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.031 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.031 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.031 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = SERIAL
2014-11-20 17:39:13.031 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.032 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = SERIAL
2014-11-20 17:39:13.033 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = SERIAL
2014-11-20 17:39:13.033 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = INTEGER
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = INTEGER
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = INTEGER
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 10
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 6  Name: col_serial Type: SERIAL Attribute:   Length: 10 Precision: 10 Scale: 0  Definition: SERIAL(10,0) 
2014-11-20 17:39:13.034 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 6  Name: col_serial Type: INTEGER Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: INTEGER 
2014-11-20 17:39:13.035 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_numeric
2014-11-20 17:39:13.035 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.035 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.035 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.035 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DECIMAL
2014-11-20 17:39:13.035 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.036 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DECIMAL
2014-11-20 17:39:13.036 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DECIMAL
2014-11-20 17:39:13.037 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NUMERIC
2014-11-20 17:39:13.037 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = NUMERIC
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = NUMERIC
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 32
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE SCALE OPTION = true
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 31
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = true
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.038 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision) AND scale
2014-11-20 17:39:13.039 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.039 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 7  Name: col_numeric Type: DECIMAL Attribute:   Length: 32 Precision: 32 Scale: 8  Definition: DECIMAL(32,8) 
2014-11-20 17:39:13.039 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 7  Name: col_numeric Type: NUMERIC Attribute:   Length: 31 Precision: 31 Scale: 8  Definition: NUMERIC(31,8) 
2014-11-20 17:39:13.039 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_dec
2014-11-20 17:39:13.039 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.039 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.039 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.039 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DECIMAL
2014-11-20 17:39:13.039 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.040 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DECIMAL
2014-11-20 17:39:13.041 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DECIMAL
2014-11-20 17:39:13.041 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NUMERIC
2014-11-20 17:39:13.042 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = NUMERIC
2014-11-20 17:39:13.042 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = NUMERIC
2014-11-20 17:39:13.042 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 16
2014-11-20 17:39:13.042 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.042 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE SCALE OPTION = true
2014-11-20 17:39:13.043 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.043 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 31
2014-11-20 17:39:13.043 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.043 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = true
2014-11-20 17:39:13.043 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.044 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision) AND scale
2014-11-20 17:39:13.044 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.044 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 8  Name: col_dec Type: DECIMAL Attribute:   Length: 16 Precision: 16 Scale: 255  Definition: DECIMAL(16,255) 
2014-11-20 17:39:13.044 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 8  Name: col_dec Type: NUMERIC Attribute:   Length: 16 Precision: 16 Scale: 16  Definition: NUMERIC(16,16) 
2014-11-20 17:39:13.044 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_decimal
2014-11-20 17:39:13.044 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.044 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.044 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.044 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DECIMAL
2014-11-20 17:39:13.044 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.045 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DECIMAL
2014-11-20 17:39:13.047 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DECIMAL
2014-11-20 17:39:13.048 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NUMERIC
2014-11-20 17:39:13.048 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = NUMERIC
2014-11-20 17:39:13.048 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = NUMERIC
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 27
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE SCALE OPTION = true
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 31
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = true
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision) AND scale
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.049 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 9  Name: col_decimal Type: DECIMAL Attribute:   Length: 27 Precision: 27 Scale: 2  Definition: DECIMAL(27,2) 
2014-11-20 17:39:13.050 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 9  Name: col_decimal Type: NUMERIC Attribute:   Length: 27 Precision: 27 Scale: 2  Definition: NUMERIC(27,2) 
2014-11-20 17:39:13.050 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_money
2014-11-20 17:39:13.050 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.050 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.050 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.050 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = MONEY
2014-11-20 17:39:13.050 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.051 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = MONEY
2014-11-20 17:39:13.052 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = MONEY
2014-11-20 17:39:13.052 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BIGINT
2014-11-20 17:39:13.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BIGINT
2014-11-20 17:39:13.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BIGINT
2014-11-20 17:39:13.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 26
2014-11-20 17:39:13.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.053 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.054 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.054 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 10  Name: col_money Type: MONEY Attribute:   Length: 26 Precision: 26 Scale: 8  Definition: MONEY(26,8) 
2014-11-20 17:39:13.054 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 10  Name: col_money Type: BIGINT Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: BIGINT 
2014-11-20 17:39:13.054 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_real
2014-11-20 17:39:13.054 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.054 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.054 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.054 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = SMALLFLOAT
2014-11-20 17:39:13.054 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.055 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = SMALLFLOAT
2014-11-20 17:39:13.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = SMALLFLOAT
2014-11-20 17:39:13.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = FLOAT
2014-11-20 17:39:13.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.056 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = DOUBLE
2014-11-20 17:39:13.057 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = DOUBLE
2014-11-20 17:39:13.058 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 7
2014-11-20 17:39:13.058 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 11  Name: col_real Type: SMALLFLOAT Attribute:   Length: 7 Precision: 7 Scale: 0  Definition: SMALLFLOAT(7,0) 
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 11  Name: col_real Type: DOUBLE Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: DOUBLE 
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_smallfloat
2014-11-20 17:39:13.059 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.059 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = SMALLFLOAT
2014-11-20 17:39:13.059 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.060 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = SMALLFLOAT
2014-11-20 17:39:13.060 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = SMALLFLOAT
2014-11-20 17:39:13.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = FLOAT
2014-11-20 17:39:13.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = DOUBLE
2014-11-20 17:39:13.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = DOUBLE
2014-11-20 17:39:13.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 7
2014-11-20 17:39:13.061 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 12  Name: col_smallfloat Type: SMALLFLOAT Attribute:   Length: 7 Precision: 7 Scale: 0  Definition: SMALLFLOAT(7,0) 
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 12  Name: col_smallfloat Type: DOUBLE Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: DOUBLE 
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_float
2014-11-20 17:39:13.062 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.062 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = FLOAT
2014-11-20 17:39:13.062 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.063 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = FLOAT
2014-11-20 17:39:13.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = FLOAT
2014-11-20 17:39:13.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = FLOAT
2014-11-20 17:39:13.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.064 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = DOUBLE
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = DOUBLE
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 17
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 13  Name: col_float Type: FLOAT Attribute:   Length: 17 Precision: 17 Scale: 0  Definition: FLOAT(17,0) 
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 13  Name: col_float Type: DOUBLE Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: DOUBLE 
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_double
2014-11-20 17:39:13.065 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.065 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = FLOAT
2014-11-20 17:39:13.065 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.066 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = FLOAT
2014-11-20 17:39:13.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = FLOAT
2014-11-20 17:39:13.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = FLOAT
2014-11-20 17:39:13.067 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.068 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.068 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = DOUBLE
2014-11-20 17:39:13.068 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = DOUBLE
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 17
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 14  Name: col_double Type: FLOAT Attribute:   Length: 17 Precision: 17 Scale: 0  Definition: FLOAT(17,0) 
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 14  Name: col_double Type: DOUBLE Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: DOUBLE 
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_char
2014-11-20 17:39:13.069 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.069 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.069 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = CHAR
2014-11-20 17:39:13.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.070 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = CHAR
2014-11-20 17:39:13.071 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = CHAR
2014-11-20 17:39:13.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = VARCHAR
2014-11-20 17:39:13.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.072 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.073 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:39:13.074 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.074 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 15  Name: col_char Type: CHAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: CHAR(255,0) 
2014-11-20 17:39:13.074 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 15  Name: col_char Type: VARCHAR Attribute:   Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) 
2014-11-20 17:39:13.074 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_varchar
2014-11-20 17:39:13.074 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.074 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.074 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.074 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = VARCHAR
2014-11-20 17:39:13.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.075 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = VARCHAR
2014-11-20 17:39:13.076 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = VARCHAR
2014-11-20 17:39:13.076 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = VARCHAR
2014-11-20 17:39:13.076 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.076 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.077 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:39:13.078 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.078 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 16  Name: col_varchar Type: VARCHAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: VARCHAR(255,0) 
2014-11-20 17:39:13.078 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 16  Name: col_varchar Type: VARCHAR Attribute:   Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) 
2014-11-20 17:39:13.078 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_lvarchar
2014-11-20 17:39:13.078 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.078 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.078 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.078 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = LVARCHAR
2014-11-20 17:39:13.078 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.079 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = LVARCHAR
2014-11-20 17:39:13.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = LVARCHAR
2014-11-20 17:39:13.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NVARCHAR
2014-11-20 17:39:13.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.080 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 6000
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:39:13.081 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.082 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 17  Name: col_lvarchar Type: LVARCHAR Attribute:   Length: 6000 Precision: 6000 Scale: 0  Definition: LVARCHAR(6000,0) 
2014-11-20 17:39:13.082 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 17  Name: col_lvarchar Type: VARCHAR Attribute:   Length: 6000 Precision: 0 Scale: 0  Definition: VARCHAR(6000) 
2014-11-20 17:39:13.082 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_nchar
2014-11-20 17:39:13.082 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.082 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.083 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.083 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = NCHAR
2014-11-20 17:39:13.083 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = NCHAR
2014-11-20 17:39:13.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = NCHAR
2014-11-20 17:39:13.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NVARCHAR
2014-11-20 17:39:13.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.084 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:39:13.085 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.086 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 18  Name: col_nchar Type: NCHAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: NCHAR(255,0) 
2014-11-20 17:39:13.091 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 18  Name: col_nchar Type: VARCHAR Attribute:   Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) 
2014-11-20 17:39:13.091 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_nvarchar
2014-11-20 17:39:13.091 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.091 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.091 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.091 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = NVARCHAR
2014-11-20 17:39:13.091 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.092 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = NVARCHAR
2014-11-20 17:39:13.092 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = NVARCHAR
2014-11-20 17:39:13.093 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NVARCHAR
2014-11-20 17:39:13.093 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.093 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.094 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:39:13.094 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:39:13.094 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:39:13.094 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.094 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.094 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:39:13.094 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.094 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 19  Name: col_nvarchar Type: NVARCHAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: NVARCHAR(255,0) 
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 19  Name: col_nvarchar Type: VARCHAR Attribute:   Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) 
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_text
2014-11-20 17:39:13.095 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.095 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = TEXT
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.095 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = TEXT
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = TEXT
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = NCLOB
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = CLOB
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = CLOB
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 2147483647
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 215741641
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.096 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.097 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length to max allowed!
2014-11-20 17:39:13.097 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.097 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 20  Name: col_text Type: TEXT Attribute:   Length: 2147483647 Precision: 2147483647 Scale: 0  Definition: TEXT(2147483647,0) 
2014-11-20 17:39:13.097 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 20  Name: col_text Type: CLOB Attribute:   Length: 215741641 Precision: 0 Scale: 0  Definition: CLOB(215741641) 
2014-11-20 17:39:13.097 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_clob
2014-11-20 17:39:13.097 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.097 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.097 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.097 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = CLOB
2014-11-20 17:39:13.097 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.097 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = CLOB
2014-11-20 17:39:13.098 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = CLOB
2014-11-20 17:39:13.098 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = CLOB
2014-11-20 17:39:13.098 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = CLOB
2014-11-20 17:39:13.098 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = CLOB
2014-11-20 17:39:13.098 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 2147483647
2014-11-20 17:39:13.098 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.098 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 215741641
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length to max allowed!
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 21  Name: col_clob Type: CLOB Attribute:   Length: 2147483647 Precision: 2147483647 Scale: 0  Definition: CLOB(2147483647,0) 
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 21  Name: col_clob Type: CLOB Attribute:   Length: 215741641 Precision: 0 Scale: 0  Definition: CLOB(215741641) 
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_binary18
2014-11-20 17:39:13.099 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.099 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BINARY18
2014-11-20 17:39:13.099 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.100 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BINARY18
2014-11-20 17:39:13.100 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BINARY18
2014-11-20 17:39:13.100 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = VARBINARY
2014-11-20 17:39:13.100 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.100 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT TARGET TYPE ATTRIBUTE = FOR BIT DATA
2014-11-20 17:39:13.100 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.100 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 18
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 22  Name: col_binary18 Type: BINARY18 Attribute:   Length: 18 Precision: 18 Scale: 0  Definition: BINARY18(18,0) 
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 22  Name: col_binary18 Type: VARCHAR Attribute: FOR BIT DATA  Length: 18 Precision: 0 Scale: 0  Definition: VARCHAR(18) FOR BIT DATA
2014-11-20 17:39:13.101 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_binaryvar
2014-11-20 17:39:13.102 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.102 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.102 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.102 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BINARYVAR
2014-11-20 17:39:13.102 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.102 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BINARYVAR
2014-11-20 17:39:13.103 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BINARYVAR
2014-11-20 17:39:13.103 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = VARBINARY
2014-11-20 17:39:13.103 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.103 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT TARGET TYPE ATTRIBUTE = FOR BIT DATA
2014-11-20 17:39:13.103 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.103 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = VARCHAR
2014-11-20 17:39:13.103 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = VARCHAR
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 255
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 32672
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 23  Name: col_binaryvar Type: BINARYVAR Attribute:   Length: 255 Precision: 255 Scale: 0  Definition: BINARYVAR(255,0) 
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 23  Name: col_binaryvar Type: VARCHAR Attribute: FOR BIT DATA  Length: 255 Precision: 0 Scale: 0  Definition: VARCHAR(255) FOR BIT DATA
2014-11-20 17:39:13.104 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_byte
2014-11-20 17:39:13.104 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.104 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.105 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.105 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BYTE
2014-11-20 17:39:13.105 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.105 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BYTE
2014-11-20 17:39:13.105 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BYTE
2014-11-20 17:39:13.105 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BLOB
2014-11-20 17:39:13.105 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BLOB
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BLOB
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 2147483647
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 215741641
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length to max allowed!
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 24  Name: col_byte Type: BYTE Attribute:   Length: 2147483647 Precision: 2147483647 Scale: 0  Definition: BYTE(2147483647,0) 
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 24  Name: col_byte Type: BLOB Attribute:   Length: 215741641 Precision: 0 Scale: 0  Definition: BLOB(215741641) 
2014-11-20 17:39:13.106 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_blob
2014-11-20 17:39:13.107 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.107 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.107 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.107 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = BLOB
2014-11-20 17:39:13.107 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.107 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = BLOB
2014-11-20 17:39:13.108 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = BLOB
2014-11-20 17:39:13.108 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = BLOB
2014-11-20 17:39:13.108 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = BLOB
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = BLOB
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 2147483647
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = true
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MAX DATA LENGTH = 215741641
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length to max allowed!
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 25  Name: col_blob Type: BLOB Attribute:   Length: 2147483647 Precision: 2147483647 Scale: 0  Definition: BLOB(2147483647,0) 
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 25  Name: col_blob Type: BLOB Attribute:   Length: 215741641 Precision: 0 Scale: 0  Definition: BLOB(215741641) 
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_date
2014-11-20 17:39:13.109 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.109 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.109 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DATE
2014-11-20 17:39:13.110 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.110 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DATE
2014-11-20 17:39:13.110 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DATE
2014-11-20 17:39:13.110 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = DATETIME
2014-11-20 17:39:13.110 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.111 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.111 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = TIMESTAMP
2014-11-20 17:39:13.111 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = TIMESTAMP
2014-11-20 17:39:13.111 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 10
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 26  Name: col_date Type: DATE Attribute:   Length: 10 Precision: 10 Scale: 0  Definition: DATE(10,0) 
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 26  Name: col_date Type: TIMESTAMP Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: TIMESTAMP 
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_datetime
2014-11-20 17:39:13.112 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.112 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = DATETIME
2014-11-20 17:39:13.112 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.113 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - MATCHED BY SOURCE TYPE NAME = DATETIME
2014-11-20 17:39:13.113 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - FINALLY SOURCE MATCH BY NAME = DATETIME
2014-11-20 17:39:13.113 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TARGET TYPE = DATETIME
2014-11-20 17:39:13.113 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - PRODUCT MATCH
2014-11-20 17:39:13.113 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - IS OVERSIZED = false
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = TIMESTAMP
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET MATCH BY NAME = TIMESTAMP
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE LENGTH = 23
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - DEFAULT TYPE LENGTH OPTION = false
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = false
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 27  Name: col_datetime Type: DATETIME Attribute:   Length: 23 Precision: 23 Scale: 0  Definition: DATETIME(23,0) 
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 27  Name: col_datetime Type: TIMESTAMP Attribute:   Length: 0 Precision: 0 Scale: 0  Definition: TIMESTAMP 
2014-11-20 17:39:13.114 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_intervalym
2014-11-20 17:39:13.115 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.115 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.115 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.115 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INTERVAL
2014-11-20 17:39:13.115 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.116 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = 
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Type conhversion not supported
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 28  Name: col_intervalym Type: INTERVAL Attribute:   Length: 1538 Precision: 1538 Scale: 0  Definition: INTERVAL(1538,0) 
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 28  Name: col_intervalym Type:  Attribute:   Length: 1538 Precision: 0 Scale: 0  Definition: 
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column col_intervalds
2014-11-20 17:39:13.117 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - get mapped column...
2014-11-20 17:39:13.117 [main] INFO  org.openbusinessintelligence.core.db.DictionaryConversionBean - got mapped column
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - convert datatype...
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE TYPE NAME = INTERVAL
2014-11-20 17:39:13.117 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SOURCE JDBC TYPE = 0
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - TARGET TYPE = 
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH OPTION = true
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - SCALE OPTION = false
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - LENGTH MULTIPLIER = 1
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Set length (precision), NOT scale
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Use source data length!
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.TypeConversionBean - Type conhversion not supported
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - datatype converted
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Source column 29  Name: col_intervalds Type: INTERVAL Attribute:   Length: 2893 Precision: 2893 Scale: 0  Definition: INTERVAL(2893,0) 
2014-11-20 17:39:13.119 [main] DEBUG org.openbusinessintelligence.core.db.DictionaryConversionBean - Target column 29  Name: col_intervalds Type:  Attribute:   Length: 2893 Precision: 0 Scale: 0  Definition: 
2014-11-20 17:39:13.120 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - ########################################
2014-11-20 17:39:13.120 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - CREATING TABLE
2014-11-20 17:39:13.120 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Schema: TEST
2014-11-20 17:39:13.160 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_DB2_TAB_TEST
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_DERBY_TAB_TEST
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_EXASOL_TAB_TEST
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_FIREBIRD_TAB_TEST
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_H2_TAB_TEST
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_HDB_TAB_TEST
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_HIVE_TAB_TEST
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_HSQL_TAB_TEST
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_IFX_TAB_TEST
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Table exists
2014-11-20 17:39:13.161 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_IMPALA_TAB_TEST
2014-11-20 17:39:13.162 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_MYSQL_TAB_TEST
2014-11-20 17:39:13.162 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_NETEZZA_TAB_TEST
2014-11-20 17:39:13.162 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_ORACLE_TAB_TEST
2014-11-20 17:39:13.162 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_POSTGRE_TAB_TEST
2014-11-20 17:39:13.162 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_SQLANY_TAB_TEST
2014-11-20 17:39:13.162 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_SQLSERVER_TAB_TEST
2014-11-20 17:39:13.162 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_TERADATA_TAB_TEST
2014-11-20 17:39:13.162 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.STG_VERTICA_TAB_TEST
2014-11-20 17:39:13.162 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Found table: TEST.TAB_TEST
2014-11-20 17:39:13.168 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Drop table if it exists: true
2014-11-20 17:39:13.168 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Table exists:            true
2014-11-20 17:39:13.168 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Drop table
2014-11-20 17:39:13.168 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Drop statement:
DROP TABLE test.stg_ifx_tab_test
2014-11-20 17:39:13.233 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Table dropped
2014-11-20 17:39:13.233 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Create table
2014-11-20 17:39:13.233 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Column: col_intervalym type non supported
2014-11-20 17:39:13.233 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Column: col_intervalds type non supported
2014-11-20 17:39:13.233 [main] DEBUG org.openbusinessintelligence.core.db.TableCreateBean - Creation statement:
CREATE TABLE test.stg_ifx_tab_test(col_boolean BOOLEAN ,col_int8 BIGINT ,col_smallint SMALLINT ,col_int INTEGER ,col_integer INTEGER ,col_bigint BIGINT ,col_serial INTEGER ,col_numeric NUMERIC(31,8) ,col_dec NUMERIC(16,16) ,col_decimal NUMERIC(27,2) ,col_money BIGINT ,col_real DOUBLE ,col_smallfloat DOUBLE ,col_float DOUBLE ,col_double DOUBLE ,col_char VARCHAR(255) ,col_varchar VARCHAR(255) ,col_lvarchar VARCHAR(6000) ,col_nchar VARCHAR(255) ,col_nvarchar VARCHAR(255) ,col_text CLOB(215741641) ,col_clob CLOB(215741641) ,col_binary18 VARCHAR(18) FOR BIT DATA,col_binaryvar VARCHAR(255) FOR BIT DATA,col_byte BLOB(215741641) ,col_blob BLOB(215741641) ,col_date TIMESTAMP ,col_datetime TIMESTAMP )
2014-11-20 17:39:13.281 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - Table created
2014-11-20 17:39:13.281 [main] INFO  org.openbusinessintelligence.core.db.TableCreateBean - ########################################
2014-11-20 17:39:13.281 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 17:39:13.285 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 17:39:13.285 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:39:13.285 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_derby_dwhdev_test
2014-11-20 17:39:13.286 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:39:13.296 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:derby://localhost:55000/dwhdev;create=false
2014-11-20 17:39:13.296 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:39:13.296 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: Apache Derby
2014-11-20 17:39:13.299 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:39:13.322 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEALIAS,BIGINT,BOOLEAN,CALL,CLASS,COPY,DB2J_DEBUG,EXECUTE,EXPLAIN,FILE,FILTER,GETCURRENTCONNECTION,INDEX,INSTANCEOF,METHOD,NEW,OFF,PROPERTIES,RECOMPILE,RENAME,RUNTIMESTATISTICS,STATEMENT,STATISTICS,TIMING,WAIT
2014-11-20 17:39:13.322 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:39:13.322 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string: "
2014-11-20 17:39:13.322 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:39:13.322 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 0
2014-11-20 17:39:13.322 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:13.322 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:39:13.331 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:13.331 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:39:13.352 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - APP
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHSTAGE
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NULLID
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SQLJ
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYS
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCAT
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCS_DIAG
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCS_UTIL
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSFUN
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBM
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPROC
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSSTAT
2014-11-20 17:39:13.353 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST
2014-11-20 17:39:13.355 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:13.355 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:39:13.384 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BIGINT null
2014-11-20 17:39:13.384 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR FOR BIT DATA null
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR () FOR BIT DATA length
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR () FOR BIT DATA length
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR null
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR length
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NUMERIC precision,scale
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECIMAL precision,scale
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - INTEGER null
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SMALLINT null
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - FLOAT precision
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REAL null
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DOUBLE null
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR length
2014-11-20 17:39:13.385 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BOOLEAN null
2014-11-20 17:39:13.386 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DATE null
2014-11-20 17:39:13.386 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIME null
2014-11-20 17:39:13.386 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIMESTAMP null
2014-11-20 17:39:13.386 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - OBJECT null
2014-11-20 17:39:13.386 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BLOB length
2014-11-20 17:39:13.386 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CLOB length
2014-11-20 17:39:13.386 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - XML null
2014-11-20 17:39:13.389 [main] INFO  org.openbusinessintelligence.cli.Main - Feeding table: tab_test
2014-11-20 17:39:13.391 [main] DEBUG org.openbusinessintelligence.cli.Main - trgpreservedata: No such option
2014-11-20 17:39:13.392 [main] DEBUG org.openbusinessintelligence.cli.Main - mapdeffile: No such option
2014-11-20 17:39:13.392 [main] DEBUG org.openbusinessintelligence.cli.Main - commitfrequency: No such option
2014-11-20 17:39:13.392 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:39:13.392 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - RETRIEVING COLUMN LIST...
2014-11-20 17:39:13.392 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - Source schema: null - Source table: tab_test
2014-11-20 17:39:13.392 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Getting columns for source...
2014-11-20 17:39:13.392 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Source RDBMS product: Informix Dynamic Server
2014-11-20 17:39:13.392 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Default schema: null
2014-11-20 17:39:13.392 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Table schema: null
2014-11-20 17:39:13.392 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Prefix for source table: 
2014-11-20 17:39:13.510 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 0 Name: col_boolean Type: BOOLEAN Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:16
2014-11-20 17:39:13.510 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 1 Name: col_int8 Type: INT8 Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:39:13.510 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 2 Name: col_smallint Type: SMALLINT Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:5
2014-11-20 17:39:13.510 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 3 Name: col_int Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 4 Name: col_integer Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 5 Name: col_bigint Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 6 Name: col_serial Type: SERIAL Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 7 Name: col_numeric Type: DECIMAL Length: 32 Precision: 32 Scale: 8 Attribute:  JDBC Type:3
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 8 Name: col_dec Type: DECIMAL Length: 16 Precision: 16 Scale: 255 Attribute:  JDBC Type:3
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 9 Name: col_decimal Type: DECIMAL Length: 27 Precision: 27 Scale: 2 Attribute:  JDBC Type:3
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 10 Name: col_money Type: MONEY Length: 26 Precision: 26 Scale: 8 Attribute:  JDBC Type:3
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 11 Name: col_real Type: SMALLFLOAT Length: 7 Precision: 7 Scale: 0 Attribute:  JDBC Type:7
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 12 Name: col_smallfloat Type: SMALLFLOAT Length: 7 Precision: 7 Scale: 0 Attribute:  JDBC Type:7
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 13 Name: col_float Type: FLOAT Length: 17 Precision: 17 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 14 Name: col_double Type: FLOAT Length: 17 Precision: 17 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 15 Name: col_char Type: CHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:39:13.511 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 16 Name: col_varchar Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 17 Name: col_lvarchar Type: LVARCHAR Length: 6000 Precision: 6000 Scale: 0 Attribute:  JDBC Type:-1
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 18 Name: col_nchar Type: NCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 19 Name: col_nvarchar Type: NVARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 20 Name: col_text Type: TEXT Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 21 Name: col_clob Type: CLOB Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 22 Name: col_binary18 Type: BINARY18 Length: 18 Precision: 18 Scale: 0 Attribute:  JDBC Type:0
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 23 Name: col_binaryvar Type: BINARYVAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:-1
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 24 Name: col_byte Type: BYTE Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 25 Name: col_blob Type: BLOB Length: 2147483647 Precision: 2147483647 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 26 Name: col_date Type: DATE Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:91
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 27 Name: col_datetime Type: DATETIME Length: 23 Precision: 23 Scale: 0 Attribute:  JDBC Type:93
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 28 Name: col_intervalym Type: INTERVAL Length: 1538 Precision: 1538 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 29 Name: col_intervalds Type: INTERVAL Length: 2893 Precision: 2893 Scale: 0 Attribute:  JDBC Type:1
2014-11-20 17:39:13.512 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got column properties
2014-11-20 17:39:13.512 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - getting pk properties
2014-11-20 17:39:13.512 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - get primary key information...
2014-11-20 17:39:13.512 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Table: tab_test
2014-11-20 17:39:13.531 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got pk properties
2014-11-20 17:39:13.531 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got primary key information
2014-11-20 17:39:13.531 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - Target schema: test - Target table: stg_ifx_tab_test
2014-11-20 17:39:13.531 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Getting columns for source...
2014-11-20 17:39:13.531 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Source RDBMS product: Apache Derby
2014-11-20 17:39:13.531 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Default schema: 
2014-11-20 17:39:13.531 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - Table schema: test
2014-11-20 17:39:13.531 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Prefix for source table: test.
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 0 Name: COL_BOOLEAN Type: BOOLEAN Length: 1 Precision: 1 Scale: 0 Attribute:  JDBC Type:16
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 1 Name: COL_INT8 Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 2 Name: COL_SMALLINT Type: SMALLINT Length: 5 Precision: 5 Scale: 0 Attribute:  JDBC Type:5
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 3 Name: COL_INT Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 4 Name: COL_INTEGER Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 5 Name: COL_BIGINT Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 6 Name: COL_SERIAL Type: INTEGER Length: 10 Precision: 10 Scale: 0 Attribute:  JDBC Type:4
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 7 Name: COL_NUMERIC Type: NUMERIC Length: 31 Precision: 31 Scale: 8 Attribute:  JDBC Type:2
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 8 Name: COL_DEC Type: NUMERIC Length: 16 Precision: 16 Scale: 16 Attribute:  JDBC Type:2
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 9 Name: COL_DECIMAL Type: NUMERIC Length: 27 Precision: 27 Scale: 2 Attribute:  JDBC Type:2
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 10 Name: COL_MONEY Type: BIGINT Length: 19 Precision: 19 Scale: 0 Attribute:  JDBC Type:-5
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 11 Name: COL_REAL Type: DOUBLE Length: 52 Precision: 52 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 12 Name: COL_SMALLFLOAT Type: DOUBLE Length: 52 Precision: 52 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 13 Name: COL_FLOAT Type: DOUBLE Length: 52 Precision: 52 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 14 Name: COL_DOUBLE Type: DOUBLE Length: 52 Precision: 52 Scale: 0 Attribute:  JDBC Type:8
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 15 Name: COL_CHAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 16 Name: COL_VARCHAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 17 Name: COL_LVARCHAR Type: VARCHAR Length: 6000 Precision: 6000 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 18 Name: COL_NCHAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:39:13.601 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 19 Name: COL_NVARCHAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute:  JDBC Type:12
2014-11-20 17:39:13.602 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 20 Name: COL_TEXT Type: CLOB Length: 215741641 Precision: 215741641 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:39:13.602 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 21 Name: COL_CLOB Type: CLOB Length: 215741641 Precision: 215741641 Scale: 0 Attribute:  JDBC Type:2005
2014-11-20 17:39:13.602 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 22 Name: COL_BINARY18 Type: VARCHAR Length: 18 Precision: 18 Scale: 0 Attribute: FOR BIT DATA JDBC Type:-3
2014-11-20 17:39:13.602 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 23 Name: COL_BINARYVAR Type: VARCHAR Length: 255 Precision: 255 Scale: 0 Attribute: FOR BIT DATA JDBC Type:-3
2014-11-20 17:39:13.602 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 24 Name: COL_BYTE Type: BLOB Length: 215741641 Precision: 215741641 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:39:13.602 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 25 Name: COL_BLOB Type: BLOB Length: 215741641 Precision: 215741641 Scale: 0 Attribute:  JDBC Type:2004
2014-11-20 17:39:13.602 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 26 Name: COL_DATE Type: TIMESTAMP Length: 29 Precision: 29 Scale: 9 Attribute:  JDBC Type:93
2014-11-20 17:39:13.602 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Column 27 Name: COL_DATETIME Type: TIMESTAMP Length: 29 Precision: 29 Scale: 9 Attribute:  JDBC Type:93
2014-11-20 17:39:13.602 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got column properties
2014-11-20 17:39:13.602 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - getting pk properties
2014-11-20 17:39:13.602 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - get primary key information...
2014-11-20 17:39:13.602 [main] DEBUG org.openbusinessintelligence.core.db.TableDictionaryBean - Table: stg_ifx_tab_test
2014-11-20 17:39:13.618 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got pk properties
2014-11-20 17:39:13.618 [main] INFO  org.openbusinessintelligence.core.db.TableDictionaryBean - got primary key information
2014-11-20 17:39:13.620 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - COLUMN LIST RETRIEVED
2014-11-20 17:39:13.620 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:39:13.620 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:39:13.620 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - GETTING DATA
2014-11-20 17:39:13.620 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BOOLEAN
2014-11-20 17:39:13.620 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INT8
2014-11-20 17:39:13.620 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SMALLINT
2014-11-20 17:39:13.620 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INT
2014-11-20 17:39:13.620 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INTEGER
2014-11-20 17:39:13.620 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BIGINT
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SERIAL
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NUMERIC
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DEC
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DECIMAL
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_MONEY
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_REAL
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SMALLFLOAT
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_FLOAT
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DOUBLE
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_CHAR
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_CHAR
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_VARCHAR
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_LVARCHAR
2014-11-20 17:39:13.621 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NCHAR
2014-11-20 17:39:13.622 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NCHAR
2014-11-20 17:39:13.622 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NVARCHAR
2014-11-20 17:39:13.622 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BINARY18
2014-11-20 17:39:13.622 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BINARYVAR
2014-11-20 17:39:13.622 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DATE
2014-11-20 17:39:13.622 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DATETIME
2014-11-20 17:39:13.622 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting complete identifier for object tab_test
2014-11-20 17:39:13.622 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - SELECT COL_BOOLEAN,COL_INT8,COL_SMALLINT,COL_INT,COL_INTEGER,COL_BIGINT,COL_SERIAL,COL_NUMERIC,COL_DEC,COL_DECIMAL,COL_MONEY,COL_REAL,COL_SMALLFLOAT,COL_FLOAT,COL_DOUBLE,TRIM(TRAILING FROM COL_CHAR) AS COL_CHAR,COL_VARCHAR,COL_LVARCHAR,TRIM(TRAILING FROM COL_NCHAR) AS COL_NCHAR,COL_NVARCHAR,COL_BINARY18,COL_BINARYVAR,COL_DATE,COL_DATETIME FROM tab_test
2014-11-20 17:39:13.634 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - DATA READY
2014-11-20 17:39:13.634 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - GOT DATA
2014-11-20 17:39:13.634 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:39:13.634 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:39:13.635 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - INSERTING DATA...
2014-11-20 17:39:13.635 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - Preserve target data = false
2014-11-20 17:39:13.635 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - Truncate table
2014-11-20 17:39:13.635 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - TRUNCATE TABLE test.stg_ifx_tab_test
2014-11-20 17:39:13.679 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - Table truncated
2014-11-20 17:39:13.679 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BOOLEAN
2014-11-20 17:39:13.679 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INT8
2014-11-20 17:39:13.679 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SMALLINT
2014-11-20 17:39:13.679 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INT
2014-11-20 17:39:13.679 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_INTEGER
2014-11-20 17:39:13.679 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BIGINT
2014-11-20 17:39:13.679 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SERIAL
2014-11-20 17:39:13.679 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NUMERIC
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DEC
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DECIMAL
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_MONEY
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_REAL
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_SMALLFLOAT
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_FLOAT
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DOUBLE
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_CHAR
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_VARCHAR
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_LVARCHAR
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NCHAR
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_NVARCHAR
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BINARY18
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_BINARYVAR
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DATE
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting identifier for column COL_DATETIME
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - INSERT INTO test.stg_ifx_tab_test (COL_BOOLEAN,COL_INT8,COL_SMALLINT,COL_INT,COL_INTEGER,COL_BIGINT,COL_SERIAL,COL_NUMERIC,COL_DEC,COL_DECIMAL,COL_MONEY,COL_REAL,COL_SMALLFLOAT,COL_FLOAT,COL_DOUBLE,COL_CHAR,COL_VARCHAR,COL_LVARCHAR,COL_NCHAR,COL_NVARCHAR,COL_BINARY18,COL_BINARYVAR,COL_DATE,COL_DATETIME) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,RTRIM(?),?,?,RTRIM(?),?,?,?,?,?)
2014-11-20 17:39:13.680 [main] DEBUG org.openbusinessintelligence.core.db.DataCopyBean - Statement prepared
2014-11-20 17:39:13.681 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - Commit every 0 rows
2014-11-20 17:39:13.823 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - 10 rows totally inserted
2014-11-20 17:39:13.823 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - INSERT COMPLETED
2014-11-20 17:39:13.823 [main] INFO  org.openbusinessintelligence.core.db.DataCopyBean - ########################################
2014-11-20 17:39:13.823 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 17:39:13.830 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 17:39:13.830 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closing connection
2014-11-20 17:39:13.834 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Closed connection
2014-11-20 17:39:13.835 [main] INFO  org.openbusinessintelligence.cli.Main - FINISH
2014-11-20 17:39:13.835 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:39:27.251 [main] INFO  org.openbusinessintelligence.cli.Main - ###################################################################
2014-11-20 17:39:27.252 [main] INFO  org.openbusinessintelligence.cli.Main - START
2014-11-20 17:39:27.253 [main] INFO  org.openbusinessintelligence.cli.Main - Configure command line options
2014-11-20 17:39:27.277 [main] INFO  org.openbusinessintelligence.cli.Main - Options configured
2014-11-20 17:39:27.280 [main] INFO  org.openbusinessintelligence.cli.Main - Copy an entire schema, a single table or the result of a query from a database to another
2014-11-20 17:39:27.285 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbconnkeywordfile: No such option
2014-11-20 17:39:27.285 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbdriverclass: No such option
2014-11-20 17:39:27.285 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbconnectionurl: No such option
2014-11-20 17:39:27.285 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbusername: No such option
2014-11-20 17:39:27.285 [main] DEBUG org.openbusinessintelligence.cli.Main - srcdbpassword: No such option
2014-11-20 17:39:27.285 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbconnkeywordfile: No such option
2014-11-20 17:39:27.286 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbdriverclass: No such option
2014-11-20 17:39:27.286 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbconnectionurl: No such option
2014-11-20 17:39:27.286 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbusername: No such option
2014-11-20 17:39:27.286 [main] DEBUG org.openbusinessintelligence.cli.Main - trgdbpassword: No such option
2014-11-20 17:39:27.286 [main] INFO  org.openbusinessintelligence.cli.Main - Source and target connections prepared
2014-11-20 17:39:27.287 [main] INFO  org.openbusinessintelligence.cli.Main - Source schema: sugarcrm
2014-11-20 17:39:27.287 [main] DEBUG org.openbusinessintelligence.cli.Main - sourcetable: No such option
2014-11-20 17:39:27.287 [main] INFO  org.openbusinessintelligence.cli.Main - Source table: null
2014-11-20 17:39:27.287 [main] DEBUG org.openbusinessintelligence.cli.Main - sourcequery: No such option
2014-11-20 17:39:27.288 [main] INFO  org.openbusinessintelligence.cli.Main - Source query: null
2014-11-20 17:39:27.288 [main] INFO  org.openbusinessintelligence.cli.Main - Target schema: dwhstage
2014-11-20 17:39:27.288 [main] DEBUG org.openbusinessintelligence.cli.Main - targettable: No such option
2014-11-20 17:39:27.288 [main] INFO  org.openbusinessintelligence.cli.Main - Target table: null
2014-11-20 17:39:27.288 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:39:27.289 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_db2_dwhdev_sugarcrm
2014-11-20 17:39:27.290 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - databaseDriver = com.ibm.db2.jcc.DB2Driver
2014-11-20 17:39:27.290 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - connectionURL = jdbc:db2://localhost:50000/dwhdev
2014-11-20 17:39:27.320 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:39:28.104 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:db2://localhost:50000/dwhdev
2014-11-20 17:39:28.104 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:39:28.104 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: DB2/LINUXX8664
2014-11-20 17:39:28.110 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:39:28.111 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUEAFTER,ALIAS,ALLOW,APPLICATION,ASSOCIATE,ASUTIME,AUDIT,AUX,AUXILIARY,BEFORE,BINARY,BUFFERPOOL,CACHE,CALL,CALLED,CAPTURE,CARDINALITY,CCSID,CLUSTER,COLLECTION,COLLID,COMMENT,CONCAT,CONDITION,CONTAINS,COUNT_BIG,CURRENT_LC_CTYPE,CURRENT_PATH,CURRENT_SERVER,CURRENT_TIMEZONE,CYCLE,DATA,DATABASE,DAYS,DB2GENERAL,DB2GENRL,DB2SQL,DBINFO,DEFAULTS,DEFINITION,DETERMINISTIC,DISALLOW,DO,DSNHATTR,DSSIZE,DYNAMIC,EACH,EDITPROC,ELSEIF,ENCODING,END-EXEC1,ERASE,EXCLUDING,EXIT,FENCED,FIELDPROC,FILE,FINAL,FREE,FUNCTION,GENERAL,GENERATED,GRAPHIC,HANDLER,HOLD,HOURS,IF,INCLUDING,INCREMENT,INDEX,INHERIT,INOUT,INTEGRITY,ISOBID,ITERATE,JAR,JAVA,LABEL,LC_CTYPE,LEAVE,LINKTYPE,LOCALE,LOCATOR,LOCATORS,LOCK,LOCKMAX,LOCKSIZE,LONG,LOOP,MAXVALUE,MICROSECOND,MICROSECONDS,MINUTES,MINVALUE,MODE,MODIFIES,MONTHS,NEW,NEW_TABLE,NOCACHE,NOCYCLE,NODENAME,NODENUMBER,NOMAXVALUE,NOMINVALUE,NOORDER,NULLS,NUMPARTS,OBID,OLD,OLD_TABLE,OPTIMIZATION,OPTIMIZE,OUT,OVERRIDING,PACKAGE,PARAMETER,PART,PARTITION,PATH,PIECESIZE,PLAN,PRIQTY,PROGRAM,PSID,QUERYNO,READS,RECOVERY,REFERENCING,RELEASE,RENAME,REPEAT,RESET,RESIGNAL,RESTART,RESULT,RESULT_SET_LOCATOR,RETURN,RETURNS,ROUTINE,ROW,RRN,RUN,SAVEPOINT,SCRATCHPAD,SECONDS,SECQTY,SECURITY,SENSITIVE,SIGNAL,SIMPLE,SOURCE,SPECIFIC,SQLID,STANDARD,START,STATIC,STAY,STOGROUP,STORES,STYLE,SUBPAGES,SYNONYM,SYSFUN,SYSIBM,SYSPROC,SYSTEM,TABLESPACE,TRIGGER,TYPE,UNDO,UNTIL,VALIDPROC,VARIABLE,VARIANT,VCAT,VOLUMES,WHILE,WLM,YEARS
2014-11-20 17:39:28.111 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting quote string...
2014-11-20 17:39:28.111 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Quote string: "
2014-11-20 17:39:28.111 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting max row size...
2014-11-20 17:39:28.112 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Max row size: 32677
2014-11-20 17:39:28.112 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:28.112 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found catalogs:
2014-11-20 17:39:28.428 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHDEV
2014-11-20 17:39:28.430 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:28.431 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found schemas:
2014-11-20 17:39:28.448 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DB2INST
2014-11-20 17:39:28.449 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DWHSTAGE
2014-11-20 17:39:28.449 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - NULLID
2014-11-20 17:39:28.449 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SQLJ
2014-11-20 17:39:28.449 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM
2014-11-20 17:39:28.449 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSCAT
2014-11-20 17:39:28.449 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSFUN
2014-11-20 17:39:28.449 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBM
2014-11-20 17:39:28.449 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBMADM
2014-11-20 17:39:28.450 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBMINTERNAL
2014-11-20 17:39:28.450 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSIBMTS
2014-11-20 17:39:28.450 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPROC
2014-11-20 17:39:28.450 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSPUBLIC
2014-11-20 17:39:28.450 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSSTAT
2014-11-20 17:39:28.450 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SYSTOOLS
2014-11-20 17:39:28.450 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TEST
2014-11-20 17:39:28.452 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:28.452 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Found types:
2014-11-20 17:39:28.465 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BIGINT null
2014-11-20 17:39:28.465 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR FOR BIT DATA null
2014-11-20 17:39:28.465 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR () FOR BIT DATA LENGTH
2014-11-20 17:39:28.465 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR () FOR BIT DATA LENGTH
2014-11-20 17:39:28.465 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARCHAR LENGTH
2014-11-20 17:39:28.466 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - LONG VARGRAPHIC null
2014-11-20 17:39:28.466 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CHAR LENGTH
2014-11-20 17:39:28.466 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - GRAPHIC LENGTH
2014-11-20 17:39:28.466 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECIMAL PRECISION,SCALE
2014-11-20 17:39:28.466 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - INTEGER null
2014-11-20 17:39:28.466 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SMALLINT null
2014-11-20 17:39:28.466 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - REAL null
2014-11-20 17:39:28.466 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DOUBLE null
2014-11-20 17:39:28.467 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARCHAR LENGTH
2014-11-20 17:39:28.467 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - VARGRAPHIC LENGTH
2014-11-20 17:39:28.467 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BOOLEAN null
2014-11-20 17:39:28.467 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DATE null
2014-11-20 17:39:28.467 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIME null
2014-11-20 17:39:28.467 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - TIMESTAMP null
2014-11-20 17:39:28.467 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DECFLOAT PRECISION
2014-11-20 17:39:28.467 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - XML null
2014-11-20 17:39:28.468 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DISTINCT null
2014-11-20 17:39:28.468 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ROW null
2014-11-20 17:39:28.468 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ARRAY null
2014-11-20 17:39:28.468 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - BLOB LENGTH
2014-11-20 17:39:28.468 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - CLOB LENGTH
2014-11-20 17:39:28.468 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - DBCLOB LENGTH
2014-11-20 17:39:28.470 [main] INFO  org.openbusinessintelligence.cli.Main - Copy all objects of a schema
2014-11-20 17:39:28.470 [main] INFO  org.openbusinessintelligence.cli.Main - Table prefix: sgc
2014-11-20 17:39:28.470 [main] INFO  org.openbusinessintelligence.cli.Main - Table suffix: stg
2014-11-20 17:39:28.470 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - ########################################
2014-11-20 17:39:28.470 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - RDBMS type: DB2/LINUXX8664
2014-11-20 17:39:28.470 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Get tables for schema: sugarcrm
2014-11-20 17:39:28.470 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Serching in a jdbc schema...
2014-11-20 17:39:28.484 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Tables obtained
2014-11-20 17:39:28.485 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACCOUNTS
2014-11-20 17:39:28.485 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACCOUNTS_AUDIT
2014-11-20 17:39:28.485 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACCOUNTS_BUGS
2014-11-20 17:39:28.485 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACCOUNTS_CASES
2014-11-20 17:39:28.485 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACCOUNTS_CONTACTS
2014-11-20 17:39:28.485 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACCOUNTS_OPPORTUNITIES
2014-11-20 17:39:28.486 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACL_ACTIONS
2014-11-20 17:39:28.486 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACL_ROLES
2014-11-20 17:39:28.486 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACL_ROLES_ACTIONS
2014-11-20 17:39:28.486 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ACL_ROLES_USERS
2014-11-20 17:39:28.486 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ADDRESS_BOOK
2014-11-20 17:39:28.486 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.BUGS
2014-11-20 17:39:28.486 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.BUGS_AUDIT
2014-11-20 17:39:28.486 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CALLS
2014-11-20 17:39:28.487 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CALLS_CONTACTS
2014-11-20 17:39:28.487 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CALLS_LEADS
2014-11-20 17:39:28.487 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CALLS_USERS
2014-11-20 17:39:28.487 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CAMPAIGNS
2014-11-20 17:39:28.487 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CAMPAIGNS_AUDIT
2014-11-20 17:39:28.487 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CAMPAIGN_LOG
2014-11-20 17:39:28.487 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CAMPAIGN_TRKRS
2014-11-20 17:39:28.487 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CASES
2014-11-20 17:39:28.488 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CASES_AUDIT
2014-11-20 17:39:28.488 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CASES_BUGS
2014-11-20 17:39:28.488 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CONFIG
2014-11-20 17:39:28.488 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CONTACTS
2014-11-20 17:39:28.488 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CONTACTS_AUDIT
2014-11-20 17:39:28.488 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CONTACTS_BUGS
2014-11-20 17:39:28.488 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CONTACTS_CASES
2014-11-20 17:39:28.489 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CONTACTS_USERS
2014-11-20 17:39:28.489 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CRON_REMOVE_DOCUMENTS
2014-11-20 17:39:28.489 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CURRENCIES
2014-11-20 17:39:28.489 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.CUSTOM_FIELDS
2014-11-20 17:39:28.489 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.DOCUMENTS
2014-11-20 17:39:28.489 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.DOCUMENTS_ACCOUNTS
2014-11-20 17:39:28.490 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.DOCUMENTS_BUGS
2014-11-20 17:39:28.490 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.DOCUMENTS_CASES
2014-11-20 17:39:28.490 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.DOCUMENTS_CONTACTS
2014-11-20 17:39:28.490 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.DOCUMENTS_OPPORTUNITIES
2014-11-20 17:39:28.490 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.DOCUMENT_REVISIONS
2014-11-20 17:39:28.490 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EAPM
2014-11-20 17:39:28.490 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAILMAN
2014-11-20 17:39:28.490 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAILS
2014-11-20 17:39:28.491 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAILS_BEANS
2014-11-20 17:39:28.491 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAILS_EMAIL_ADDR_REL
2014-11-20 17:39:28.491 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAILS_TEXT
2014-11-20 17:39:28.491 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAIL_ADDRESSES
2014-11-20 17:39:28.491 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAIL_ADDR_BEAN_REL
2014-11-20 17:39:28.491 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAIL_CACHE
2014-11-20 17:39:28.491 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAIL_MARKETING
2014-11-20 17:39:28.491 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAIL_MARKETING_PROSPECT_LISTS
2014-11-20 17:39:28.491 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.EMAIL_TEMPLATES
2014-11-20 17:39:28.492 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.FIELDS_META_DATA
2014-11-20 17:39:28.492 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.FOLDERS
2014-11-20 17:39:28.492 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.FOLDERS_REL
2014-11-20 17:39:28.492 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.FOLDERS_SUBSCRIPTIONS
2014-11-20 17:39:28.492 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.IMPORT_MAPS
2014-11-20 17:39:28.492 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.INBOUND_EMAIL
2014-11-20 17:39:28.492 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.INBOUND_EMAIL_AUTOREPLY
2014-11-20 17:39:28.492 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.INBOUND_EMAIL_CACHE_TS
2014-11-20 17:39:28.492 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.JOB_QUEUE
2014-11-20 17:39:28.493 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.LEADS
2014-11-20 17:39:28.493 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.LEADS_AUDIT
2014-11-20 17:39:28.493 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.LINKED_DOCUMENTS
2014-11-20 17:39:28.493 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.MEETINGS
2014-11-20 17:39:28.493 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.MEETINGS_CONTACTS
2014-11-20 17:39:28.493 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.MEETINGS_LEADS
2014-11-20 17:39:28.493 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.MEETINGS_USERS
2014-11-20 17:39:28.494 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.NOTES
2014-11-20 17:39:28.494 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.OAUTH_CONSUMER
2014-11-20 17:39:28.495 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.OAUTH_NONCE
2014-11-20 17:39:28.495 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.OAUTH_TOKENS
2014-11-20 17:39:28.495 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.OPPORTUNITIES
2014-11-20 17:39:28.496 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.OPPORTUNITIES_AUDIT
2014-11-20 17:39:28.496 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.OPPORTUNITIES_CONTACTS
2014-11-20 17:39:28.496 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.OUTBOUND_EMAIL
2014-11-20 17:39:28.496 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROJECT
2014-11-20 17:39:28.497 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROJECTS_ACCOUNTS
2014-11-20 17:39:28.497 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROJECTS_BUGS
2014-11-20 17:39:28.497 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROJECTS_CASES
2014-11-20 17:39:28.497 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROJECTS_CONTACTS
2014-11-20 17:39:28.497 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROJECTS_OPPORTUNITIES
2014-11-20 17:39:28.497 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROJECTS_PRODUCTS
2014-11-20 17:39:28.497 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROJECT_TASK
2014-11-20 17:39:28.498 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROJECT_TASK_AUDIT
2014-11-20 17:39:28.498 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROSPECTS
2014-11-20 17:39:28.498 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROSPECT_LISTS
2014-11-20 17:39:28.498 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROSPECT_LISTS_PROSPECTS
2014-11-20 17:39:28.498 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.PROSPECT_LIST_CAMPAIGNS
2014-11-20 17:39:28.498 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.RELATIONSHIPS
2014-11-20 17:39:28.498 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.RELEASES
2014-11-20 17:39:28.498 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ROLES
2014-11-20 17:39:28.499 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ROLES_MODULES
2014-11-20 17:39:28.499 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.ROLES_USERS
2014-11-20 17:39:28.499 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.SAVED_SEARCH
2014-11-20 17:39:28.499 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.SCHEDULERS
2014-11-20 17:39:28.499 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.SUGARFEED
2014-11-20 17:39:28.499 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.TAB_TEST
2014-11-20 17:39:28.499 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.TASKS
2014-11-20 17:39:28.499 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.TRACKER
2014-11-20 17:39:28.499 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.UPGRADE_HISTORY
2014-11-20 17:39:28.500 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.USERS
2014-11-20 17:39:28.500 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.USERS_FEEDS
2014-11-20 17:39:28.500 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.USERS_LAST_IMPORT
2014-11-20 17:39:28.500 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.USERS_PASSWORD_LINK
2014-11-20 17:39:28.500 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.USERS_SIGNATURES
2014-11-20 17:39:28.500 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.USER_PREFERENCES
2014-11-20 17:39:28.500 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.VCALS
2014-11-20 17:39:28.500 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - SUGARCRM.VERSIONS
2014-11-20 17:39:28.502 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACCOUNTS_stg - source: ACCOUNTS
2014-11-20 17:39:28.502 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACCOUNTS_AUDIT_stg - source: ACCOUNTS_AUDIT
2014-11-20 17:39:28.502 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACCOUNTS_BUGS_stg - source: ACCOUNTS_BUGS
2014-11-20 17:39:28.502 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACCOUNTS_CASES_stg - source: ACCOUNTS_CASES
2014-11-20 17:39:28.502 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACCOUNTS_CONTACTS_stg - source: ACCOUNTS_CONTACTS
2014-11-20 17:39:28.502 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACCOUNTS_OPPORTUNITIES_stg - source: ACCOUNTS_OPPORTUNITIES
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACL_ACTIONS_stg - source: ACL_ACTIONS
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACL_ROLES_stg - source: ACL_ROLES
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACL_ROLES_ACTIONS_stg - source: ACL_ROLES_ACTIONS
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ACL_ROLES_USERS_stg - source: ACL_ROLES_USERS
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ADDRESS_BOOK_stg - source: ADDRESS_BOOK
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_BUGS_stg - source: BUGS
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_BUGS_AUDIT_stg - source: BUGS_AUDIT
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CALLS_stg - source: CALLS
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CALLS_CONTACTS_stg - source: CALLS_CONTACTS
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CALLS_LEADS_stg - source: CALLS_LEADS
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CALLS_USERS_stg - source: CALLS_USERS
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CAMPAIGNS_stg - source: CAMPAIGNS
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CAMPAIGNS_AUDIT_stg - source: CAMPAIGNS_AUDIT
2014-11-20 17:39:28.503 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CAMPAIGN_LOG_stg - source: CAMPAIGN_LOG
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CAMPAIGN_TRKRS_stg - source: CAMPAIGN_TRKRS
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CASES_stg - source: CASES
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CASES_AUDIT_stg - source: CASES_AUDIT
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CASES_BUGS_stg - source: CASES_BUGS
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CONFIG_stg - source: CONFIG
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CONTACTS_stg - source: CONTACTS
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CONTACTS_AUDIT_stg - source: CONTACTS_AUDIT
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CONTACTS_BUGS_stg - source: CONTACTS_BUGS
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CONTACTS_CASES_stg - source: CONTACTS_CASES
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CONTACTS_USERS_stg - source: CONTACTS_USERS
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CRON_REMOVE_DOCUMENTS_stg - source: CRON_REMOVE_DOCUMENTS
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CURRENCIES_stg - source: CURRENCIES
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_CUSTOM_FIELDS_stg - source: CUSTOM_FIELDS
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_DOCUMENTS_stg - source: DOCUMENTS
2014-11-20 17:39:28.504 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_DOCUMENTS_ACCOUNTS_stg - source: DOCUMENTS_ACCOUNTS
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_DOCUMENTS_BUGS_stg - source: DOCUMENTS_BUGS
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_DOCUMENTS_CASES_stg - source: DOCUMENTS_CASES
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_DOCUMENTS_CONTACTS_stg - source: DOCUMENTS_CONTACTS
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_DOCUMENTS_OPPORTUNITIES_stg - source: DOCUMENTS_OPPORTUNITIES
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_DOCUMENT_REVISIONS_stg - source: DOCUMENT_REVISIONS
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EAPM_stg - source: EAPM
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAILMAN_stg - source: EMAILMAN
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAILS_stg - source: EMAILS
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAILS_BEANS_stg - source: EMAILS_BEANS
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAILS_EMAIL_ADDR_REL_stg - source: EMAILS_EMAIL_ADDR_REL
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAILS_TEXT_stg - source: EMAILS_TEXT
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAIL_ADDRESSES_stg - source: EMAIL_ADDRESSES
2014-11-20 17:39:28.505 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAIL_ADDR_BEAN_REL_stg - source: EMAIL_ADDR_BEAN_REL
2014-11-20 17:39:28.506 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAIL_CACHE_stg - source: EMAIL_CACHE
2014-11-20 17:39:28.506 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAIL_MARKETING_stg - source: EMAIL_MARKETING
2014-11-20 17:39:28.506 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAIL_MARKETING_PROSPECT_LISTS_stg - source: EMAIL_MARKETING_PROSPECT_LISTS
2014-11-20 17:39:28.506 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_EMAIL_TEMPLATES_stg - source: EMAIL_TEMPLATES
2014-11-20 17:39:28.513 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_FIELDS_META_DATA_stg - source: FIELDS_META_DATA
2014-11-20 17:39:28.513 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_FOLDERS_stg - source: FOLDERS
2014-11-20 17:39:28.514 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_FOLDERS_REL_stg - source: FOLDERS_REL
2014-11-20 17:39:28.515 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_FOLDERS_SUBSCRIPTIONS_stg - source: FOLDERS_SUBSCRIPTIONS
2014-11-20 17:39:28.515 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_IMPORT_MAPS_stg - source: IMPORT_MAPS
2014-11-20 17:39:28.515 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_INBOUND_EMAIL_stg - source: INBOUND_EMAIL
2014-11-20 17:39:28.515 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_INBOUND_EMAIL_AUTOREPLY_stg - source: INBOUND_EMAIL_AUTOREPLY
2014-11-20 17:39:28.515 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_INBOUND_EMAIL_CACHE_TS_stg - source: INBOUND_EMAIL_CACHE_TS
2014-11-20 17:39:28.516 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_JOB_QUEUE_stg - source: JOB_QUEUE
2014-11-20 17:39:28.516 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_LEADS_stg - source: LEADS
2014-11-20 17:39:28.516 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_LEADS_AUDIT_stg - source: LEADS_AUDIT
2014-11-20 17:39:28.516 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_LINKED_DOCUMENTS_stg - source: LINKED_DOCUMENTS
2014-11-20 17:39:28.516 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_MEETINGS_stg - source: MEETINGS
2014-11-20 17:39:28.516 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_MEETINGS_CONTACTS_stg - source: MEETINGS_CONTACTS
2014-11-20 17:39:28.516 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_MEETINGS_LEADS_stg - source: MEETINGS_LEADS
2014-11-20 17:39:28.516 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_MEETINGS_USERS_stg - source: MEETINGS_USERS
2014-11-20 17:39:28.516 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_NOTES_stg - source: NOTES
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_OAUTH_CONSUMER_stg - source: OAUTH_CONSUMER
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_OAUTH_NONCE_stg - source: OAUTH_NONCE
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_OAUTH_TOKENS_stg - source: OAUTH_TOKENS
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_OPPORTUNITIES_stg - source: OPPORTUNITIES
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_OPPORTUNITIES_AUDIT_stg - source: OPPORTUNITIES_AUDIT
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_OPPORTUNITIES_CONTACTS_stg - source: OPPORTUNITIES_CONTACTS
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_OUTBOUND_EMAIL_stg - source: OUTBOUND_EMAIL
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROJECT_stg - source: PROJECT
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROJECTS_ACCOUNTS_stg - source: PROJECTS_ACCOUNTS
2014-11-20 17:39:28.517 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROJECTS_BUGS_stg - source: PROJECTS_BUGS
2014-11-20 17:39:28.518 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROJECTS_CASES_stg - source: PROJECTS_CASES
2014-11-20 17:39:28.518 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROJECTS_CONTACTS_stg - source: PROJECTS_CONTACTS
2014-11-20 17:39:28.518 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROJECTS_OPPORTUNITIES_stg - source: PROJECTS_OPPORTUNITIES
2014-11-20 17:39:28.518 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROJECTS_PRODUCTS_stg - source: PROJECTS_PRODUCTS
2014-11-20 17:39:28.518 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROJECT_TASK_stg - source: PROJECT_TASK
2014-11-20 17:39:28.518 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROJECT_TASK_AUDIT_stg - source: PROJECT_TASK_AUDIT
2014-11-20 17:39:28.518 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROSPECTS_stg - source: PROSPECTS
2014-11-20 17:39:28.518 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROSPECT_LISTS_stg - source: PROSPECT_LISTS
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROSPECT_LISTS_PROSPECTS_stg - source: PROSPECT_LISTS_PROSPECTS
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_PROSPECT_LIST_CAMPAIGNS_stg - source: PROSPECT_LIST_CAMPAIGNS
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_RELATIONSHIPS_stg - source: RELATIONSHIPS
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_RELEASES_stg - source: RELEASES
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ROLES_stg - source: ROLES
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ROLES_MODULES_stg - source: ROLES_MODULES
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_ROLES_USERS_stg - source: ROLES_USERS
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_SAVED_SEARCH_stg - source: SAVED_SEARCH
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_SCHEDULERS_stg - source: SCHEDULERS
2014-11-20 17:39:28.519 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_SUGARFEED_stg - source: SUGARFEED
2014-11-20 17:39:28.520 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_TAB_TEST_stg - source: TAB_TEST
2014-11-20 17:39:28.520 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_TASKS_stg - source: TASKS
2014-11-20 17:39:28.524 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_TRACKER_stg - source: TRACKER
2014-11-20 17:39:28.524 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_UPGRADE_HISTORY_stg - source: UPGRADE_HISTORY
2014-11-20 17:39:28.524 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_USERS_stg - source: USERS
2014-11-20 17:39:28.524 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_USERS_FEEDS_stg - source: USERS_FEEDS
2014-11-20 17:39:28.524 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_USERS_LAST_IMPORT_stg - source: USERS_LAST_IMPORT
2014-11-20 17:39:28.525 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_USERS_PASSWORD_LINK_stg - source: USERS_PASSWORD_LINK
2014-11-20 17:39:28.525 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_USERS_SIGNATURES_stg - source: USERS_SIGNATURES
2014-11-20 17:39:28.525 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_USER_PREFERENCES_stg - source: USER_PREFERENCES
2014-11-20 17:39:28.525 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_VCALS_stg - source: VCALS
2014-11-20 17:39:28.526 [main] DEBUG org.openbusinessintelligence.cli.Main - Target: sgc_VERSIONS_stg - source: VERSIONS
2014-11-20 17:39:28.526 [main] INFO  org.openbusinessintelligence.cli.Main - Create tables if they don't exist
2014-11-20 17:39:28.526 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opening connection...
2014-11-20 17:39:28.526 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Using property file localhost_h2_dev
2014-11-20 17:39:28.527 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - databaseDriver = org.h2.Driver
2014-11-20 17:39:28.527 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - connectionURL = jdbc:h2:tcp://localhost:9092/dev
2014-11-20 17:39:28.529 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - driver loaded
2014-11-20 17:39:29.139 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Connected to database jdbc:h2:tcp://localhost:9092/dev
2014-11-20 17:39:29.139 [main] INFO  org.openbusinessintelligence.core.db.ConnectionBean - Opened connection
2014-11-20 17:39:29.142 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Product: H2
2014-11-20 17:39:29.144 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Getting keywords...
2014-11-20 17:39:29.144 [main] DEBUG org.openbusinessintelligence.core.db.ConnectionBean - Keywords: ADD,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASENSITIVE,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BEGIN,BETWEEN,BIGINT,BINARY,BLOB,BOOLEAN,BOTH,BY,CALL,CALLED,CASCADED,CASE,CAST,CHAR,CHARACTER,CHECK,CLOB,CLOSE,COLLATE,COLUMN,COMMIT,CONDITION,CONNECT,CONSTRAINT,CONTINUE,CORRESPONDING,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP,CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATE,DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DELETE,DEREF,DESCRIBE,DETERMINISTIC,DISCONNECT,DISTINCT,DO,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,ESCAPE,EXCEPT,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,FETCH,FILTER,FLOAT,FOR,FOREIGN,FREE,FROM,FULL,FUNCTION,GET,GLOBAL,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY,IF,IMMEDIATE,IN,INDICATOR,INNER,INOUT,INPUT,INSENSITIVE,INSERT,INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ITERATE,JOIN,LANGUAGE,LARGE,LATERAL,LEADING,LEAVE,LEFT,LIKE,LOCAL,LOCALTIME,LOCALTIMESTAMP,LOOP,MATCH,MEMBER,MERGE,METHOD,MINUTE,MODIFIES,MODULE,MONTH,MULTISET,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NO,NONE,NOT,NULL,NUMERIC,OF,OLD,ON,ONLY,OPEN,OR,ORDER,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PARAMETER,PARTITION,PRECISION,PREPARE,PRIMARY,PROCEDURE,RANGE,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING,RELEASE,REPEAT,RESIGNAL,RESULT,RETURN,RETURNS,REVOKE,RIGHT,ROLLBACK,ROLLUP,ROW,ROWS,SAVEPOINT,SCOPE,SCROLL,SEARCH,SECOND,SELECT,SENSITIVE,SESSION_USER,SET,SIGNAL,SIMILAR,SMALLINT,SOME,SPECIFIC,SPECIFICTYPE,SQL,SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATIC,SUBMULTISET,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,THEN,TIME,TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSLATION,TREAT,TRIGGER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL,UPDATE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,WHEN,WHENEVER,WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,YEAR,FALSE,TRUELIMIT,MINUS,ROWNUM,SYSDATE,SYSTIME,SYSTIMESTAMP,TODAY
